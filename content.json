{"pages":[{"title":"About","date":"2016-10-24T02:24:00.000Z","updated":"2019-04-25T17:23:41.908Z","comments":true,"path":"about/index.html","permalink":"https://legacy-blog.zthxxx.me/about/index.html","excerpt":"","text":"如未单独指出，则本文所有文章均基于 CC BY-NC-ND 4.0 发布，转载请注明出处。 关于我自己 嗨呀，我好菜呀！有什么可说的呢。。。 看过太多同龄的大神，体会过各种被碾压得成渣渣的感觉，其中有来自某看着成长起来的小学生 (虽然截止现在-2016-已经初中了)，在各种博客中随时能发现随手就能碾压我的各种初高中生博主。 受到了有来自无节操赛艇群里各路 dalao 的鼓励，同时也让我默默献上了膝盖。。。 喜欢二次元，天天看着群里 dalao 穿女装、开车，不敢说话。。。受到某老司机的影响，所以自己也想建个车库（咳，我只是说文件应该整理对不对！） 各方面都是辣鸡，但是觉得好玩就不会放弃。 关于编程 蒟蒻。。。各种意义上都是弱鸡。。。能和各位 蒟苣 dalao 生活在同一个时代真是了不起。 喜欢 C#，热爱玩 Python。因为觉得 C# 代码优美，逻辑关系明确，写的时候很舒服；用 Python 是因为喜欢脚本语言的便捷性，但是一直都吐槽动态语言的各种不爽，Python 学到后面各种黑科技黑魔法，总看到有 dalao 写的代码把我认为应该是 Python 设计不合理的地方当特性玩得飞起，卧槽，谁说 Python 简单来着！ 话说回来，shell 和 js 这种丧心病狂、自带混淆、又不得不用的语言，让我还是对 Python 感到别无所求了 (毕竟好那么多是不是)。 写页面向来无视浏览器兼容性，有各种写出失败且不可调试代码的丰富经历。 背景图包 本站背景图片均来自网络，因个人喜好所以设为背景，不作商用，部分尚不明出处，绝大部分来自于我所喜爱的几位 P 站 画师，此处向各位大触们再次献上膝盖：（以下列举尚不完整~） 【wlop】 【千夜QYS3】 【白夜ReKi】 【KyoD＋@ミクラブ】 【小忍.pr】 【ASK】 【Cait】 业余爱好 喜欢写字，喜欢弹钢琴 (虽然我只有手卷琴)，喜欢画老婆~ 不过还 too young, too naive ! 还需要再学习一个。 也喜欢古文，比如我就念了一句诗： ​ 苟利国家生死以 。。。 最后 放一张齐神的嫌弃脸 - (我跟你讲我就这个表情！)"},{"title":"Categories","date":"2019-04-25T17:23:41.908Z","updated":"2019-04-25T17:23:41.908Z","comments":true,"path":"categories/index.html","permalink":"https://legacy-blog.zthxxx.me/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-04-25T17:23:42.008Z","updated":"2019-04-25T17:23:42.008Z","comments":true,"path":"tags/index.html","permalink":"https://legacy-blog.zthxxx.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"画了一只治愈的由乃","date":"2017-11-03T10:50:45.000Z","path":"posts/painting-hand-drawn-Gasai-Yuno/","text":"尝试着彩铅临摹了一张我妻由乃的图， 渣绘预警 嗯，病娇的由乃虽然很赞，但我还是更喜欢看到由乃「治愈」的微笑，所以选择画了这张。 其实主要还是因为简单 血迹什么的当然不会画了，试过用红笔涂，但是没有「溅」出来那种自然感，感觉涂到画上肯定会毁，所以就没有画了。绝对不是因为懒 每天抽了一点时间，断断续续差不多持续了一周的时间，线稿好还，上色感觉很难，现在对黑白灰关系把握不好，反正就是还得多练。 数了数，十个月的时间才画了 17 张，还不如别个小姐姐一个月的量，画的还很简单，真是怠惰啊怠惰。 工具： 马可油性彩铅 36 色 - 虽然只有 36 色，但我才不会说,只要给我 72 色，我 。。。。我也肯定上不好色的！ Mono Zero 方头自动橡皮 - 挺方便点，就是用得有点快 荷兰白卡 400g - 70g 太厚，400g 简直就是纸板，太硬了，以后买的画我想试试 200g 的，嗯，等我画玩了就买，还有 47 张。。。 最近某壕大佬借了块 UGEE EX07S 给我，之前我的渣板驱动都出问题了，终于可以淘汰了，下次试试板绘吧~","tags":[{"name":"手绘","slug":"手绘","permalink":"https://legacy-blog.zthxxx.me/tags/手绘/"},{"name":"彩铅","slug":"彩铅","permalink":"https://legacy-blog.zthxxx.me/tags/彩铅/"}],"categories":[{"name":"绘画","slug":"绘画","permalink":"https://legacy-blog.zthxxx.me/categories/绘画/"}]},{"title":"[译] 把 Cmder 装进你的 Hyperjs 终端里","date":"2017-10-28T16:03:21.000Z","path":"posts/Using-Cmder-with-Hyper/","text":"原文地址：Using Cmder with Hyper 原文作者：Benjamin Sinkula 译文出自：zthxxx’s blog 译者：zthxxx 注：本译文基于 CC BY-NC-ND 4.0 发布 今天我们来写写关于 Hyper 的事情，这本质上不过是一个装饰着漂亮 UI 的终端程序。虽然这样说可能留不下什么深刻印象，但它真的看起来很棒！此外，它还有很多插件能让你添加一些无法从标准的终端中获得的特性。 这在 Windows 上更是如此， 原本终端被限制只能使用 cmd 或 powershell，虽然后者毫无疑问要更具现代性和可用性，但因为一些原因，我从未发现我自己在 Windows 上使用过 powershell，而是只会在当我觉得需要终端时开启 cmd。 这让我接触到了 Cmder。Cmder 自我描述为一个 「为 Windows 打造的便携式模拟终端」，这貌似与 Hyper 一脉相承。Cmder 有一些挺不错的功能，比如 Tab 自动补全命令，就我所知[1]，Windows cmd 在很长一段时间里都不支持。它还有许多特性，包括标签页、捆绑了一些好用的功能如 ls 和 grep，等等。我极度推荐 Cmder 给每个那些频繁在 Windows 下使用终端的人，你不会后悔的！ 那么，Cmder 提供了许多很棒的功能，Hyper 看起来又真的很酷……但如果我像在 Hyper 中使用 Cmder 样式的终端呢？ 正如我本周早些时候的发现，这确实是可能实现的。 首先，看起来 Cmder 变出许多魔法的关键是通过执行这条命令： 1cmd /k \"%ConEmuDir%\\..\\init.bat\" -new_console:d:%USERPROFILE% 让我有点感兴趣的是传入参数中的 /k 开关。无论什么 bat 文件都能在 Hyper 启动时被轻松调用，因为 Hyper 的 .hyper.js 配置文件会暴露终端启动时的启动参数。 考虑到这点，让一个类似 Cmder 的终端运行在 Hyper 中仅仅只需要基于以下几个简单的步骤： 通过在 Cmder 中执行 echo %ConEmuDir% 命令找出你的 %ConEmuDir% 文件夹路径（我不认为这个环境变量会在 Cmder 以外的地方被建立） 在 .hyper.js 中，在 env 的值下插入一个键 ConEmuDir: 'Your/ConEmuDir/Path/Here' 同样是在 .hyper.js 中，在 shellArgs 数组中添加两个参数值 ——首先是 /k 开关，然后是作为第二个值的 %ConEmuDir%\\..\\init.bat 你最终应该得到一些类似于如下的结果[2]： 1234shellArgs: ['--login', '/k', '%ConEmuDir%\\..\\init.bat'],env: &#123; 'ConEmuDir': 'C:\\Path\\To\\Your\\ConEmuDir'&#125;, 译者注： 这种写法必须限制于路径中没有空格，对于 Cmder 本身安装路径中有空格的情况，有更推荐的写法[3]。 就是这样！现在你再启动 Hyper，应该就能迎来 Cmder 式的终端体验，拥有彩色的当前工作路径文字，和 Unix 命令支持如 ls 等（依赖于你安装了带有这些的 Cmder 版本）。 你可能注意到我省略了 Cmder 中使用的 -new_console: 参数，我从来没有尝试过测试它 —— 这个参数可能或不能在 Hyper 正常工作。如果你爱折腾的话，可以自行尝试它。 看到这儿你可能会问我了，「如果 Cmder 在 Windows 下用得挺好的，为什么我还要用 Hyper？」 我认为答案应该是：尝试它们两个！ 译者补充： Hyper 2.0 及以上版本已经修复了中文显示的问题，但是截止本篇文章写作时，Hyper.is 官网中直接下载到的还是 1.4.8 版本，我是直接在官方 GitHub 仓库的 Releases 中找到并 Hyper 2.0.4 版 的。 我并不是很确定 cmd 什么时候有了 Tab 自动补全功能，只是到了写这篇文章的时候我尝试启动 cmd 后才注意到，当我按下 Tab 时，某些单词能像 expl 到 explorer 这样自动补全了。 ↩ 你的 .hyper.js 配置可能本来就没有 --login 参数在 shellArgs 的值中，我觉得它是默认的参数，所以把它留下来了。我不确定 --login 在 cmd 和 powershell 中代表什么含义…… ↩ 直接找到 init.bat 的位置，而不再使用相对路径 %ConEmuDir%\\..\\init.bat，把整个 init.bat 的绝对路径作为一个环境变量，使用单引号包裹双引号的形式，再把整个环境变量作为参数传入 shellArgs。1234shellArgs: ['--login', '/k', '%CmderInit%'],env: &#123; CmderInit: '\"C:\\\\Program Files\\\\cmder\\\\vendor\\\\init.bat\"'&#125;, ↩","tags":[{"name":"翻译","slug":"翻译","permalink":"https://legacy-blog.zthxxx.me/tags/翻译/"},{"name":"折腾","slug":"折腾","permalink":"https://legacy-blog.zthxxx.me/tags/折腾/"}],"categories":[{"name":"工具","slug":"工具","permalink":"https://legacy-blog.zthxxx.me/categories/工具/"}]},{"title":"[译] 深入理解 Python 字典实现过程","date":"2017-03-26T07:37:06.000Z","path":"posts/python-dictionary-implementation/","text":"原文地址：Python dictionary, the implementation 原文作者：Shipeng Feng 译文出自：zthxxx’s blog 译者：zthxxx 校对者：Zheaoli 注：原文与本译文均基于 CC BY-NC-SA 发布 字典是一种内置于 Python 中非常有用的数据类型，总的来说它是一些由键（key）索引的对象，这里的 key 是必须是不可变的。 以下是一个简单的字典用法示例： 123456&gt;&gt;&gt; d = &#123;'fengsp': 10, 'amy': 12&#125;&gt;&gt;&gt; d['fengsp']10&gt;&gt;&gt; del d['fengsp']&gt;&gt;&gt; d.keys()['amy'] 通常我们会多次的检索一个值（value），因此通过 key 来检索一个对象的过程必须是个非常快速的操作。对于 CPython 本身，多种语法特性都是在字典的帮助下支持的，例如，类实例就是使用字典来储存实例属性，可见字典的性能至关重要。 PyDictObject 结构体 在 CPython 源码中，字典是一个 C 的结构体， PyDictObject： 12345678910111213141516struct PyDictObject &#123; PyObject_HEAD Py_ssize_t ma_fill; /* # Active + # Dummy */ Py_ssize_t ma_used; /* # Active */ Py_ssize_t ma_mask; PyDictEntry *ma_table; PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, long hash); PyDictEntry ma_smalltable[PyDict_MINSIZE];&#125;;typedef struct &#123; Py_ssize_t me_hash; PyObject *me_key; PyObject *me_value;&#125; PyDictEntry; 在此数据结构中的这些字段分别是： ma_fill 表示所有激活元素（active entry）和虚拟元素（dummy entry）的计数。 如果删除一个 key，这个元素将成为虚拟元素，并且 ma_fill 任然保持不变；如果添加一个新的 key 并且新 key 不属于虚拟元素，则 ma_fill 增加 1。 ma_used 对象中所有激活元素的计数。如果添加一个新 key，ma_used 会增加 1，如果删除一个 key，这个字段将减 1。 ma_mask 哈希表的位掩码，这个表中包含 ma_mask + 1 个哈希槽(slot)。 这里储存位掩码而不是大小，因为在查找元素的一个 key 时，使用 slot = key_hash &amp; mask 就能直接获得哈希槽序号。 ma_table 一个 PyDictEntry 结构体的数组， PyDictEntry 包含 key 对象、value 对象，以及 key 的哈希； 这些 key 的哈希作为缓存储存起来，例如，当我们搜索一个 key 时，我们可以通过使用缓存哈希来执行快速比较查找。 ma_lookup 一个用于查找 key 的函数指针。初始化时它被设置为 lookdict_string。 lookdict_string 假定字典的 key 全是 PyStringObject 类型，这是一个使得查找 StringDictObject 类型的 key 可以快很多的最佳优化。 如果一个 key 不是 PyStringObject 类型，那么ma_lookup 将改为一种更慢的普通查找函数。 ma_smalltable 一个有 8 个槽的哈希表（译者注：这里应该是最小 8 个槽，因为 PyDict_MINSIZE=8）。 这样小字典也能直接存储在这里，并且不会再调用 malloc()。 碰撞 两个不同的 key 可能会被散列到相同的槽，这被称之为碰撞。当碰撞发生时，Python 使用 开放寻址法 来解决碰撞：如果这个槽不能再容纳这个 key（译者注：指槽中已经有 key），那么就寻找其他槽。 例如，这里有个简单的方法，如果槽 i 不能再容纳这个 key，就尝试槽 i+1 、i+2 等等。对于每条哈希，我们现在定义了能容纳它的所有槽的列表，如果删除其中一个 key，整个列表将会被破坏，这就是这里为什么我们需要虚拟元素（dummy）。 这个简单的开放寻址线性算法会使其退化为线性堆，这将导致性能降低，因为我们每次查找一个 key 都要扫描所有的槽。在实际中，CPython 使用如下算法： 1234567891011121314151617DUMMY = 'dummy'# 以我的水平并不足够理解算法是如何工作的，# 最后的结果会覆盖 0 到 ma_mask 之间的所有整数。def open_addressing_in_cpython(table, key, hash): free_slot = None perturb = hash i = slot_index = hash &amp; ma_mask while table[slot_index] is not None and table[slot_index].key != key: if table[slot_index].key is DUMMY and free_slot is None: free_slot = slot_index i = (5 * i + perturb + 1) slot_index = i &amp; ma_mask perturb &gt;&gt;= 5 if table[slot_index] is None and free_slot is not None: return free_slot return slot_index 哈希表大小 如果我们持续添加 key 到字典中，那很快就会没有足够的空间来装下所有的 keys，现在就需要对哈希表扩容（resize）。 CPython 会在每次添加 key 时检查表大小，如果哈希表已经处于三分之二满（相对于 ma_fill），将扩容哈希表。如果字典中包含接近或超过 50000 keys，扩容后新的大小将为 ma_used * 4，其他时候扩容后为 ma_used * 2。 哈希表不会在从字典中删除大量 keys 时引发调整大小，这意味着哈希表将不会变小。这不是什么大问题，因为大多数时候我们我们只使用字典一段时间，然后就丢弃掉整个字典。如果你真的建立了一个非常大的字典，并且从中删除了许多 keys，那么你应该用剩余的 key 创建一个新的字典。 空闲列表 许多字典实例被频繁的创建和销毁，为了减少创建和销毁的次数，一种 free_dicts 数组被用于容纳不再使用的字典对象，相当于一个简单的缓存。如果我们需要一个 PyDictObject 对象，它将从可用的空闲列表中获取。 键共享与有序字典 当字典用作对象属性的容器时，它们会占用比必要更多的内存，因为键是相同的，但它们却被复制到每个实例中了。自 Python 3.6 起，一个属性字典与同一类实例的其他属性字典共用 keys，例如有如下这样的类： 1234class User(object): def __init__(self, username, email): self.username = username self.email = email 这些属性字典将会被像这样存储： 12345678910111213# 这是在属性字典之间共享的# 并且这也是排序的keys = [ (5317300778844242624, 'username'), (268341141884068675, 'email'),]# this hash table just stores the index to the key entries# 这个哈希表仅把索引存储到键元素中# 这是简化的index_table = [0, None, None, 1, None, None, None, None]# 这是值values = ['user01', 'user01@example.com'] 我的想法 CPython 中字典的实现过程是非常简洁明了和易懂的。它的代码优美而高效，所有的参数选择都是经过实践的，例如，其中 free_dicts 和 ma_smalltable 参数的大小。我爱它们。","tags":[{"name":"翻译","slug":"翻译","permalink":"https://legacy-blog.zthxxx.me/tags/翻译/"},{"name":"Python","slug":"Python","permalink":"https://legacy-blog.zthxxx.me/tags/Python/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"https://legacy-blog.zthxxx.me/categories/程序语言/"},{"name":"Python","slug":"程序语言/Python","permalink":"https://legacy-blog.zthxxx.me/categories/程序语言/Python/"}]},{"title":"Hexo 的个人 Wiki 主题 - Wikitten","date":"2017-02-21T13:35:06.000Z","path":"posts/Personal-Wiki-System-Theme-for-Hexo/","text":"以下多图预警！ TL;DR 用 Hexo 做个人 Wiki 知识管理系统 起始 知识是自己构建出来的，不是别人灌输的，也不是看了各种资料背住就完了。所谓构建，是指接受信息输入之后，通过信息整理加工，消化转变为自己理解的内容，并分类记录在脑部对应类别的不同层次区域。 就像一个帝国的建立和发展过程，不断的累积资本，转化为力量。通过知识加工这个二次学习的过程，能让我们更加牢固的记住关键知识和产生更加深入的理解。 一直希望寻找一种相对优雅、我比较喜欢的方式来做知识管理，帮助知识积累构建；经过尝试了手写笔记本、OneNote、Evernote、为知笔记等之后，最终选择用 个人 Wiki 系统 来做自己的知识管理。然而天下 Wiki 千千万，选择困难症患者到底该选哪一种呢？ 我试了时下好几个流行的、推荐者比较多的 Wiki 系统，但是多少都有些小细节让我不是很满意。在我的 Wiki 首页 可以看到我对知识管理和这几个 Wiki 系统的一些简单的看法，以及为此自己开坑了个 Wiki 的轮子。 轮子 先放上上我经过了这些使用之后，整理出自己对 个人 Wiki 系统的需求： 界面简洁，排版整齐，有些留白，不要太满 （要求很宽泛） 部署简单，不需要后台与数据库 （最好静态页面） 支持多级分类 （满足知识的分类性） 分类目录可展开和收缩 展开分类时可直接看到该分类下所有条目 支持全文搜索 使用 Markdown 书写 适合单人的修改与更新内容 最好支持查看历史版本 嗯，所以以上这些也是我自己 Wiki 系统的特性了吧~~ 借用 Hexo 博客系统的框架，仿照 Wikitten 的样式，写了一个针对于个人 Wiki 的主题 【hexo-theme-Wikitten】。 先放上两个链接： 我的个人 Wiki 地址：http://wiki.zthxxx.me/ Wikitten 主题地址：https://github.com/zthxxx/hexo-theme-Wikitten 再放一个预览的截图： 嘛，样式是跟 victorstanciu 的 Wikitten 一样的（人家有 MIT LICENSE 的，并且我提到时也都有注明出处），之所以选择 Wikitten，是因为我觉得这个 Wiki 系统最接近我自己对个人 Wiki 的需求，并且样式也很简洁。不过相比起来，代码就完全不一样了；人家是 PHP，我这是 Hexo 的主题，不需要后台，可以直接挂在 Github Pages 上，省去了服务器；原本只支持搜索标题的，我也给改到支持全文搜索了。 浅谈个人 Wiki 系统 个人 Wiki 对我的意义大概就是 知识的消化、积累、归类整理，于是我也总结了一套觉得比较合理和适用于自己的简单知识管理流程： 通过网页、RSS、微信等网络渠道作为知识获取来源。 通过笔记系统（手写笔记、OneNote、Evernote）初步筛选有价值有针对性的信息，收藏信息，分类整理，做读后要点笔记记录。 自己平时突然想到或总结的一两句话，或很零碎的点子、灵感，初步消化的内容，则用 Wiki 记录。 最后当 Wiki 在某版块有一定量后，将这方面笔记和 Wiki 中的内容重读，整理和提炼，二次消化精炼再加上自己的感悟和理解，写成文章发表在 博客 上。 在使用中，笔记系统 主大块信息的分类和整理，Wiki 主零碎知识的积累，而 博客 只在于 精。 Wiki 中某一版块刚建时，可能只有很少内容或者就一句话，但是通过这种使用流程，日积月累，这方面的事物接触得多了，零散的知识也就多了，那么 Wiki 中这个版块记录的内容也就会变多了，也就是通过积累，把原本大量碎片化的知识结构化整理起来了。 关于侧边栏展开这点，我也认同 @TankyWoo「**一篇维基往往就是一个独立的内容，其次可能和某几篇挂钩，所以左边显示全部标题并不是一个硬需求」**的观点；这的确不是硬性要求，甚至有些不符合维基哲学；但是我用了一些系统后，确实就很强烈的想要有侧边栏、有展开、有跳转的功能；这也是我认为个人 Wiki 与维基百科的不同地方： 维百重在知识的全面，每个词条的内容全面、详尽，报道不会出偏差，是信息的堆砌；词条解释内可能有某些指向其他 wiki 页面的链接，但并不是指这两个词条之间关联，而仅仅是对这个句子中这个词语的解释，参考资料的链接才是挂钩有关联。 个人 Wiki 在这点上，力求对每个词条做到相尽，但做不到全面，受限于个人的知识有限。个人 Wiki 的目的，首先是为了构建自己的知识体系，然后才是积累和分享，知识体系之间是有关联的，呈网状和层状结构，构建并不是简单的堆砌，而是类似于分类聚合的形态，所以分级目录必须有；顶层总体是森林，有不同的树木群，树上有分支，结满果实。 我希望 Wiki 页面能让我随时看到总体分类，把控整体，一是有助于知识的联想（看到分类能想得起里面有哪些词条，每条讲的什么，哪些和现在有关），不用点开每条，联想的过程也是在加深印象；二是随时看到知识面的匮乏和自己碌碌无为时激发一定的动力去学习（哎，我确实又懒，还 too young ，有必要学习一个），这点因人而异，不过我觉得好多人也需要吧（不然怎么都是晚上效率暴增。。。唉，都是白天啥也没干的羞耻心）；三是我对 Wiki 使用频率还挺高的，所以比起一般要退回首页才能跳转到其他词条的，有侧边栏链接，真是方便了不少。 汇总参考 顺便也汇总说一下我用过一些 Wiki 系统的特点，与其跟我自身需求的差异吧。 【注：以下仅代表个人观点，所述特点因个人关注点而带有严重的片面性，轻喷，希望有不同意见的朋友也来补充一些自己的观点。】 00 - Wikitten 双栏 界面简洁 侧边可展开显示所有条目标题 支持 Markdown 书写，支持多种语言 支持切换到查看源码 不可全文搜索，只能搜索标题 需要后台加数据库，部署繁琐 01 - TiddlyWiki 双栏 侧边可展开显示所有条目标题 全文可搜索 功能丰富 不支持 Markdown，而是 WikiText 单文件系统 02 - MediaWiki 全文可搜索 功能丰富，定制程度高 重量级，Wiki 系统中最强大 支持查看历史版本 适合大型项目，多人编辑 不支持 Markdown 侧边不可展开显示所有条目标题 界面复杂、臃肿 需要后台与数据库，部署繁琐 03 - Wiko 同为 Hexo 主题 全文可搜索 界面简洁 支持 Markdown 书写 不支持二级分类 侧边不可展开显示所有条目标题 搜索也只可以在首页进行搜索 配色不是很让我喜欢 04 - MDwiki 界面简洁 部署简单 支持 Markdown 书写 无搜索功能 不支持二级分类 添加分类需手动修改主页顶栏 不可展开显示所有条目标题 纯静态，通过 AJAX 显示不同页面 05 - VimWiki 无搜索功能 （感谢指正，有搜索但功能弱并且慢） 不支持 Markdown 语法（但有插件支持） 不习惯 Vim 的人很难适应 06 - DokuWiki 整体看上去类似 MediaWiki，但没那么强大 更适合作为多人编辑的项目文档 虽然没数据库，但依然需要 PHP 做后台 不支持 Markdown 配置项目多，大部分教程都说到其配置复杂 编辑器体验较差 07 - Simiki 单栏 界面简洁 类似 Wixo 不支持二级分类 不支持搜索 侧边不可展开显示所有条目标题 后续 嘛，看了这么多，总的来说，hexo-theme-Wikitten 的轮子还是很符合我自己的使用习惯；希望在用 Hexo 的朋友，有需要个人 Wiki 系统的，也来试一下下这个主题；后续一堆 Bug 和 TODO List 正在维护，欢迎有兴趣的来提提 Pull request。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://legacy-blog.zthxxx.me/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://legacy-blog.zthxxx.me/tags/博客/"},{"name":"Wiki","slug":"Wiki","permalink":"https://legacy-blog.zthxxx.me/tags/Wiki/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"服务器","slug":"编程开发/服务器","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/"},{"name":"Hexo","slug":"编程开发/服务器/Hexo","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/Hexo/"}]},{"title":"使用 Travis 自动构建 Hexo 到 GitHub","date":"2016-12-26T05:20:11.000Z","path":"posts/Build-Hexo-Blog-by-Travis-CI/","text":"额，本篇文章是这篇博文的后续，当时本来打算写完上篇就挨着写的，结果嘛。。。跳票了一个多月~~今天还是捡回来重新把他写完。 上次讲了第一步是用 Hexo 生成静态博客，第二步是部署到 GiHub Pages；但是有觉得部署 GitHub Pages 比较简单，感觉过程能讲地方的不是很多，于是这次再加一点内容，加上 Travis-CI 做持续集成。 嘛，第一步还是照惯例先来说说第一个 GitHub Pages 吧~ 呃，至于没有 GayHub 账号的人，多半也没有兴趣点开这篇文章吧。。。 （想多了吧！即使有账号也没人有兴趣点开这篇文章看。。。） GitHub Pages GitHub 提供 GitHub Pages 静态站点托管服务，旨在方便用户可以通过静态页面直接展示他们的项目主页和各种演示。 简单的概括，GitHub Pages 服务就是把项目仓库中 gh-pages 分支的内容作为静态页面的文件，并提供 https://&lt;username&gt;.github.io/&lt;repository&gt;/ 的域名以供访问。 其中 &lt;username&gt; 是指用户名，&lt;repository&gt; 是指仓库名。 其中有个例外，就是当仓库名为 &lt;username&gt;.github.io 时，是固定解析的 master 分支，其他仓库是默认解析 gh-pages 分支并且可以配置使用哪个分支作为页面；&lt;username&gt;.github.io 仓库就只能解析 master 分支中的文件，并且访问域名就是 https://&lt;username&gt;.github.io/，称为个人页面，其他仓库的访问需要加上 /&lt;repository&gt;/ 目录，被称为项目页面。 举个例子，GitHub 用户 zthxxx 有个仓库 HelloWorld，并且仓库中也有 gh-pages 分支，放了一个 index.html 里面写的 &lt;h1&gt;Hello World&lt;/h1&gt;，那么我们就可以通过 https://zthxxx.github.io/HelloWorld/ 来访问这个页面，然后看到一个大大的 Hello World。 一般项目页面是具体要展示某个仓库的项目的时候使用，我们今天讲的个人博客就类似于一个个人主页，所以就使用 GitHub Pages 的个人页面好了。 操作过程也十分简单，具体步骤大概就是： 先建一个 &lt;username&gt;.github.io 的仓库； 然后将我们上次讲到的 Hexo 生成的博客静态页面文件填到仓库 master 分支； 最后通过 https://&lt;username&gt;.github.io/ 访问就是了； 一切都很简单，就跟我们平时新建仓库、push 文件、打开浏览器的操作没什么两样，于是我也没什么兴趣再去截几张操作步骤的图来放在这里，实在不知道怎么操作的，可以看 这里 或者 这里 讲的步骤。 如果你的 Hexo 博客照 我上次所讲的配置 一样配好了的话，使用 hexo deploy 命令，Hexo 会通过 Git 自动部署到配置的指定仓库分支了，Hexo 博客源码本身我们一般就手动 push 放到另一个分支中，比如 blog-source writing dev 之类的，表示用来写作的都行。 好了，下面讲的所有步骤都只是为了能不用敲 hexo deploy 命令这一个目的，不用看了。 （诶，别，别啊，我开玩笑的，别真关页面啊！） Travis-CI 现在要讲的是用于持续集成构建的工具，Travis-CI。 Travis-CI 能够通过 GitHub Webhook 将推送的代码自动获取到虚拟环境，并根据项目根目录 .traivs.yml 文件中的描述的环境和命令来执行一系列构建任务。 这个持续集成原本作用是，持续自动的将推送到 GitHub 仓库中的代码，经过构建和运行测试后，把代码合并到主干并部署发布到指定的生产环境。 当然，我们这里并没有用到持续集成——代码都是自己手动推送合并的，也没法测试，顶多算是使用到了其中的自动部署功能。 我们现在的唯一目的就是为了不用敲 hexo deploy 命令为了让我们写好的博客内容能够被自动构建并发布到 GitHub Pages 页面。 Travis-CI 分收费版和免费版，免费版有一些限制比如构建时间有限和不能构建私有仓库之类的，不过这里无关紧要，所以我们就用免费版。 打开 Travis-CI 官网，使用 GitHub 账号就可以登陆。 登录后左边会显示设置了构建的仓库，右边显示正在构建的项目。初次使用 Travis-CI 的话，这两块应该都是空的。 现在我们需要添加一个仓库到构建中，先点击左边仓库标题 My Repositories 旁边的加号，进入仓库选择界面。 点击右上方的 Sync account 按钮可以手动同步一下所有仓库状态到 Travis-CI 中。下面的每个仓库名前面有个打勾打叉的滑动开关，打开开关表示把对应的项目添加到 Travis-CI 的构建列表中开启构建。 开启构建之后就可以通过左侧的项目栏选择具体的项目查看了。Travis-CI 是通过 push 来触发构建的，所以在构建我们的博客之前，先在 Travis-CI 中对博客所在的项目进行一些设置。在查看项目界面，点击右侧 More options -&gt; Settings 选项中，开启 Build only if .travis.yml is present 以及 Build pushes 选项；这表示只有 .travis.yml 文件存在的 push 推送才会被构建。 在 Travis-CI 开始构建时，还需要获取一些信息，比如需要怎么的环境、通过什么过程来构建等等，于是， Travis-CI 允许用户在项目根目录放置 .travis.yml 文件，通过 YAML 语言来描述环境以及构建过程等。 对于 .travis.yml 文件的使用，应该先查看官方文档，里面包含了多种语言的开始教程。简单的说就是要告诉 Travis-CI 你需要什么系统环境、需要什么库、要怎么初始化环境、执行什么构建脚本、构建成功要做什么等等这些。 我直接把我博客的 .tarvis.yml 文件贴上来，都加了详细注释的，基本上简单的构建都可以参照这个写法。 1234567891011121314151617181920212223# .tarvis.ymllanguage: node_js # 指定语言环境node_js: - \"6\" # 指定 NodeJS 版本dist: trusty # 指定系统版本。trusty 是指 Ubuntu 14.04 发行版的名称sudo: required # 是否需要 sudo 权限branches: # 指定要构建的分支 only: # only 表示只构建以下分支 - writing install: # 在安装项目环境阶段需要运行的命令，一条一行，类似的还有 before_install - source travis_env_init.sh # 执行指定的 shell 脚本来做初始化script: # 在构建阶段需要运行的命令，一条一行，类似的还有 before_script、after_script - hexo clean - hexo generate # Hexo 常规命令，执行清理和生成after_success: # 在构建成功后要运行的命令，构建失败不会执行，其他同上 - hexo deploy &gt; /dev/null # 通过 hexo 的 deploy 命令部署博客notifications: # 设置通知项 email: true 在上面的 install 项中，有一条 source travis_env_init.sh，是由于我个人习惯，如果初始化命令比较多比较复杂，我一般就不直接写在 .travis.yml 文件中，而是单独建一个初始化环境的 shell 脚本，在 .travis.yml 中只是执行它，有兴趣的可以参考我博客的 travis_env_init.sh 脚本。 其实这里我们用到的初始化环境的命令也相对简单，我这里也贴一下嘛： 1234567# travis_env_init.sh# 全局安装 Hexonpm install -g hexo # 全局安装 Hexo 命令行工具，因为我们是命令行操作npm install -g hexo-cli# 安装 package.json 中的依赖npm install 好了，现在往仓库中 push 一个 commit，Travis-CI 就会自动获取代码并构建了。 那么，现在又有一个问题了——我们的目的是自动部署到 GitHub Pages，用的是 hexo deploy 命令，但是 Hexo 又配置使用的是 Git push 来推送的，那么 Travis-CI 怎么有权限操作我的 GitHub 仓库呢！ GitHub Access Token 首先我们肯定不应该把自己的 ssh 私钥作为文件放到仓库。 那么现在有两种解决办法。 第一种是加密私钥文件上传到 Travis 的空间，但是这种办法相当麻烦，要下载本地工具、重新生成密钥、加密上传、在 GitHub 添加私钥、还要在脚本中增加解码的命令等等，总之非常麻烦，因此这里我不推介使用这种办法，想具体了解这种方法的，可以看这两篇博文：静态博客遭遇持续部署 使用 Travis CI 自动部署 Hexo 现在要讲的就是更推荐的另一种方案，使用 GitHub Access Token。 GitHub 允许你通过 设置页面 添加一个个人访问令牌（Personal access tokens），使用 Assess Token 将有权限通过 https 访问 GitHub Api 操作自己的仓库。这个就是我们需要的。 现在我们来添加一个 token，先进入自己 GitHub 的 设置页面，点击 Personal access tokens -&gt; Generate new token 按钮，新建一个 token。 在权限设置中，我们只需要操作仓库，因此只需要打开仓库相关的权限就够了，权限开放应该满足最小原则，能少就少。设置好权限后点击生成按钮就会生成完毕并跳到 tokens 列表。 现在就需要把刚生成的 Access Token 的值复制下来，注意，这个页面一旦刷新过了， token 就不能再显示了，没记住的只能重新生成一个了。 嗯，现在 Access Token 也有了，能操作仓库了，那么，这个 token 应该放到哪里呢？ 肯定不是放到代码里。。。 其实在 Travis-CI 的项目设置界面就有提供设置环境变量，我们就应该把 token 放到那里。 回到我们 Travis-CI 的 博客项目设置页面 中，添加一个名为 GIT_REPO_TOKEN 的环境变量储存我们的 token，并记得要设置 Display value in build log 为 OFF，关闭变量的显示，否则等于公开了 token。 现在在我们的执行脚本中就能使用 $GIT_REPO_TOKEN 访问 token 的环境变量了~ 然后就是如何使用了。在 Hexo 部署前，我们应该把原来的部署仓库地址用带有 Access Token 的地址替换掉，于是在 .travis.yml 的 hexo deploy 命令前增加一条命令，或者是在之前提到的 travis_env_init.sh 初始化脚本中增加这条命令： 1sed -i'' \"s~git@github.com:~https://$&#123;GIT_REPO_TOKEN&#125;@github.com/~\" _config.yml 这样，在执行时，这条命令就能自动替换到有权限操作的 token 地址了，并且也不会泄露或者影响本地的原始配置文件。我一般习惯把这种初始化相关的命令都放到 travis_env_init.sh 文件中。 最后的效果 加了自动部署后，我们现在写完一篇博文后，就跟平时使用 Git 控制版本和推送一样，只需要 123git add --allgit commitgit push origin writing push 之后，Travis-CI 就能自动帮我们构建博客并部署到 GitHub Pages 了，本地的操作就只是单纯的写作，跟 Hexo 本身完全不再发生关系，一切就跟我们平时写文章一样~ 于是又可以愉快的玩耍啦~ （￣▽￣）","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://legacy-blog.zthxxx.me/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://legacy-blog.zthxxx.me/tags/博客/"},{"name":"Git","slug":"Git","permalink":"https://legacy-blog.zthxxx.me/tags/Git/"},{"name":"Travis","slug":"Travis","permalink":"https://legacy-blog.zthxxx.me/tags/Travis/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"服务器","slug":"编程开发/服务器","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/"},{"name":"Hexo","slug":"编程开发/服务器/Hexo","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/Hexo/"}]},{"title":"Merry Christmas !","date":"2016-12-24T20:51:24.000Z","path":"posts/Merry-Christmas-2016/","text":"哦哈哟~ 米娜桑~~ Merry Christmas !!! 话说今天的本站的页面也有给主题改版呢，圣诞专用哦~ 纪念一下~ 没啥好说的，就祝各位鸡年大吉吧！ 蛤？你说还没到过年？ Naive，这个叫提前祝贺，而且圣诞节也算是个过年的节嘛！ 每到圣诞我都会想到 Cait 笔下星奈的这几张图，真是超喜欢星奈和小鸠在一起！ (｡･ω･｡) 当然是都吃啦~~~~ 吼吼吼~~我好兴奋的！我已经控制不住我的手了！！ 晚安诸君","tags":[{"name":"Christmas","slug":"Christmas","permalink":"https://legacy-blog.zthxxx.me/tags/Christmas/"}],"categories":[{"name":"Life","slug":"Life","permalink":"https://legacy-blog.zthxxx.me/categories/Life/"}]},{"title":"圣诞节专用改版样式纪念","date":"2016-12-24T20:01:36.000Z","path":"posts/Christmas-Theme-Style-Anniversary-2016/","text":"毕竟圣诞嘛~~ 应该庆祝一下是吧~ 这不，刚刚照着某老司机的样式，也给自己的博客改了个圣诞主题~ 头像戴着圣诞帽，飘着雪花，换了个星奈的圣诞装做背景图，加了《龙与虎》中大河唱的《ホーリーナイト》做背景音乐。 毕竟过了圣诞就会撤掉换回原来的样式。 嘛说是要纪念来着，毕竟圣诞样式只能挂一天，想想也没什么好办法，也就截图做个纪念啦 齐神这个嫌弃的表情强行带上这个帽子总感觉怪怪的，但是更加想笑了，我心里已经脑补出了齐神的吐槽了，蛤蛤蛤蛤。 Banner 里星奈这张图看着真的好有节日的感觉~ 背景里是星奈和小鸠~~小鸠好萌呀 听着《ホーリーナイト》这首歌总是忍不住想起《龙与虎》中的场景，嗯，还是满满的感动。那晚上的圣诞夜，tiger 看上去是那么的孤独，如果不是龙儿过去陪她，很不敢去想象 tiger 独自一人在那个冰冷的房间守着一根微弱的蜡烛度过一个圣诞的晚上。龙儿走的时候，tiger 追出去那段哭得多么伤心裂肺，现在想到依然心痛不已。不过也正是那晚，tiger 才真正知道自己的内心，这样想就开心多了~~ 啥？你说今天没有看到背景，没有雪花没有音乐？ 。。。。。。 不好意思，这是里世界的样式 ╮(￣▽￣)╭","tags":[{"name":"Christmas","slug":"Christmas","permalink":"https://legacy-blog.zthxxx.me/tags/Christmas/"}],"categories":[{"name":"Life","slug":"Life","permalink":"https://legacy-blog.zthxxx.me/categories/Life/"}]},{"title":"提问的正确姿势","date":"2016-12-21T12:30:16.000Z","path":"posts/Posture-for-Ask-Questions/","text":"嘛，最近总是碰到有人问一些奇奇怪怪的问题，完全不知道从何开始回答，不回答又怕人家误会成冷漠高冷之类了，真是伤脑筋呐~ ╮(￣▽￣)╭ 看来有必要给大家普及一下各种提问的 姿♂势 了。 ( ○|￣|＿ 诶？不是说这个姿势啊，喂！你脱裤子干嘛 ) 咳咳，说正事啊，平时做任何事情，常常会遇到很多各种各样的问题，尤其我们工科学生，到处都有“实际与理论不符的情况”，所以大家平时也都习惯相互提问请教。 嘛，有问题就问当然是好事，总比明知有问题还一直憋着不说或者根本意识不到自己问题，自以为没有问题的强。 但是有时候问题问着问着就变得比较奇怪了，也很让人无奈。。。随意感受一下~ 你们把这个报错给我解决了。 ( 好的，大爷。Σ( ￣□￣||) ) 你看我这个程序怎么运行不了？ ( 因为玄学 ) 你看我这几个线都接对了的，都检查没问题，它就是工作不了要短路？ (哦，原来你线接对了啊，哦原来这里是故意不接的，哦原来这里是故意接反的啊，原来是我看错了啊) Java 要怎么写？ (这个很简单啊，拿起笔，跟我来，j… a… v… a，好，写完啦) 我想弄个卖东西的网站，像淘宝那种，该怎么建？ ( 蛤？淘宝。。。是哪种？？) 写网页要怎么学？ ( 这个问题问的好，这个要先…… 以下省略两百万字。) Java 好还是 C# 好？ ( 。。。。。。 Java 小三，C# 碧池！PHP 是世界上最好的语言！ ) 学长，我们这个专业要怎么赚大钱？ ( ?!! ヽ(`Д´)ﾉ (╯°口°)╯(┴—┴ 我特喵的要是知道那我还会在这里？！ ) 。。。 缓一口。 （TL;DR 总结在文末，下文主要是各种原因分析，懒得看分析的小伙伴可以直接跳去看总结） 上面说的只是一小部分，我们平时遇到的基本上都是这种，不回答又不好，想回答也不知道怎么回答，于是生活就处处充满了无奈。 首先，大家积极提问请教肯定是件好事，这种情况下提问的人肯定都是想寻求帮助，获取他人的帮助，但是考虑到这种情况的结果，这种提问方式并不能达到让别人帮忙的目的。本篇文章就是为了解决这种情况。 我们的目的是获得别人的帮助，那么从目的反推，别人需要有什么条件才能够帮住到你？ 有技术能力 有方便的时间 明白你说的意思 愿意帮你 这四个是基本条件，同时达成，别人也不一定会帮你，但是任缺一个，别人肯定帮不到你。 有技术能力这点，在于平时你对那个人的观察和评价，还有你对技术难度的正确认知；而对技术难度的认知，又得来自于你对技术本身了解的多少。。。MD 好绕啊，不说了。 有时间这点也没什么好说的，人家本身正在忙没空的情况下，你总不应该强求人家非要先做你的事吧。 剩下的两点也就是关键了，如何让别人明白你的意思 与 如何让别人愿意帮你。 先说较为简单点的后一个。 为什么有人愿意帮你？ 某某同学： 当然是出于好心啦。 没错，是出于好心。除非是和你在一条船上，不帮则死的那种合作，否则 没人有义务帮你，只是出于好心的善意，就算是朋友，也只是可能为了相互增加人情以后好办事，并不代表朋友就有义务帮你做事帮你解决问题。 所以，不要把别人的帮助当作理所当然。 这里说的包括两种人，大爷和你大爷。前一种人请人帮忙就跟发号施令一样随意指使；后一种人是一旦别人稍微有点没照顾到，就会满脸怨愤的“你明明会的，你凭什么不做”的表情（自行脑补，我是见得多了）。 这样随意践踏别人的善意的行为，只会让他人不再对你露出善意。 大部分很简单的小问题都是可以直接搜索到解决办法的，这样的问题就不要再麻烦别人了！ 这里就不讨论“为何要感谢别人的帮助”这种废话了（虽然确实有人不懂这个），总之，这里的结论是： 放低你的姿态，感恩别人的帮助，不要让人寒了心。 顺便说一句，放低姿态，不等于就把别人捧到天上去，不等于就把自己摆在乞讨者的位置。 经常有人在 QQ 群啊、微信群啊、各种论坛等公共社区到处乱吼，“啊，救命啊，我的代码 xxxx ”，“跪求 xxxx 办法”，“有没有 大佬 / 大牛 / 大神 能帮我做 xxxx”。 尊严是自己争取换来的，不是跪着求别人给的。社区本身是一个对等的地方，大家都是用对等的身份在交谈，没有说别人的身份就一定比你尊贵，你也没有必要把自己看得多么低贱。 “大牛”、“大神”一类的称呼也是完全不合适的，假如群里有人知道这个问题并且他回答了，那岂不是他在公开场合承认自己是某某大牛啦，然后呢？等着被撕逼？你当这是网红训练群啊！ 并且这类交流的建立靠的就是比较对等的身份，假如你真的就很低贱，对方真的就有那么高贵牛逼，那你本身也失去了和对方交流的资格，因为身份的差异悬殊太大，对话完全达不到一个层级上。 就像硬件层的东西不能拿到软件层上，链路层的东西不能直接接到应用层上。一切应该是以相对对等，没有巨大信息跨度为基础。 既然上面说了大家帮忙靠的是善意，那么什么样的人更容易获得别人的善意呢？是平时每天都在浪、遇到问题就知道找人要的伸手党；还是时刻都刻苦努力、却没找到要点而无法解决问题的人呢？ 很明显是后者，我们都拒绝伸手党，都喜欢刻苦努力的人。因此，当你提问时不小心说出自己经过的努力后，会有更多的好心人来帮助你。 我们想看到的，也是你到底有多想解决这个问题，我们想看到的，是你为这个问题自己努力过思考过。看到问问题的人这么努力，我们才会想，这样我如果帮助了你，我会觉得自己花时间帮忙是值得的（其实我觉得本质是牵涉到相互贡献与潜在贡献的问题，有自我努力，只寻求他人指点并希望自己亲自完成问题的人，比起直接伸手要他人代替自身做完事情的人，更容易获得别人愿意帮助的心情）。所以，这里的结论是： 附上你的努力，展现你的思考。 现在来说说上文里剩下的另一个关键词。 别人为什么不明白你的意思？ 某某同学： 当然是你说的不够清晰啦~ 这时候我们通常就简单的归结为表述不够清晰、你说的我不听不懂，那么，具体的原因呢？ 对话不在一个频道。你说东，他说西，自然无法有效交流。 内容情况复杂，简单几句话无法描述清楚，容易让人产生误解。 说话逻辑混乱，不易于理解。 简单归纳了下原因，那么现在再针对这些原因，想些解决的办法~ 要保证大家在同一个频道上，首先是要有定义确定这个频道，对我们来说也就是先要 描述清问题所处的完整背景环境、具体场景，详细的列举问题发生时运行的环境（配置、系统、硬件等），如果环境描述不完整，也可能就会漏掉了某些关键的引发点；提供可复现问题的步骤，以便别人可以同步你的场景直接调试问题寻找解决办法。 如果是觉得自己语言能力不强，表达能力十分有限，找不到什么好的形容词，那么就应该避开自己的劣势，尽量少用一些形容词，多去描述客观事实，应该 按时间顺序描述你操作的过程、采取的措施、反应的现象，说客观的东西，而不是主观的东西。 提供的信息必须精准有效，即使内容情况再复杂，也应该减小到最小出错环境，或者尝试分解问题，很多大问题都能分解为数个小问题。相对于大篇幅的问题，大部分人更愿意回答看起来小巧问题，因为这给人不会占用她们太多时间的感觉。 如果你问的是代码的话，顺便说一句： Talk is cheap. Show me the code. 既然问程序，那就应该 把代码附上。喂，你把代码粘到 QQ 群里干嘛！附上代码的目的是方便别人阅读帮你寻找问题、方便别人调试代码帮你寻找方法，所以不要再干直接把代码粘到 QQ 里和粘到论坛回复框里（指直接回复一串代码而不通过论坛提供的代码框）的蠢事了！ 所以我们给别人看的代码必须有以下几点要求： 方便阅读 （排版缩进美观，行号正确，关键字有高亮。） 方便运行 （难道我还要在自己电脑上给你配个环境？） 方便修改 （给你找问题的，不能修改那你告诉我怎么调试？） 前端代码很方便，codepen | jsbin | JSFiddle 等 在线代码平台 都是很好的展示地方。 对于不能在线运行的代码，简单的，可以通过 GitHub 来放出工程，复杂的，直接放出能跑的 Docker Image。 不要直接发文件! 为了理清说话逻辑，我们在提问之前应该先 整理好自己的思路，通过合理的逻辑顺序展开问题的发展；既然是要让别人听懂，那么说话的时候就该站在对方的角度思考，想想不了解情况时，如果我听到别人这样讲，能听懂吗？如果不能，那么还差哪里没有表述清楚？经过这样说服自己能够听懂后，再把刚才的话阐述给对方，效果会好很多，至少不再是一种折磨。 现在再来谈谈怎样理清自己的思路。 我的办法是目的驱动逻辑，就是根据目的反过来思考怎么讲。这里提供一个我的思考模板： 想要达成什么目的或者效果？ 一步步的操作步骤过程是怎样的？ 遇到了什么困难或者产生了什么问题？ 期望获取什么样的帮助？ 根据上面这些提示要思考问题，通常就能将问题讲清楚了。 在客观事实情况描述清楚之后，可以 附上自己的猜测，并且我们也更鼓励提问者提问时附上合理的自己的猜想，因为这也能表明你有自己的思考而不是单纯的伸手党（参见上文前一段落）。 比如，不要问“为什么会 xxx？”，而是问“xxx 的原因是不是因为 xxxx？”； 不要问 “这个是什么？”，而是问“这个是用来 xxx 的吗？”； 不要问“井盖为什么是圆的？”，而是问“圆型的井盖比起方形的是不是有哪些好处？”； 注意，这些猜想得是合理推测的，不要天马行空的乱说，那样只会让别人觉得你是在说着好玩而不是在认真提问。 最后来总结下~ 提问的正确姿势 首先 思考分析问题，再搜索方案尝试自我解决，很多小问题到这里就够了。实在不能解决再去寻求指点。 找到合适的地点和对象 有技术 有时间 姿态对等 清晰准确的表述问题背景 大环境 （配置、系统、硬件等） 运行环境 （语言、库、版本） 描述需要达到的目的和效果 客观，不要加自我感情 详细、准确、有逻辑 说明自身操作的过程 操作步骤 附上代码 - 在线代码平台 项目工程 - GitHub 可运行环境 - Docker 表明所遇到的困难和问题 客观表达，不要加自我感情 任未解决的问题 对问题的猜测 展示你的努力 采取过的措施 付出的行动 阐述期望获取的帮助和指点 注意是指点，不要想着别人直接帮你完成任务 简单表达谢意 礼貌将会增加你得到有用答案的机会 简单的感谢就好，别人的帮助是出于善意而不是为了你的感谢 做好笔记 你可能还会遇到 帮助他人 传达善意，回馈帮助过你的社区 【参考资料】 其实这几篇文章我在开头就想推介给大家，但是我知道太长了你们肯定懒得看~ 推介以下文章从上到下依次阅读。 代码江湖救急（上） 代码江湖救急（下） 如何向开源社区提问题 提问的智慧","tags":[{"name":"学习姿势","slug":"学习姿势","permalink":"https://legacy-blog.zthxxx.me/tags/学习姿势/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"学习姿势","slug":"编程开发/学习姿势","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/学习姿势/"}]},{"title":"Hexo 增加可嵌入页面作博文的 layout","date":"2016-11-04T17:18:05.000Z","path":"posts/Hexo-Add-Layout-for-Embed-Page/","text":"最近有个需求，想要挂载一个已有的页面到 hexo 博客，比如打开一篇博客，里面是显示的挂的淘宝的主页。 主要是最近要做一些 H5 页面，想找个空间挂载，又暂时不想另外找云服务器做后台，于是就想在我这个已有的博客嵌入这些 H5 页面来显示，每个页面通过一篇博文作载体，博文就是一个 iframe，用来显示每个 H5 页面。 于是做了一个 embed 的 layout 专门作为嵌入页面的布局，现已添加到我自己修改的 icarus 主题中。 使用方法 配置主题为我修改的 icarus 后，embed 布局已经在主题里了。 使用 embed layout 前先确保已在主站配置文件中打开资源文件夹选项： 12# /_config.ymlpost_asset_folder: true 然后在主站配置文件中添加一些后面需要用到的忽略参数，用来忽略对所有要嵌入页面的渲染： 123# /_config.ymlskip_render: - '_posts/*/embed_page/**' 在博客更目录下的 scaffolds/ 目录下，新建一个模板文件 embed.md： 12345678# /scaffolds/embed.md---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;layout: embeddescription: iframe_url: --- 准备好要嵌入的页面，然后新建一篇博文，注意使用 embed 的模板： 1hexo new embed \"HTML 页面嵌入测试\" 建立博文后，会在 /source/_posts 文件夹中多一个 md 文件 HTML-页面嵌入测试.md、一个对应名字的文件夹 /source/_posts/HTML-页面嵌入测试，这个文件夹就是资源文件夹。 在资源文件夹（本文例子就是 HTML-页面嵌入测试）中新建一个 embed_page 文件夹（名字是我固定的，不能修改），把要嵌入页面的 html 文件及所以相关资源文件都放在这个 embed_page 文件夹下，把入口 html 文件名字修改为 index.html。 到这里其实已经完成了所有步骤了，打开 hexo 服务器就可以在本地预览了： 12hexo s -g# http://localhost:4000/ 打开浏览器访问 hexo 本地页面，你会看到在主页看到新建了一篇博文，标题是 “HTML 页面嵌入测试”，没有内容，点进博文查看，就没有左边的博主信息和右边的侧边栏，只保留了博客的大框架，留了顶部的导航栏，下边整块区域都是放嵌入的页面。由于用的是 iframe 标签，所以两个页面样式等，互不影响。 下面给两个我刚刚操作的截图示例（点击可查看大图）： 在用 embed 模板新建的博文 MD 文件中，文件内容一般为空（就算有内容也没用），front-matter 中有两个可选键值对可以配置：description , iframe_url description 本是对文章的描述，用以给搜索引擎看的，这里用作对摘要的代替而显示到主页上，这个键会被做 json 读取，因此描述键值如果是字符串则需要用引号括起来。 iframe_url 是配置博文中嵌入的 iframe 标签的地址，因此博文中嵌入的页面也支持配置为网上的页面，此项为空时默认使用相对与博文的 './embed_page/' 地址，因此才有本文开头讲的那些配置。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://legacy-blog.zthxxx.me/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://legacy-blog.zthxxx.me/tags/博客/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"服务器","slug":"编程开发/服务器","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/"},{"name":"Hexo","slug":"编程开发/服务器/Hexo","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/Hexo/"}]},{"title":"H5 canvas 3D 贪吃蛇小游戏","date":"2016-11-04T13:38:28.000Z","path":"posts/H5-3D-Snake-Game/","text":"","tags":[{"name":"H5","slug":"H5","permalink":"https://legacy-blog.zthxxx.me/tags/H5/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://legacy-blog.zthxxx.me/tags/JavaScript/"}],"categories":[{"name":"程序语言","slug":"程序语言","permalink":"https://legacy-blog.zthxxx.me/categories/程序语言/"},{"name":"JavaScript","slug":"程序语言/JavaScript","permalink":"https://legacy-blog.zthxxx.me/categories/程序语言/JavaScript/"}]},{"title":"Hexo 自动给博文添加 ReadMore","date":"2016-11-03T13:02:11.000Z","path":"posts/Hexo-Automatic-Add-ReadMore/","text":"最近写了几篇博文，放到博客时总是要自己添加一个 &lt;!--more--&gt; 的标记才会在主页显示摘要，否则就整个一篇不管多长都直接给你放在主页，想看下面的几篇博文就要滑滑滑，滑半天才能看到后面几篇博文，既不符合设计原则，也不美观不方便，所以 真的很不爽！ 而且在文中插入一个 &lt;!--more--&gt; 的标记也污染了本来干净的文章，作为一个强迫症，对这个简直不能忍！ 按照逻辑来说，我们所关注的就是写文章，而摘要应该是根据文章内容通过 tf-idf 等一系列摘要算法生成的，再不济也应该是直接截取文章开头一段文字作为摘要嘛，总之是应该自动生成的，而且不应该修改 MD 源文件。 这里我们暂且不说算法什么的，先从低级一点的截取摘要的实现入手，（至于摘要算法生成，可以先看 这里） 根据需求，我们去 google 一下，发现有两篇相关文章可以先阅读一下： Hexo-设置阅读全文 - violinlin Hexo自动添加ReadMore标记 - twiceYuan 这两篇文章讲的都很简单，但是因为实际情况不同，我还是用不了。比如第一篇中说在配置文件中配置就可以，然而人家用的 Next 的主题，而我用的 icarus 并不支持；并且我也因此去下了 Next 的主题看了它摘要部分的代码，实现方式也很粗暴直接，效果并不是很好。 由于主题原生不支持，因此我们只能打算跟着第二篇的思路直接改主题代码了。 第二篇的实现办法和 Next 的实现具体办法都一样，都是通过 post.content.substring(start, end) 方法截取文章开头的文字，只是 Next 粗暴的根据字数截取，而第二篇文章是固定找到第二行结尾来截取。 就我个人而言，以行的方式截取比以字数的方式截取的结果，对摘要完整性要友好的多。 总结一下以上两者的文章，再整理下我们的需求，最后我们得到几点初步的要求： 能在主题配置文件中配置是否开启自动摘要 摘要以行为单位自动从开头截取 能配置固定截取的行数 根据这几项需求，我们先来一步步实现。 首先是找到要修改的代码的位置，因为我们这里主要是对文章显示时的修改，相关代码肯定是在有关文章内容显示的文件内，对 hexo 来说，通常是 article.ejs post.ejs 等类似名字的文件，他们的特点就是都会在主页显示文章和单独访问博文时用到。 我用的是 icarus 的主题，这里就是 /themes/icaurs/layout/common/article.ejs 这个文件。 如果对 hexo 与其主题结构不了解的，可以先看这篇讲解： Hexo -（三）高级进阶 - 图灵社区 打开 article.ejs，找到与摘要相关的代码： 12345678910111213141516&lt;div class=\"article-entry\" itemprop=\"articleBody\"&gt;&lt;% if (index &amp;&amp; post.excerpt) &#123; %&gt; &lt;p&gt;&lt;%- post.excerpt %&gt;&lt;/p&gt; &lt;p class=\"article-more-link\"&gt; &lt;a href=\"&lt;%- url_for(post.path) %&gt;#more\"&gt;&lt;%= __('article.more') %&gt;&lt;/a&gt; &lt;/p&gt;&lt;% &#125; else &#123; %&gt; &lt;% if (!index &amp;&amp; post.toc) &#123; %&gt; &lt;div id=\"toc\" class=\"toc-article\"&gt; &lt;strong class=\"toc-title\"&gt;&lt;%= __('article.catalogue') %&gt;&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;% &#125; %&gt; &lt;%- post.content %&gt;&lt;% &#125; %&gt;&lt;/div&gt; Hexo 采用 Nodejs 开发，icarus 主题用的是 EJS 模板，对这两个不熟的请自戳前面链接教程。 这里简单讲一下各变量含义，这各文件是在每篇文章生成时被调用的， index 是指现在是否在首页的标志 post 指这篇文章 post.excerpt 指文章原始摘要内容，既 &lt;!--more--&gt;之前的内容。 url_for() 返回一个 root 路径的 url，不带域名 post.path 指文章的网址，不含 root 目录 post.toc 指文章目录显示是否开了 toc() 解析文本，生成目录，既 h1-h6 的列表。 post.content 指文章全部内容 现在再看，article.ejs 里代码的逻辑就很清除了，在遍历文章的时候 先判断当前页面是否在首页，如果在首页并且这篇文档有摘要，那就只显示摘要并显示一个 ReadMore；否则 就显示全文（其中有一个“判断不在首页并且文章配置了开启目录就显示目录”与我们现在讨论的 readmore 无关所以暂且不管）。 按照我们的思路，应该就是在上面“否则”后面加上自动截取前 n 行作为摘要并显示 ReadMore。 一步步来，首先我们需要一个可以配置的开关，用来配置是否启用自动截取生成摘要的功能，还需要一个可以配置的变量，用来配置固定截取几行。 文章显示是主题干的事，这两个配置也是主题相关的，因此我们打开 主题配置文件，添加几个键值对并保存： 123456# Excerpt ## Auto creat excerpt with not &lt;!--more--&gt;## Enable will truncate auto_excerpt.lines rows in post head to replace excerpt.auto_excerpt: enable: true lines: 5 回到 article.ejs 里，梳理一下我们的思路，整理一下一共有哪些显示摘要，哪些不显示的情况： 不显示 ReadMore 的情况 不在首页 在首页，无摘要，关闭自动截取 在首页，无摘要，使能自动截取，文章没有足够的长度 显示 ReadMore 的情况 在首页，有摘要 在首页，无摘要，使能自动截取，文章足够长 将以上情况整理成判断逻辑，再把目录显示加上，列出一个伪代码： 1234567891011121314151617是否显示全文 = trueif 在首页: if 有摘要: 是否显示全文 = false 显示摘要 else if 主题.自动截取.使能: 截取前 n 行作为摘要 if 文章长度足够: 是否显示全文 = false 显示截取的结果else: if 文章配置显示目录: 显示目录if 是否显示全文: 显示全文else: 显示 ReadMore 这样来看逻辑很清晰了吧。 然后就是具体实现过程中我遇到的两个问题： ReadMore 总是可能被当成文章文字的一部分而被改变样式 原因是 icarus 原本就是把 ReadMore 用 p 标签放在文章中间的，如果 ReadMore 刚好实在一个列表间或者一块代码间，那显示就会很奇怪了。我改成了把整个摘要或者说文章放在一个 div 中，再把 Readmore 放在后面的另一块 div 中，这样 ReadMore 就与内容无关了。 如何读取行数 前面提到的两个自动截取摘要的文章，一篇 NexT 是自动截取字数，另一篇是固定截取两行， 而我想的办法是通过多次调用 string.indexOf(str, start_position) 方法，每次改变起始位置来获取下一次的位置，有一次获取不到位置就说明文章还没有那么多行的长度。 然后再用 string.substring(start, end) 方法，截取到获取的位置。 12345678&lt;% var br_position = 0 %&gt;&lt;% for (var br_count = 0; br_count &lt; theme.auto_excerpt.lines; br_count++) &#123; %&gt; &lt;% br_position = post.content.indexOf('\\n',br_position + 1) %&gt; &lt;% if(br_position &lt; 0) &#123; break &#125; %&gt;&lt;% &#125; %&gt;&lt;% if(br_position &gt; 0) &#123; %&gt; &lt;p&gt;&lt;%- post.content.substring(0, br_position + 1) %&gt;&lt;p&gt;&lt;% &#125; %&gt; 现在开始按照伪代码的逻辑编写 ejs 了，最后的工作就是把原来 article.ejs 的摘要相关代码（在本文开头提到的）全部替换成我们写的自动截取摘要的代码： 12345678910111213141516171819202122232425262728293031323334&lt;div class=\"article-entry\" itemprop=\"articleBody\"&gt;&lt;% var show_all_content = true %&gt;&lt;% if (index) &#123; %&gt; &lt;% if (post.excerpt) &#123; %&gt; &lt;% show_all_content = false %&gt; &lt;p&gt;&lt;%- post.excerpt %&gt;&lt;/p&gt; &lt;% &#125; else if (theme.auto_excerpt.enable) &#123; %&gt; &lt;% var br_position = 0 %&gt; &lt;% for (var br_count = 0; br_count &lt; theme.auto_excerpt.lines; br_count++) &#123; %&gt; &lt;% br_position = post.content.indexOf('\\n',br_position + 1) %&gt; &lt;% if(br_position &lt; 0) &#123; break &#125; %&gt; &lt;% &#125; %&gt; &lt;% if(br_position &gt; 0) &#123; %&gt; &lt;% show_all_content = false %&gt; &lt;p&gt;&lt;%- post.content.substring(0, br_position + 1) %&gt;&lt;p&gt; &lt;% &#125; %&gt; &lt;% &#125; %&gt;&lt;% &#125; else &#123; %&gt; &lt;% if (post.toc) &#123; %&gt; &lt;div id=\"toc\" class=\"toc-article\"&gt; &lt;strong class=\"toc-title\"&gt;&lt;%= __('article.catalogue') %&gt;&lt;/strong&gt; &lt;%- toc(post.content) %&gt; &lt;/div&gt; &lt;% &#125; %&gt;&lt;% &#125; %&gt;&lt;% if (show_all_content) &#123; %&gt; &lt;%- post.content %&gt; &lt;/div&gt;&lt;% &#125; else &#123; %&gt; &lt;/div&gt; &lt;div class=\"article-more-link\"&gt; &lt;a href=\"&lt;%- url_for(post.path) %&gt;#more\"&gt;&lt;%= __('article.more') %&gt;&lt;/a&gt; &lt;/div&gt;&lt;% &#125; %&gt; 现在你可以把原来文章中的 &lt;!--more--&gt; 删了，以后也不用再写了！ 最后放上我改好的 icarus 的 article.ejs 文件。 好了，强迫症结束！ ( •̀ ω •́ )y","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://legacy-blog.zthxxx.me/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://legacy-blog.zthxxx.me/tags/博客/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"服务器","slug":"编程开发/服务器","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/"},{"name":"Hexo","slug":"编程开发/服务器/Hexo","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/Hexo/"}]},{"title":"Hexo markdown 渲染测试","date":"2016-11-03T08:31:08.000Z","path":"posts/Hexo-Markdown-Render-Test/","text":"Hexo 使用 marked 作为默认的 markdown 渲染器，由于我所使用的主题被我自己修改过一些样式，因此需要测试一下对 markdown 各个标记文本的渲染是否出了偏差。 下面使用 Cmd Markdown 和 马克飞象 两者官方的示例文档作为测试，依次来查看自定义的 css 样式对博文内容的渲染有哪些问题。 已知问题： 不支持 [TOC]（Hexo 对文章 yaml 中 toc 项可开启支持目录） 不支持复选框（待办事项） - [ x ]（已由前端 Hack 支持） 不支持 LaTex 公式（已由 hexo-renderer-mathjax 插件支持） 不支持流程图、时序图、甘特图等 ！以下为测试内容！ 欢迎使用 Cmd Markdown 编辑阅读器 我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 Markdown Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 [ ] 支持以 PDF 格式导出文稿 [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 [x] 新增 Todo 列表功能 [x] 修复 LaTex 公式渲染问题 [x] 新增 LaTex 公式编号功能 2. 书写一个质能守恒公式[1] $$E=mc^2$$ 3. 高亮一段代码[2] 1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图 12345678st=&gt;start: Startop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 5. 高效绘制 序列图 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 6. 高效绘制 甘特图 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 8. 更详细语法说明 想要查看更详细的语法说明，可以参考我们准备的 Cmd Markdown 简明语法手册，进阶用户可以参考 Cmd Markdown 高阶语法手册 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown 您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览 我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏 也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式 完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿 为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式 在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏 为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式 在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索 在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享 在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 欢迎使用马克飞象 @(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 [TOC] Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[3]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。 代码块 12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' LaTeX 公式 可以创建行内公式，例如 $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。或者块级公式： $$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图 12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 以及时序图: 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图语法以及时序图语法。 复选框 使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： [x] 已完成事项 [ ] 待办事项1 [ ] 待办事项2 注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。 印象笔记相关 笔记本和标签 马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。 笔记标题 马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。 快捷编辑 保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。 **注意：**目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。 数据同步 马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。 隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。 离线存储 马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。 **注意：**虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。 编辑器相关 设置 右侧系统菜单（快捷键Ctrl + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。 快捷键 帮助 Ctrl + / 同步文档 Ctrl + S 创建文档 Ctrl + Alt + N 最大化编辑器 Ctrl + Enter 预览文档 Ctrl + Alt + Enter 文档管理 Ctrl + O 系统菜单 Ctrl + M 加粗 Ctrl + B 插入图片 Ctrl + G 插入链接 Ctrl + L 提升标题 Ctrl + H 关于收费 马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 感谢阅读这份帮助文档。 支持 LaTeX 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 MathJax 参考更多使用方法。 ↩ 代码高亮功能支持包括 Java, Python, JavaScript 在内的，四十一种主流编程语言。 ↩ 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。 ↩","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://legacy-blog.zthxxx.me/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"https://legacy-blog.zthxxx.me/tags/Markdown/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"服务器","slug":"编程开发/服务器","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/"},{"name":"Hexo","slug":"编程开发/服务器/Hexo","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/Hexo/"}]},{"title":"WNCG 软件组第三次培训大纲","date":"2016-11-02T14:50:43.000Z","path":"posts/WNCG-Software-Group-Third-Training-Syllabus/","text":"这次大纲是暂且是作为讲解时的备注，本周作为预习的任务大概只有熟悉 GIt 和 Worktile 的使用，剩下的内容因为没有具体资料，所以到培训时先听培训讲的，再去针对具体方面查阅资料。 团队管理 团队协作软件 Worktile GitLab 时间管理 需要统计团队成员一周内的 日程安排，知道成员什么时候都有空或者有事； 任务管理 如何将分配的任务落实绑定到某个成员身上，以方便书面化公开化成员责任； 如何跟进 监督任务进度，落实到督促某个进度落后的成员； 消息通知 时候具有多种通知方式，如 短信、邮箱、APP、桌面、Web； 通知是否方便和及时，如安排任务时自动通知、临近截止时间自动通知、定时通知，通知延迟多少，是否会丢失通知； 文档规范 格式 固定的 封面、标题、开头，固定的某种书写形式； 文档风格规范 书面化语气 内容 对于项目什么是有用信息，什么是废话； 如何向别人表达 自己想干什么、遇到什么困难、需要什么帮助； 什么是清晰的表述，语言逻辑正确、站在听者的立场、要让听者能听明白； 什么内容敏感、什么内容该写、什么内容不该写； 专业词汇； 编程入门学习路线 必要知识 IDE 语法 功能 入门练手流程 了解语言能干什么，自己的水平能做什么。 自己定一个功能，通过了解的“语言能干什么”分析大概实现思路 按照思路，通过查阅语法和 API，实现代码 重复以上 2、3 两点，直至熟练语言操作 必要素养 语法进阶 设计模式 数据结构 。。。","tags":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/tags/WNCG/"},{"name":"学习规划","slug":"学习规划","permalink":"https://legacy-blog.zthxxx.me/tags/学习规划/"}],"categories":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/"},{"name":"学习规划","slug":"WNCG/学习规划","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/学习规划/"}]},{"title":"Git subtree 管理子项目包使用小结","date":"2016-11-02T09:59:24.000Z","path":"posts/Git-subtree-Manage-Subpackages-Usage-Summary/","text":"场景描述 我们在用 git 管理的一个工程中，或多或少会在我们自己的项目中 引入一些别人写的包或者模块。 通常我们是直接下载这个包的文件放在我们的工程文件夹中直接使用的。 假如我们需要使用引入某个正在开发的模块的源代码，并希望能获取这个模块在快速迭代中更新的各个版本，这时一般就是 在项目工程中导入这个模块的 git 仓库到工程的子目录中。 现在就牵涉到 git 如何管理一个项目仓库中还有其他子模块项目 git 仓库的情况。 这方面 git 提供的工具是 submodule 和 subtree， 本篇讲的是使用 subtree 管理子项目的一些使用小结。虽然git 官方推荐是用 subtree 不用 submodule，但是我觉得这两者是各有利弊，各有各的使用场合，在不同的需求条件下都可能切换使用到。 推荐阅读 这里先给出我当时学习的几篇相关的博文： 使用GIT SUBTREE集成项目到子目录 - XA 用 Git Subtree 在多个 Git 项目间双向同步子项目 - 敲代码的小德子 如何科学的管理多个子项目 - 阿驴 使用 git-subtree 以子目录形式引入外部项目 - William Sang 实际问题 最近使用 hexo 搭建了我的个人博客，其中 hexo 工程是 clone 的 hexo github 仓库的，主题是 pull 的 icarus 仓库 的 修改版。所以主题就是一个放在 hexo 工程目录里的 git 子项目。由于在搭建博客的过程中，我需要按照我想要的样式不断的修改主题，所以要求主题的子项目要能快速更新仓库，方便推送和拉取远程仓库，要能将主项目的版本与子项目版本对应，如 clone 主项目，应能同时自动 clone 子项目下来，如 reset 主项目，要能自动同时 reset 子项目到主项目版本所对应的子项目版本。 上面说的有点饶，总结来说就四点： 子项目的目录应该放子项目 git 仓库（而不该复制粘贴代码） 能拉取远程子项目的更新，并能推送本地子项目的修改 主项目提交时能记录当时所用子项目的版本 主项目被 clone 或 pull 时，能自动包含 clone 或 pull 子项目 本质来说以上通过 subtree 和 submodule 都能实现要求，只是实现的方式不一样，这里我们还是只说 subtree。 Subtree 的使用 subtree 涉及的命令就只有添加项目地址、push、pull，并不能查看子项目 branch commit log diff 等等。 subtree 本质就是把子项目目录作为一个普通的文件目录，对于父级的主项目来说是完全透明的，真的就是个普通目录，原来是怎么操作现在依旧是那么操作，就像操作主项目中其他文件一样的 add commit，subtree 的核心思想与能做的就只有同步项目文件。 这里我们通过本博客搭建时使用的 subtree 来举例讲解操作过程。 我们有一个 hexo blog 的目录，放的是 hexo 工程文件，作为主项目目录，当然，这是 git 管理的仓库；blog 下有一个 themes 的文件夹，准备用来放主题包，现在是空的。 12blog/blog/themes/ 现在我们的工作目录是在 blog 中，我们需要讲主题文件夹 icarus 下载到博客目录的 themes 子文件夹中，像这样： 1blog/themes/icarus/ 我们现在是没有 icarus 这个目录的，后面的步骤就是把这个子项目包给弄出来。 添加子项目远程库 123cd blog# git remote add --fetch &lt;远程库别名&gt; &lt;远程库仓库地址&gt;git remote add -f icarus git@github.com:zthxxx/hexo-theme-icarus.git 添加远程库是为了后面要用子项目地址的时候方便使用远程库别名取代。 拉取子项目到本地文件夹 12# git subtree add --prefix=&lt;本地子项目目录&gt; &lt;远程库仓库地址 | 远程库别名&gt; &lt;分支&gt; --squashgit subtree add --prefix=themes/icarus icarus master --squash 这句命令会拉取子项目 icarus 的仓库并放到 themes/icaurs 下，同时相当于将子项目全部提交到主项目中了，主项目会多一个合并子项目的 commit 记录； 如果不加 --squash 参数，主项目会合并子项目本身所有的 commit 历史记录，加上 --squash 参数是把子项目的记录合成一次 commit 提交到主项目，这样主项目只是合并一次 commit 记录。 像以往一样修改文件提交主项目 因为有按照需要修改主题样式，所以会有修改到主题文件，也会修改到主项目的文件，但是都没区别，在主项目目录下查看状态和提交修改都和原来一样，不管是被修改的主题文件还是项目文件都一样的显示，对主项目来说都是一样的。 123456git status# modified: blog_file# modified: themes/icarus/sub_project_filegit add --allgit commit -m \"Modifiy main and sub file\"git push origin master 上面是主项目添加修改文件并提交推送的操作，themes/icarus/ 是子项目的地址，但是可以看到，子项目文件有修改不会对主项目的操作过程有任何影响，这就是我们说子项目对主项目透明的原因。 Subtree 提交到子项目 第 3 点的时候已经把修改提交到了主项目的远程库中了，这时再在主项目目录下 git status 就能看到 nothing to commit, working tree clean 的提示； 但是第 3 点中同样修该了子项目 icaurs 的文件，我也同样希望能把修改提交到子项目远程库中，这时候就该 subtree 上场了，在主项目目录下： 12# git subtree push --prefix=&lt;本地子项目目录&gt; &lt;远程库仓库地址 | 远程库别名&gt; &lt;分支&gt; --squashgit subtree push --prefix=themes/icarus icarus master --squash 这时 git 会遍历主项目的 commit 所有记录，从中找出有对子项目修改的相关 commit，并提取各 commit 更新的内容提交到子项目远程库中；加 --squash 参数时，如果主项目新增的修改子项目的 commit 有多个时会合并为一个 commit 提交。 子项目远程库有更新 假如现在子项目的远程库有大量更新的文件，我们想把这些更新拉取合并到本地的子项目目录中，ok，这时又是 subtree 上场了。 12# git subtree pull --prefix=&lt;本地子项目目录&gt; &lt;远程库仓库地址 | 远程库别名&gt; &lt;分支&gt; --squashgit subtree pull --prefix=themes/icarus icarus master --squash 子项目的更新与推送命令都是一样的用法，要注意的是，子项目更新后，在主项目中查看 git status 就会看到一堆子项目的文件显示 modified，没关系，主项目中再使用 add commit push 提交推送一遍。 子项目切出起点 当主项目的 commit 提交太多后，再推送子项目到远程库的时候，subtree 每次都要遍历很多 commit，浪费的时间相当多，很是不爽，当然要找解决办法了； subtree 可以将子项目当前版本切出为一个分支，作为后面的 push 时遍历的新起点，这样以后每次遍历都只从上次切出的分支的起点开始，不会再遍历以前的了，时间就省了很多。 假如现在主项目和子项目都提交好了，工作空间是干净的，这时我们把主题 icarus 的子项目当前版本切出到新分支作为起点： 12git subtree split [--rejoin] --prefix=&lt;本地子项目目录&gt; --branch &lt;主项目中作为放置子项目的分支名&gt;git subtree split [--rejoin] --prefix=themes/icarus --branch icarus 注意：如果 push 时使用了 --squash 参数合并提交，那么 split 时不能使用 --rejoin 参数，反之必须使用。 现在我的主项目里就多了一个叫 icarus 的分支，存放的就是 icarus 这个子项目的内容，这个分支只是作起点储存用的，不用管它不用修改不用推送到远程库。 ​ 现在再有子项目的文件修改后，一样还是用第 3、4 点的操作更新提交和推送远程库， 123456git status# modified: blog_file# modified: themes/icarus/sub_project_filegit add --allgit commit -m \"Modifiy main and sub file\"git subtree push --prefix=themes/icarus icarus master --squash 只是这次子项目推送时，git 不会再去从头遍历主项目，而是直接从切出的位置开始遍历，大大加快了时间。 当现在 commit 又变多了遍历时间又慢了，需要更新推进那个起始点的时候，只需要再在当前版本上再切出一个作起点的分支覆盖原来那个就是，命令和第一次切出分支作起点时一模一样。 1git subtree split --rejoin --prefix=themes/icarus --branch icarus 这样下次推送子项目时开始遍历时的起点也更新了。 subtree 与 submodule 基本比较说明 从实际使用中的一些问题谈起，网上这两者的对比说明已经够多了，我这里列的都不完整，只是遇到的一些。 submodule 的问题大多是说它步骤太多太麻烦，我是不喜欢它在 clone 时不能直接自动带上子项目的包，必须要用递归参数才行。 git clone --recursive &lt;远程库地址&gt; 但是 submodule 可以进去到子项目的仓库单独查看子项目的修改记录，在子项目目录时，就相当与在一个单独的仓库内，对外层主项目完全不可见。 subtree 好在使用方便，一共就两三个命令，参数还是都一样的，使用起来很简单。缺点就是无法直接单独查看子项目的修改记录，因为子项目的修改跟主项目的修改都合并到主项目中了，污染主项目。","tags":[{"name":"Git","slug":"Git","permalink":"https://legacy-blog.zthxxx.me/tags/Git/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"Git","slug":"编程开发/Git","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/Git/"}]},{"title":"使用 Hexo 生成静态博客过程记录","date":"2016-10-25T01:45:35.000Z","path":"posts/Hexo-Build-Static-Blog-Process/","text":"最近刚用 Hexo 和 GitHub 搭好了一个个人博客，现在准备记录下这个过程。这个搭建的过程应该分为两部分，一是学会使用 Hexo 生成静态博客页面，二是申请 GitHub Pages 托管网站，本篇文章是讲的第一步。（下一篇请戳 使用 Travis 自动构建 Hexo 到 GitHub） 此类教程网上有不少，这里也列几个： 用 GitHub + Hexo 建立你的第一个博客 - Crossin HEXO搭建个人博客 - 潘柏信 hexo你的博客 - 不如 先说说我的理解 Hexo (类似) 是一种博客框架，像 WordPress 一样，这个框架里通常包含了 主页、博主信息、博文、分类标签、主题样式，每个都有固定格式。 Hexo 是帮助我们 通过原始素材渲染出带有主题样式的静态页面。（我把根据博文 Markdown 生成出带 CSS HTML 代码 的过程称为渲染） 渲染时最重要的部分是：主题、配置、素材（文章、图片、音视频等），三者确定一个渲染的结果。 由于这类框架的控制，规定素材（主要是文章）具有的格式（比如开头 YAML、正文 Markdown，比如都是博主博文标签这一套），因此当渲染主题都按规则设计解析的时候，各种主题之间就可以 随意更换，因为都符合规则，都能被渲染，不同的地方只需要修改 主题配置 就好。 由上再简单总结下： Hexo 框架制定了一套博文渲染规则 用户根据简单的写博文规则来写自己的文章 主题开发者更具负责的框架渲染规则开发主题样式文件 Hexo 解析文章、配置、主题，渲染出静态页面 把渲染的结果发布到服务器【注意：发布的只有生成的页面，Hexo 工程和配置及原文 MD 都不会上传】 所以，使用 Hexo 的步骤也明确了。 在本地安装 Hexo 框架 本地找一个目录来放博客工程，用 Hexo 初始化项目文件夹 下载喜欢的主题来更换 设置站点配置、主题配置 新建 Hexo 博文 用 Markdown 写博文内容 执行 Hexo 渲染生成静态页面文件 本地开启服务器预览 | 部署到远程服务器 具体操作过程 Hexo 安装 这里有几篇详细的教程，我搭建这个博客时就是按他们讲的一步步来的，现在把他们列出来，再写自己的总结： 文档 | Hexo Hexo 官方文档，一定要看，多看文档，遇到的很多问题其实文档中都有 HEXO搭建个人博客 - 潘柏信 这篇博文讲的很简单，主要时有一些他自己遇到的问题，基本后来我都遇到了 hexo静态博客搭建与配置 - Crazier_qi 安装部分只讲了一小段，因为确实很简单 hexo博客换主题–icarus - Trity icarus 的样式很简洁清爽，但是不失逻辑性，是我喜欢的风格 hexo博客的配置、使用 - Zippera 主要讲的是配置文件 hexo你的博客 - 不如 非常非常详细的教程、说明、剖析，安装使用，由浅入深，非常推荐！ Hexo 是用 Nodejs 写的，所以你首先要安装 Nodejs 和 npm，本文使用 Ubuntu 14.04 的环境 12sudo apt-get install nodejssudo apt-get install npm 接着使用 npm 安装 hexo，再次之前，确保电脑上有 git，因为安装过程中会调用 git。 12sudo npm install -g hexosudo npm install -g hexo-cli npm 的 -g 参数表示全局安装。 这里安了两个，有一个带 cli 的后缀，我也没明白是为什么，反正我是两个都装了才用的。 Hexo 的命令可以先看这里。 建立准备放 hexo 博客目录,并进入到该目录下。 执行 hexo init 初始化当前目录，也可以为 init 指定一个目录，没有指定就是默认当前目录： 12cd blog_dirhexo init hexo 会在当前目录下载一系列资源文件并且安装依赖包，最后形成的目录已经是一个完整的博客工程了，带了默认主题，只是没有博文，可以直接被完整渲染。 现在初始化玩了我们可以执行渲染生成： 12hexo generate # 执行生成hexo g # 生成的缩写 generate 可以缩写成 g，hexo 很有意思，大部分命令都可以缩写为命令首字母。 生成之后可以通过 hexo 自带的服务器本地 localhost:4000 预览查看： 12hexo server # 启动本地服务器hexo s # 缩写 这时候可以访问本地的 4000 端口访问生成的界面。 整个操作看起来就几行代码，确实相当简单，后面的就是配置参数和部署了。 配置 Hexo 的配置文件分两部分，站点配置 和 主题配置。站点配置文件在 hexo 博客根目录下的 _config.yml 文件中，主题配置文件在根目录下的 themes/&lt;主题名&gt; 文件夹下的 _config.yml 中。以下就用站点配置和主题配置做说明。 部署 (配置部分) 部署的过程涉及到 GitHub Pages 的申请等过程，因此会另起一张，这里只先讲部署中需要涉及到的 Hexo 站点配置文件部分。 在站点配置文件中 deploy 标签下，添加对 git 的支持，选择仓库和分支，这里注意的是，hexo 3.0 之后的 deploy: type: 应该是 git 而不是 github，并且需安装 hexo-deployer-git 插件。 12345# hexo _config.ymldeploy: type: git repository: git@github.com:&lt;user_name&gt;/&lt;user_name&gt;.github.io.git branch: master 之后配置好 GitHub Pages 的话，就使用 hexo 部署上去。 12hexo deployhexo d 主站配置 主站配置文件在 hexo 官网文档 上写的很详细，这篇博文 hexo博客的配置、使用 - Zippera 讲配置都有中文注释，参照着配很方便。 主站配置文件主要要配置的是 标题、描述、作者、语言、站点、主题 、写作、部署 等，每人各有不同，根据文档配置就行了。主题配置的名字和放在 themes 文件夹中的主题名字要一样。 主题配置 主题配置文件 一般在各主题开发者的官网或者博客上都有介绍，并且大部分不同的主题需要的配置都相似，我使用的是 icarus 的主题，跟着开发者的说明就好了。主要是 菜单、logo、favicon、链接、插件 等等，主要是要看主题支持什么什么插件，没有的就要自己写了。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://legacy-blog.zthxxx.me/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://legacy-blog.zthxxx.me/tags/博客/"}],"categories":[{"name":"编程开发","slug":"编程开发","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/"},{"name":"服务器","slug":"编程开发/服务器","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/"},{"name":"Hexo","slug":"编程开发/服务器/Hexo","permalink":"https://legacy-blog.zthxxx.me/categories/编程开发/服务器/Hexo/"}]},{"title":"Hello World","date":"2016-10-24T02:24:00.000Z","path":"posts/Hello-World/","text":"zthxxx`s Blog Welcome to this blog, I`m zthxxx, a cat in a college. This is zthxxx`s blogs to record of life. You can follow me from GitHub.","tags":[],"categories":[]},{"title":"WNCG 软件组第二次培训大纲","date":"2016-10-22T16:48:07.000Z","path":"posts/WNCG-Software-Group-Second-Training-Syllabus/","text":"预课程部分 考虑到同学们电脑基础太差，对电脑本身都没什么了解，正式上课之前， 我们这里先以一个需要安装的软件为例，讲解个人电脑使用规范（小技能）普及电脑知识，纠正错误习惯。 本次培训所用软件列表： Git 印象笔记 (Evernote) Xmind Typora Everything 软件安装无非就三步，下载、安装、配置， 以 Xmind 的安装为例 使用 搜索引擎 查找软件 (搜索引擎是互联网的入口，关键词搜索法，整句匹配搜索，不推荐提问式搜索) 打开 百度 (由于大家基础问题，这里不讲翻墙上 Google) (百度的确是很垃圾，但是国内其他更垃圾、更上不了台面) 使用关键词与空格查询 不推荐用提问的语气输入问题 搜索引擎是互联网的入口 要善于搜索引擎 筛选要去查看下载的网站 (网站名称，网站后缀，是否都包含关键字，页面标题意思) 反面例子： Ttpora - 起点软件 XMind 2013 (思维导图软件) 3.5.1 官方免费版 - 新云网络 XMind 3.6.0(思维导图软件)简体中文免费版 - 下载吧 XMind 7 中文版 - ZOL软件下载 选择下载按钮 (区分各种广告按钮) 不要指定默认下载路径 通过下载选项中的文件大小判断是否是广告或流氓软件 通过下载时看到的文件名判断是不是想要的东西 下载软件的存放目录选在电脑的软件安装包目录并分好类别 安装位置 安装时都选择高级选项，选择要安装到哪个盘的程序安装文件夹 (Program Files) 所有软件都不要安装到系统盘 安装目录都用英文目录 所有后缀名显示打开 (后缀名是什么) 所有隐藏文件显示打开 (隐藏文件、系统文件) 文件夹整理 系统盘 | 备份盘 | 软件安装盘 | 影音娱乐盘 | 学习资料和文档盘 | 【如果硬盘没有那么多分区的，可以在分区中多建两个这样的分级文件夹。】 【不过绝大多数这种情况建议直接格式化或清除硬盘重装系统】 系统盘：只装系统，最好不要安装软件到系统盘 备份盘：对系统盘备份，手机备份，安装系统镜像的备份 软件安装盘：装软件时统一装到这个盘的 Program Files 文件夹下，全部使用英文路径 下载的软件放到这个盘下的 软件安装包 文件夹下并分好类别，作为软件安装包的存放地 影音娱乐盘：这个盘下建立 Move、Music、Image 文件夹放置各种音视频文件，Game 文件夹里放非安装的游戏，建立一个 Download 作为下载缓存的地方，使用时整理了再放到软件安装包内 学习资料和文档盘：学习资料包括课程、笔记、各类知识等，文档按照 团队-时间-事务 划分。 整理的思想是：按照文件类别分类，相同类别的文件不要放在两个地方，分类之间不要交叉 快捷键、任务管理器、启动管理、命令提示符、换行符差异 正课部分 博客 个人博客例子： Manjusaka saber酱的抱枕 Git 教程 - 廖雪峰 四大博客站：CSDN、简书、新浪、博客园 例子： Git使用详细教程 - CSDN 如何使用Github - 简书 Git学习教程 - 新浪博客 Git和Github简单教程 - 博客园 Git | GitHub 用实际例子讲解安装、功能作用、使用方法 GitHub 作为 Git 关联和云服务 放一个上面的例子，Git和Github简单教程 - 博客园 这篇操作介绍写的很好 Git 教程 - 廖雪峰 廖雪峰的教程也是经典教材 Markdown 轻量级标记语言 只关注内容，不关注排版，只是对重点对象做标记 (如加粗等)，重在强调逻辑 操作方便，效率更高 Markdown 其实就是用一些简单符号来起到排版作用，因为纯键盘操作，写作时少调用鼠标，效率能提升很多，不必多花时间在排版上 视觉逻辑更强 长段文本用MD标注后，结构更清晰，逻辑也更明显，比如本篇文章 总结就是 排版美观逻辑强，比 Word 简单方便，不知道比记事本高到哪里去了！ Markdown 几个 标题、加粗、列表、链接和图片 的基本语法 Markdown——入门指南 - TeLee 简书这篇中，Markdown 语法的简要规则讲的很易懂 马克飞象 马克飞象用来演示 Markdown 非常直观 Typora 用来写 Markdown 非常舒服，写作排版展示等方面使用非常流畅 实验室培训用的所有文档材料就是用 Typora 写的 Typora 官方下载地址 印象笔记 国内各大笔记软件都各有优缺点，并或多或少都存在一些个人不是很满意的地方，但是相比之下我感觉更适合使用 印象笔记，如果你有好的想法，也可以去尝试一下别的笔记软件。 一般记笔记是先在笔记本上画好列出想到的知识点，用一些简单的箭头关联理清逻辑，作为初稿，然后再整理到印象笔记。印象笔记很好用的，与各种其他的软件配合也相当好。 在第二遍整理的时候，就会不知不觉的加强了理解和记忆。 手写笔记电子化的意义很大，云端保存笔记、电脑平板手机同时同步笔记，既不怕掉，也随时随地可以看； 更重要的是，如果是写的文档，非常方便整理、查看、搜索和分享。 做笔记能直接截图保存、添加附件等，比手写更方便，信息量更大。对想学习的人非常有帮助。 印象笔记本身的入门引导和技巧引导已经做的非常好了，也有很多大神分享了自己的使用技巧，都很实用： 印象笔记改变大学生活的100个技巧 我的印象笔记管理术 - 曹将 如何高效使用和整理印象笔记 - 知乎 Xmind 思维导图通常用来自己整理和总结某一篇文章或者演讲或者课堂的知识体系； 接触到干货，就会迫不及待地把它抽离出框架，画成脑图，有了这层加工，便不会轻易忘记。 本质是多花了一倍的时间去理解，把系统的总体与细节提取了出来。 思维导图和目录列表是一样的，只是思维导图更美观，更直观，更容易看出知识体系下各知识点的关系。 所以思维导图通常也用于发布给别人看，帮助别人整理思路理清逻辑，作为一种教学手段。 这里讲这个是叫大家以后在 印象笔记 记的笔记中也使用下思维导图。 Worktile 团队协作需要管理工具，Worktile 是国内用得比较多的一款这样的管理系统。 我们也是做一下尝试，将这个系统引进来作为你们学习和使用的团队协作工具。 刚开始学习，一步步来，现在我们只需要一个【能安排任务、讨论问题、记录进度、通知提醒】的环境，就能开始尝试初步合作和磨合默契度。 因此虽然 Worktile 功能很强大，但是我们一开始只用得到几个功能： 组建团队 建立项目 建立任务 | 安排任务 | 讨论问题 待办事务清单 | 做完一项就打个勾 评论任务 | 设置提醒 这里先让大家都注册账号，然后我们在这里用两个人的账号给大家演示下。 Worktile 工作台 ​ Worktile 直接 注册 就可以使用啦， Web 端界面友好，也有客户端和移动端， 基本操作都有 视频教程， 用户指南 也简洁明了。 一开始的使用引导也是使用 RPG 式的探索型过程，通过完成 新手任务，一步步掌握使用方法， 总体感觉简单易用。 ​ 我们需要用 Worktile 来安排给大家的下次任务，每周一个 预习任务、一个 总结任务，自己根据自己的学习情况制定合适自己的小任务。 **任务的评论和讨论 **只能简明扼要的说 问题相关内容，讨论的方案、建议、可行性等框架或流程的问题，不应该问具体实现过程中的代码细节等，不能聊天。 QQ 和 微信 的消息太多而过于杂乱，但是 Worktile 现在就只会提醒你 有任务了 和 任务要到期了，相当于是在提醒你到什么时间该做什么了。 以后任务和总结相关的 通知 都用 Worktile 发布了，总结整理的文档、预习的文档和要用的软件也都传到 Worktile 具体任务的文档文件管理中。 也就是说把现在培训的工作从的小组 QQ 群移到 Worktile 中。小组 QQ 群用于提问回答或者闲聊用，而工作方面的事情，任务的安排全都放到 Worktile 上去使用。 大家刚开始不会用没关系，我们现在就是在一个 磨合的过程 里，不会用的就多试下几个按钮，多用下就熟练了。 文档规范 这里常用到的几个规范都只有几个原则，记住原则以后，做表格做文档的时候就自己要想着那几条原则，再去组织语言，边写边想着有没有违背原则，违背了就修改。 这里放一个文档风格规范的 传送门","tags":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/tags/WNCG/"},{"name":"学习规划","slug":"学习规划","permalink":"https://legacy-blog.zthxxx.me/tags/学习规划/"}],"categories":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/"},{"name":"学习规划","slug":"WNCG/学习规划","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/学习规划/"}]},{"title":"WNCG 软件组第一周培训后任务","date":"2016-10-19T18:15:23.000Z","path":"posts/WCNG-First-Week-Schedule-and-Next-Week-Content/","text":"主线任务 学习版本控制工具 Git 和其社区网站 GitHub 的使用 支线任务 了解博客 通过 搜索引擎 (百度)查找博客概念 查几篇博客中的 C 语言各类技术文章 通过 博客 文章教程学习 Git 入门方法 使用 印象笔记 管理 Git 的学习笔记 在写笔记时，通过 Typora 编辑器使用 Markdown 语法书写笔记内容 第二周学习内容概览 这里的学习安排就是第二周上课准备讲的内容，部分需要大家提前找资料看一下。 需要预习的部分内容用以上的 主线 / 支线 任务 的形式表现给大家了，做任务获经验嘛。 下周总体内容： 博客 的生态情况 (概念、使用情况等) Markdown 标记语法 (相当简单、非正式场合下代替 Word) Typora 专用于 Markdown 所见及所得的文本编辑器 (简单易用) 印象笔记 灵感和笔记记录管理工具 (整理笔记、各终端同步) **Xmind ** 思维导图工具 (知识点和思路整理) Worktile 团队协作管理工具 (组建团队、任务管理) 表格 | 邮件 | 文档 写作时的几个规范性原则 (需要写什么不该写什么、排版格式原则、包括了笔记书写建议) 可以看到下周内容基本上是各类工具的使用。 我们讲的几个软件都是在以后学习中，相当有用也是会让大家经常使用的工具。 用这些工具的目的是让大家更好的 学习、记录、总结，并能长期保存学习过程。 第一周培训讲过，我们前期给大家安排的所有，都是在做铺垫，给后面 写好代码 铺垫良好的习惯。 我们会给出一些预习资料，但是更希望大家学会使用搜索引擎，自己找资料，学会自主学习。 下周培训一开始我们会让大家自己来讲各种概念和软件的使用方式，做好准备哟~~ 预习参考资料 (每项内容按推荐顺序排列) 博客 博客的概览还是要靠大家自己去认识，只能说我们给的资料链接大部分都是别人的博客文章。 Git Git 教程 - 廖雪峰的官方网站 猴子也能懂的 GIT 教程 简单使用Git和Github来管理自己的代码和读书笔记 - 卜星星 Markdown Markdown 的编辑器我们推荐 Typora，可以不要看教程中的其他编辑器。 Markdown 入门指南 - Te_Lee 马克飞象 - Markdown 简介 为什么应该用 Markdown 保存自己的文稿 - 不鳥萬如一 Typora Typora - 颠覆写作体验的免费极简 Markdown 编辑器 让 Markdown 写作更简单，免费极简编辑器：Typora - 子不语Rex 安利一下 Typora：极致简洁的 markdown 编辑器 - yieku 印象笔记 印象笔记官网 印象笔记改变大学生活的100个技巧 我的印象笔记管理术 - 曹将 如何高效使用和整理印象笔记 - 知乎 Xmind Xmind 官网 思维导图全攻略 - 曹将 Xmind 新手入门教程 ​","tags":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/tags/WNCG/"},{"name":"学习规划","slug":"学习规划","permalink":"https://legacy-blog.zthxxx.me/tags/学习规划/"}],"categories":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/"},{"name":"学习规划","slug":"WNCG/学习规划","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/学习规划/"}]},{"title":"WNCG 软件组第一次培训大纲","date":"2016-10-19T16:48:07.000Z","path":"posts/WNCG-Software-Group-First-Training-Syllabus/","text":"培训与总结安排 每周有总结，总结上周内容，答疑，安排下周学什么 每周培训讲上周总结时安排的内容，完成周志 培训会给大家讲什么、为什么要强调团队合作 软件工程教学现状与我们想做的尝试 我们的现状：野路子，单打独斗、依靠个人能力编程，缺少文档，缺少合作，别人觉得代码乱，自己也觉得代码乱 软件工程现状：经典瀑布流教学，上课做完作业就完，学完课程没有任何收获，图完成学分 我们的尝试：人数少，手把手教写代码，规划正规路线，讲授更亲近， 表明教练与学员的关系，说明负担情况，相互竞争原则，知识是构建的，提问辩证能帮助构建 为什么需要课堂：自然的、有批判精神的学习环境 团队合作的必要性：项目不是由一个人来完成的 团队的必要条件：成员在作为码农的能力是合格的 (用以解决中层次及高层次问题，而非低层次语法问题) 团队需要一定的流程来管理开发活动 团队合作怎么做 有哪些流程 团队开发解决了什么？ 首先解决了工作量的问题 提高了软件开发、运营、维护的效率，提升软件的可靠性、可维护性 每个具体的开发者在团队中都有各种各样的角色担当，开发、测试、美工、管理等 把工作有序的组织起来就是团队流程 每个人应该被团队需求 通常流程 分析需求 设计模块 团队讲解项目 (成员有必要了解子系统、模块及他们之间的关系) 分模块任务安排 (初步) 合作开发 (通过文档沟通接口，做好单元测试) 记录开发进程、未完成事项、遇到的问题 (项目管理工具) 负责人通过每个人进度及能力调整部分任务分配 (细节) 相互提交模块代码 (pull request) 讨论问题 管理者合并代码 (merge) 集成测试 功能测试 (需求变动) BUG 修复 部署 完成交付 个人学习规划 初级软件工程师成长 积累软件开发相关的知识，提升技术技能（如对具体技术的掌握，动手能力） 积累问题领域的知识和经验（例如：对前端或后台的了解） 对通用的软件设计思想和软件工程思想的理解 提升职业技能（区别于技术技能） 实际成果 软件推荐 本地搜索神器：Everything 文本编辑： UltraEdit Notepad++ SouceInsight 版本控制：Git Markdown编辑器：Typora 笔记管理：印象笔记 思维导图：Xmind 搜索引擎：Google GitHub 百度 科学上网：SS (难，稳定) Green (易，稳定性一般) 项目管理工具：GitHub Worktile 书籍推荐 《XXXX 从入门到精通》 《XXXX 编程指南》 O’reilly 动物书 《大话设计模式》 《大话数据结构》 《操作系统原理》 以下将本次培训内容整理成思维导图了，点击可查看大图","tags":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/tags/WNCG/"},{"name":"学习规划","slug":"学习规划","permalink":"https://legacy-blog.zthxxx.me/tags/学习规划/"}],"categories":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/"},{"name":"学习规划","slug":"WNCG/学习规划","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/学习规划/"}]},{"title":"WCNG 新生软件培训思路","date":"2016-10-19T16:15:23.000Z","path":"posts/WCNG-Fresh-Student-Training-Ideas/","text":"1. 团队合作 团队合作模型 每期小组间相互阐述各自上期工作总结 小组内成员每人每期完成一个周志 组长介绍任务，制定工作流程，安排分发任务 记录开发过程 / 进度 (Idea Plan Process Test Finish) 开发文档规范 表格 / 邮件 / 文档 格式 文案风格 内容要求(模板) 代码规范 代码风格规范 代码设计规范 任务分配及开发跟进流程 任务跟踪系统 2. 语言入门 IDE的使用 语法 3. 编程思维 (套路) 解耦 复用而非复制 禁用硬编码 等通用良好代码写作思维。。。 4. 项目构建流程 (具体套路) 5. 具体开发实践与代码讲解 在具体编程中实践以上各种概念 6. 进阶 代码优化 数据结构 设计模式 算法 测试 单元测试 回归测试 自动化测试 Code Review 代码质量评价 部署 自动化部署 自动构建 持续集成 。。。。。。","tags":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/tags/WNCG/"},{"name":"学习规划","slug":"学习规划","permalink":"https://legacy-blog.zthxxx.me/tags/学习规划/"}],"categories":[{"name":"WNCG","slug":"WNCG","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/"},{"name":"学习规划","slug":"WNCG/学习规划","permalink":"https://legacy-blog.zthxxx.me/categories/WNCG/学习规划/"}]}]}