<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zthxxx&#39;s Blog</title>
  
  <subtitle>Life is short, you need python.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://legacy-blog.zthxxx.me/"/>
  <updated>2019-04-25T17:23:41.904Z</updated>
  <id>https://legacy-blog.zthxxx.me/</id>
  
  <author>
    <name>zthxxx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>画了一只治愈的由乃</title>
    <link href="https://legacy-blog.zthxxx.me/posts/painting-hand-drawn-Gasai-Yuno/"/>
    <id>https://legacy-blog.zthxxx.me/posts/painting-hand-drawn-Gasai-Yuno/</id>
    <published>2017-11-03T10:50:45.000Z</published>
    <updated>2019-04-25T17:23:41.904Z</updated>
    
    <content type="html"><![CDATA[<p>尝试着彩铅临摹了一张我妻由乃的图， <s>渣绘预警</s></p><p>嗯，病娇的由乃虽然很赞，但我还是更喜欢看到由乃「治愈」的微笑，所以选择画了这张。 <s>其实主要还是因为简单</s></p><img src="/posts/painting-hand-drawn-Gasai-Yuno/Gasai-Yuno-by-zthxxx.jpg" title="Gasai Yuno - by zthxxx"><a id="more"></a><p>血迹什么的当然不会画了，试过用红笔涂，但是没有「溅」出来那种自然感，感觉涂到画上肯定会毁，所以就没有画了。<s>绝对不是因为懒</s></p><p>每天抽了一点时间，断断续续差不多持续了一周的时间，线稿好还，上色感觉很难，现在对黑白灰关系把握不好，反正就是还得多练。</p><p>数了数，十个月的时间才画了 17 张，还不如别个小姐姐一个月的量，画的还很简单，真是怠惰啊怠惰。</p><p>工具：</p><ul><li>马可油性彩铅 36 色 - 虽然只有 36 色，但我才不会说,只要给我 72 色，我 。。。。我也肯定上不好色的！</li><li>Mono Zero 方头自动橡皮  - 挺方便点，就是用得有点快</li><li>荷兰白卡 400g - 70g 太厚，400g 简直就是纸板，太硬了，以后买的画我想试试 200g 的，嗯，等我画玩了就买，还有 47 张。。。</li></ul><p>最近某壕大佬借了块 UGEE EX07S 给我，之前我的渣板驱动都出问题了，终于可以淘汰了，下次试试板绘吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尝试着彩铅临摹了一张我妻由乃的图， &lt;s&gt;渣绘预警&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;嗯，病娇的由乃虽然很赞，但我还是更喜欢看到由乃「治愈」的微笑，所以选择画了这张。 &lt;s&gt;其实主要还是因为简单&lt;/s&gt;&lt;/p&gt;
&lt;img src=&quot;/posts/painting-hand-drawn-Gasai-Yuno/Gasai-Yuno-by-zthxxx.jpg&quot; title=&quot;Gasai Yuno - by zthxxx&quot;&gt;
    
    </summary>
    
      <category term="绘画" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BB%98%E7%94%BB/"/>
    
    
      <category term="手绘" scheme="https://legacy-blog.zthxxx.me/tags/%E6%89%8B%E7%BB%98/"/>
    
      <category term="彩铅" scheme="https://legacy-blog.zthxxx.me/tags/%E5%BD%A9%E9%93%85/"/>
    
  </entry>
  
  <entry>
    <title>[译] 把 Cmder 装进你的 Hyperjs 终端里</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Using-Cmder-with-Hyper/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Using-Cmder-with-Hyper/</id>
    <published>2017-10-28T16:03:21.000Z</published>
    <updated>2019-04-25T17:23:41.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="http://blog.bsinky.com/programming/tools/2017/06/11/using-cmder-with-hyper.html" rel="external nofollow noopener noreferrer" target="_blank">Using Cmder with Hyper</a></li><li>原文作者：<a href="https://github.com/bsinky" rel="external nofollow noopener noreferrer" target="_blank">Benjamin Sinkula</a></li><li>译文出自：<a href="/posts/Using-Cmder-with-Hyper/">zthxxx’s blog</a></li><li>译者：<a href="https://github.com/zthxxx" rel="external nofollow noopener noreferrer" target="_blank">zthxxx</a></li><li>注：本译文基于 <strong>CC BY-NC-ND 4.0</strong> 发布</li></ul></blockquote><p>今天我们来写写关于 Hyper 的事情，这本质上不过是一个装饰着漂亮 UI 的终端程序。虽然这样说可能留不下什么深刻印象，但它真的看起来很棒！此外，它还有很多插件能让你添加一些无法从标准的终端中获得的特性。</p><a id="more"></a><p><img src="./hyper-cmder.png" alt="hyper-cmder"></p><p>这在 Windows 上更是如此， 原本终端被限制只能使用 <code>cmd</code> 或 <code>powershell</code>，虽然后者毫无疑问要更具现代性和可用性，但因为一些原因，我从未发现我自己在 Windows 上使用过 <code>powershell</code>，而是只会在当我觉得需要终端时开启 <code>cmd</code>。</p><p>这让我接触到了 <a href="http://cmder.net/" rel="external nofollow noopener noreferrer" target="_blank">Cmder</a>。Cmder 自我描述为一个 「为 Windows 打造的便携式模拟终端」，这貌似与 Hyper 一脉相承。Cmder 有一些挺不错的功能，比如 <kbd>Tab</kbd> 自动补全命令，就我所知<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，Windows <code>cmd</code> 在很长一段时间里都不支持。它还有许多特性，包括标签页、捆绑了一些好用的功能如 <code>ls</code> 和 <code>grep</code>，等等。我极度推荐 Cmder 给每个那些频繁在 Windows 下使用终端的人，你不会后悔的！</p><p>那么，Cmder 提供了许多很棒的功能，Hyper 看起来又真的很酷……但如果我像在 Hyper 中使用 Cmder 样式的终端呢？</p><p>正如我本周早些时候的发现，这确实是可能实现的。</p><p>首先，看起来 Cmder 变出许多魔法的关键是通过执行这条命令：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmd</span> /k "<span class="variable">%ConEmuDir%</span>\..\init.bat"  -new_console:d:<span class="variable">%USERPROFILE%</span></span><br></pre></td></tr></table></figure><p>让我有点感兴趣的是传入参数中的 <code>/k</code> 开关。无论什么 <code>bat</code> 文件都能在 Hyper 启动时被轻松调用，因为 Hyper 的 <code>.hyper.js</code> 配置文件会暴露终端启动时的启动参数。</p><p>考虑到这点，让一个类似 Cmder 的终端运行在 Hyper 中仅仅只需要基于以下几个简单的步骤：</p><ol><li>通过<strong>在 Cmder 中</strong>执行 <code>echo %ConEmuDir%</code> 命令找出你的 <code>%ConEmuDir%</code>  文件夹路径（我不认为这个环境变量会在 Cmder 以外的地方被建立）</li><li>在 <code>.hyper.js</code> 中，在 <code>env</code> 的值下插入一个键 <code>ConEmuDir: 'Your/ConEmuDir/Path/Here'</code></li><li>同样是在 <code>.hyper.js</code> 中，在 <code>shellArgs</code> 数组中添加两个参数值 ——首先是 <code>/k</code> 开关，然后是作为第二个值的 <code>%ConEmuDir%\..\init.bat</code></li></ol><p>你最终应该得到一些类似于如下的结果<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shellArgs: [<span class="string">'--login'</span>, <span class="string">'/k'</span>, <span class="string">'%ConEmuDir%\..\init.bat'</span>],</span><br><span class="line">env: &#123;</span><br><span class="line">    <span class="string">'ConEmuDir'</span>: <span class="string">'C:\Path\To\Your\ConEmuDir'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>译者注： 这种写法必须限制于路径中没有空格，对于 Cmder 本身安装路径中有空格的情况，有更推荐的写法<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。</p></blockquote><p>就是这样！现在你再启动 Hyper，应该就能迎来 Cmder 式的终端体验，拥有彩色的当前工作路径文字，和 Unix 命令支持如 <code>ls</code> 等（依赖于你安装了带有这些的 Cmder 版本）。</p><p>你可能注意到我省略了 Cmder 中使用的 <code>-new_console:</code> 参数，我从来没有尝试过测试它 —— 这个参数可能或不能在 Hyper 正常工作。如果你爱折腾的话，可以自行尝试它。</p><p>看到这儿你可能会问我了，「如果 Cmder 在 Windows 下用得挺好的，为什么我还要用 Hyper？」</p><p>我认为答案应该是：尝试它们两个！</p><hr><p><strong>译者补充：</strong></p><p>Hyper 2.0 及以上版本已经修复了<a href="https://github.com/zeit/hyper/issues/2124" rel="external nofollow noopener noreferrer" target="_blank">中文显示的问题</a>，但是截止本篇文章写作时，<a href="https://hyper.is/" rel="external nofollow noopener noreferrer" target="_blank">Hyper.is</a> 官网中直接下载到的还是 1.4.8 版本，我是直接在官方 GitHub 仓库的 Releases 中找到并 <a href="https://github.com/zeit/hyper/releases/tag/2.0.4" rel="external nofollow noopener noreferrer" target="_blank">Hyper 2.0.4 版</a> 的。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>我并不是很确定 <code>cmd</code> 什么时候有了 <kbd>Tab</kbd> 自动补全功能，只是到了写这篇文章的时候我尝试启动 <code>cmd</code> 后才注意到，当我按下 <kbd>Tab</kbd> 时，某些单词能像 <code>expl</code> 到 <code>explorer</code> 这样自动补全了。 <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>你的 <code>.hyper.js</code> 配置可能本来就没有 <code>--login</code> 参数在 <code>shellArgs</code> 的值中，我觉得它是默认的参数，所以把它留下来了。我不确定 <code>--login</code> 在 <code>cmd</code> 和 <code>powershell</code> 中代表什么含义…… <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p>直接找到 <code>init.bat</code> 的位置，而不再使用相对路径 <code>%ConEmuDir%\..\init.bat</code>，把整个 <code>init.bat</code> 的绝对路径作为一个环境变量，使用单引号包裹双引号的形式，再把整个环境变量作为参数传入 <code>shellArgs</code>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shellArgs: [<span class="string">'--login'</span>, <span class="string">'/k'</span>, <span class="string">'%CmderInit%'</span>],</span><br><span class="line">env: &#123;</span><br><span class="line">  CmderInit: <span class="string">'"C:\\Program Files\\cmder\\vendor\\init.bat"'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure> <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;http://blog.bsinky.com/programming/tools/2017/06/11/using-cmder-with-hyper.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Using Cmder with Hyper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者：&lt;a href=&quot;https://github.com/bsinky&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Benjamin Sinkula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自：&lt;a href=&quot;/posts/Using-Cmder-with-Hyper/&quot;&gt;zthxxx’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者：&lt;a href=&quot;https://github.com/zthxxx&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;zthxxx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注：本译文基于 &lt;strong&gt;CC BY-NC-ND 4.0&lt;/strong&gt; 发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天我们来写写关于 Hyper 的事情，这本质上不过是一个装饰着漂亮 UI 的终端程序。虽然这样说可能留不下什么深刻印象，但它真的看起来很棒！此外，它还有很多插件能让你添加一些无法从标准的终端中获得的特性。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://legacy-blog.zthxxx.me/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="翻译" scheme="https://legacy-blog.zthxxx.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="折腾" scheme="https://legacy-blog.zthxxx.me/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>[译] 深入理解 Python 字典实现过程</title>
    <link href="https://legacy-blog.zthxxx.me/posts/python-dictionary-implementation/"/>
    <id>https://legacy-blog.zthxxx.me/posts/python-dictionary-implementation/</id>
    <published>2017-03-26T07:37:06.000Z</published>
    <updated>2019-04-25T17:23:41.904Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://fengsp.github.io/blog/2017/3/python-dictionary/" rel="external nofollow noopener noreferrer" target="_blank">Python dictionary, the implementation</a></li><li>原文作者：<a href="https://twitter.com/_fengsp" rel="external nofollow noopener noreferrer" target="_blank">Shipeng Feng</a></li><li>译文出自：<a href="/posts/python-dictionary-implementation/">zthxxx’s blog</a></li><li>译者：<a href="https://github.com/zthxxx" rel="external nofollow noopener noreferrer" target="_blank">zthxxx</a></li><li>校对者：<a href="https://github.com/Zheaoli" rel="external nofollow noopener noreferrer" target="_blank">Zheaoli</a></li><li>注：原文与本译文均基于 <strong>CC BY-NC-SA</strong> 发布</li></ul></blockquote><p>字典是一种内置于 Python 中非常有用的数据类型，总的来说它是一些由键（key）索引的对象，这里的 key 是必须是不可变的。 以下是一个简单的字典用法示例：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'fengsp'</span>: <span class="number">10</span>, <span class="string">'amy'</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'fengsp'</span>]</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d[<span class="string">'fengsp'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.keys()</span><br><span class="line">[<span class="string">'amy'</span>]</span><br></pre></td></tr></table></figure><p>通常我们会多次的检索一个值（value），因此通过 key 来检索一个对象的过程必须是个非常快速的操作。对于 CPython 本身，多种语法特性都是在字典的帮助下支持的，例如，类实例就是使用字典来储存实例属性，可见字典的性能至关重要。</p><h2 id="pydictobject-结构体"><a class="headerlink" href="#pydictobject-结构体"></a>PyDictObject 结构体</h2><p>在 CPython 源码中，字典是一个 C 的结构体， <code>PyDictObject</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PyDictObject</span> &#123;</span></span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    Py_ssize_t ma_fill;  <span class="comment">/* # Active + # Dummy */</span></span><br><span class="line">    Py_ssize_t ma_used;  <span class="comment">/* # Active */</span></span><br><span class="line">    Py_ssize_t ma_mask;</span><br><span class="line"></span><br><span class="line">    PyDictEntry *ma_table;</span><br><span class="line">    PyDictEntry *(*ma_lookup)(PyDictObject *mp, PyObject *key, <span class="keyword">long</span> hash);</span><br><span class="line">    PyDictEntry ma_smalltable[PyDict_MINSIZE];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Py_ssize_t me_hash;</span><br><span class="line">    PyObject *me_key;</span><br><span class="line">    PyObject *me_value;</span><br><span class="line">&#125; PyDictEntry;</span><br></pre></td></tr></table></figure><p>在此数据结构中的这些字段分别是：</p><h3 id="ma-fill"><a class="headerlink" href="#ma-fill"></a><strong>ma_fill</strong></h3><p>表示所有激活元素（active entry）和虚拟元素（dummy entry）的计数。<br>如果删除一个 key，这个元素将成为虚拟元素，并且 <code>ma_fill</code> 任然保持不变；如果添加一个新的 key 并且新 key 不属于虚拟元素，则 <code>ma_fill</code> 增加 1。</p><h3 id="ma-used"><a class="headerlink" href="#ma-used"></a><strong>ma_used</strong></h3><p>对象中所有激活元素的计数。如果添加一个新 key，<code>ma_used</code> 会增加 1，如果删除一个 key，这个字段将减 1。</p><h3 id="ma-mask"><a class="headerlink" href="#ma-mask"></a><strong>ma_mask</strong></h3><p>哈希表的位掩码，这个表中包含 <code>ma_mask + 1</code> 个哈希槽(slot)。<br>这里储存位掩码而不是大小，因为在查找元素的一个 key 时，使用 <code>slot = key_hash &amp; mask</code> 就能直接获得哈希槽序号。</p><h3 id="ma-table"><a class="headerlink" href="#ma-table"></a><strong>ma_table</strong></h3><p>一个 <code>PyDictEntry</code> 结构体的数组， <code>PyDictEntry</code> 包含 key 对象、value 对象，以及 key 的哈希；<br>这些 key 的哈希作为缓存储存起来，例如，当我们搜索一个 key 时，我们可以通过使用缓存哈希来执行快速比较查找。</p><h3 id="ma-lookup"><a class="headerlink" href="#ma-lookup"></a><strong>ma_lookup</strong></h3><p>一个用于查找 key 的函数指针。初始化时它被设置为 <code>lookdict_string</code>。<br><code>lookdict_string</code> 假定字典的 key 全是 <code>PyStringObject</code> 类型，这是一个使得查找 <code>StringDictObject</code> 类型的 key 可以快很多的最佳优化。<br>如果一个 key 不是 <code>PyStringObject</code> 类型，那么<code>ma_lookup</code> 将改为一种更慢的普通查找函数。</p><h3 id="ma-smalltable"><a class="headerlink" href="#ma-smalltable"></a><strong>ma_smalltable</strong></h3><p>一个有 8 个槽的哈希表（译者注：这里应该是最小 8 个槽，因为 <code>PyDict_MINSIZE=8</code>）。<br>这样小字典也能直接存储在这里，并且不会再调用 <code>malloc()</code>。</p><h2 id="碰撞"><a class="headerlink" href="#碰撞"></a>碰撞</h2><p>两个不同的 key 可能会被散列到相同的槽，这被称之为碰撞。当碰撞发生时，Python 使用 <em>开放寻址法</em> 来解决碰撞：如果这个槽不能再容纳这个 key（译者注：指槽中已经有 key），那么就寻找其他槽。</p><p>例如，这里有个简单的方法，如果槽 <code>i</code> 不能再容纳这个 key，就尝试槽 <code>i+1</code> 、<code>i+2</code> 等等。对于每条哈希，我们现在定义了能容纳它的所有槽的列表，如果删除其中一个 key，整个列表将会被破坏，这就是这里为什么我们需要虚拟元素（dummy）。</p><p>这个简单的开放寻址线性算法会使其退化为线性堆，这将导致性能降低，因为我们每次查找一个 key 都要扫描所有的槽。在实际中，CPython 使用如下算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DUMMY = <span class="string">'dummy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以我的水平并不足够理解算法是如何工作的，</span></span><br><span class="line"><span class="comment"># 最后的结果会覆盖 0 到 ma_mask 之间的所有整数。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_addressing_in_cpython</span><span class="params">(table, key, hash)</span>:</span></span><br><span class="line">    free_slot = <span class="literal">None</span></span><br><span class="line">    perturb = hash</span><br><span class="line">    i = slot_index = hash &amp; ma_mask</span><br><span class="line">    <span class="keyword">while</span> table[slot_index] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> table[slot_index].key != key:</span><br><span class="line">        <span class="keyword">if</span> table[slot_index].key <span class="keyword">is</span> DUMMY <span class="keyword">and</span> free_slot <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            free_slot = slot_index</span><br><span class="line">        i = (<span class="number">5</span> * i + perturb + <span class="number">1</span>)</span><br><span class="line">        slot_index = i &amp; ma_mask</span><br><span class="line">        perturb &gt;&gt;= <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> table[slot_index] <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> free_slot <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> free_slot</span><br><span class="line">    <span class="keyword">return</span> slot_index</span><br></pre></td></tr></table></figure><h2 id="哈希表大小"><a class="headerlink" href="#哈希表大小"></a>哈希表大小</h2><p>如果我们持续添加 key 到字典中，那很快就会没有足够的空间来装下所有的 keys，现在就需要对哈希表扩容（resize）。</p><p>CPython 会在每次添加 key 时检查表大小，如果哈希表已经处于三分之二满（相对于 <code>ma_fill</code>），将扩容哈希表。如果字典中包含接近或超过 50000 keys，扩容后新的大小将为 <code>ma_used * 4</code>，其他时候扩容后为 <code>ma_used * 2</code>。</p><p>哈希表不会在从字典中删除大量 keys 时引发调整大小，这意味着哈希表将不会变小。这不是什么大问题，因为大多数时候我们我们只使用字典一段时间，然后就丢弃掉整个字典。如果你真的建立了一个非常大的字典，并且从中删除了许多 keys，那么你应该用剩余的 key 创建一个新的字典。</p><h2 id="空闲列表"><a class="headerlink" href="#空闲列表"></a>空闲列表</h2><p>许多字典实例被频繁的创建和销毁，为了减少创建和销毁的次数，一种 <code>free_dicts</code> 数组被用于容纳不再使用的字典对象，相当于一个简单的缓存。如果我们需要一个 <code>PyDictObject</code> 对象，它将从可用的空闲列表中获取。</p><h2 id="键共享与有序字典"><a class="headerlink" href="#键共享与有序字典"></a>键共享与有序字典</h2><p>当字典用作对象属性的容器时，它们会占用比必要更多的内存，因为键是相同的，但它们却被复制到每个实例中了。自 Python 3.6 起，一个属性字典与同一类实例的其他属性字典共用 keys，例如有如下这样的类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, email)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        self.email = email</span><br></pre></td></tr></table></figure><p>这些属性字典将会被像这样存储：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是在属性字典之间共享的</span></span><br><span class="line"><span class="comment"># 并且这也是排序的</span></span><br><span class="line">keys = [</span><br><span class="line">    (<span class="number">5317300778844242624</span>, <span class="string">'username'</span>),</span><br><span class="line">    (<span class="number">268341141884068675</span>, <span class="string">'email'</span>),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># this hash table just stores the index to the key entries</span></span><br><span class="line"><span class="comment"># 这个哈希表仅把索引存储到键元素中</span></span><br><span class="line"><span class="comment"># 这是简化的</span></span><br><span class="line">index_table = [<span class="number">0</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是值</span></span><br><span class="line">values = [<span class="string">'user01'</span>, <span class="string">'user01@example.com'</span>]</span><br></pre></td></tr></table></figure><h2 id="我的想法"><a class="headerlink" href="#我的想法"></a>我的想法</h2><p>CPython 中字典的实现过程是非常简洁明了和易懂的。它的代码优美而高效，所有的参数选择都是经过实践的，例如，其中 <code>free_dicts</code> 和 <code>ma_smalltable</code> 参数的大小。我爱它们。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://fengsp.github.io/blog/2017/3/python-dictionary/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Python dictionary, the implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者：&lt;a href=&quot;https://twitter.com/_fengsp&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Shipeng Feng&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自：&lt;a href=&quot;/posts/python-dictionary-implementation/&quot;&gt;zthxxx’s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者：&lt;a href=&quot;https://github.com/zthxxx&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;zthxxx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者：&lt;a href=&quot;https://github.com/Zheaoli&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Zheaoli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;注：原文与本译文均基于 &lt;strong&gt;CC BY-NC-SA&lt;/strong&gt; 发布&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;字典是一种内置于 Python 中非常有用的数据类型，总的来说它是一些由键（key）索引的对象，这里的 key 是必须是不可变的。 以下是一个简单的字典用法示例：&lt;/p&gt;
    
    </summary>
    
      <category term="程序语言" scheme="https://legacy-blog.zthxxx.me/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://legacy-blog.zthxxx.me/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="翻译" scheme="https://legacy-blog.zthxxx.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Python" scheme="https://legacy-blog.zthxxx.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 的个人 Wiki 主题 - Wikitten</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Personal-Wiki-System-Theme-for-Hexo/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Personal-Wiki-System-Theme-for-Hexo/</id>
    <published>2017-02-21T13:35:06.000Z</published>
    <updated>2017-03-20T05:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下多图预警！<br>TL;DR</p><h2 id="用-hexo-做个人-wiki-知识管理系统"><a class="headerlink" href="#用-hexo-做个人-wiki-知识管理系统"></a>用 Hexo 做个人 Wiki 知识管理系统</h2><h2 id="起始"><a class="headerlink" href="#起始"></a>起始</h2><p><strong>知识是自己构建出来的，不是别人灌输的，也不是看了各种资料背住就完了。<strong>所谓构建，是指接受信息输入之后，通过信息整理加工，消化转变为</strong>自己理解的内容</strong>，并<strong>分类</strong>记录在脑部对应类别的不同层次区域。</p><p>就像一个帝国的建立和发展过程，不断的累积资本，转化为力量。通过知识加工这个二次学习的过程，能让我们更加牢固的记住关键知识和产生更加深入的理解。</p><p>一直希望寻找一种相对优雅、我比较喜欢的方式来做<strong>知识管理</strong>，帮助知识积累构建；经过尝试了<strong>手写笔记本、OneNote、Evernote、为知笔记</strong>等之后，最终选择用 <strong>个人 Wiki 系统</strong> 来做自己的知识管理。然而天下 Wiki 千千万，选择困难症患者到底该选哪一种呢？</p><p>我试了时下好几个流行的、推荐者比较多的 Wiki 系统，但是多少都有些小细节让我不是很满意。在我的 <a href="http://wiki.zthxxx.me/wiki/index/" rel="external nofollow noopener noreferrer" target="_blank">Wiki 首页</a> 可以看到我对知识管理和这几个 Wiki 系统的一些简单的看法，以及为此自己开坑了个 Wiki 的<a href="https://github.com/zthxxx/hexo-theme-Wikitten" rel="external nofollow noopener noreferrer" target="_blank">轮子</a>。</p><h2 id="轮子"><a class="headerlink" href="#轮子"></a>轮子</h2><p>先放上上我经过了这些使用之后，整理出自己对 <strong>个人 Wiki 系统</strong>的需求：</p><ul><li>界面简洁，排版整齐，有些留白，不要太满 （要求很宽泛）</li><li>部署简单，不需要后台与数据库 （最好静态页面）</li><li>支持多级分类 （<strong>满足知识的分类性</strong>）</li><li>分类目录可展开和收缩</li><li>展开分类时可直接看到该分类下所有条目</li><li>支持全文搜索</li><li>使用 Markdown 书写</li><li>适合单人的修改与更新内容</li><li>最好支持查看历史版本</li></ul><p>嗯，所以以上这些也是我自己 Wiki 系统的特性了吧~~</p><p>借用 <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo 博客系统</a>的框架，仿照 <a href="https://wikitten.vizuina.com/" rel="external nofollow noopener noreferrer" target="_blank">Wikitten</a> 的样式，写了一个针对于个人 Wiki 的主题 <strong>【<a href="https://github.com/zthxxx/hexo-theme-Wikitten" rel="external nofollow noopener noreferrer" target="_blank">hexo-theme-Wikitten</a>】</strong>。</p><p>先放上两个链接：</p><p><strong>我的个人 Wiki 地址：<a href="http://wiki.zthxxx.me/" rel="external nofollow noopener noreferrer" target="_blank">http://wiki.zthxxx.me/</a></strong></p><p><strong>Wikitten 主题地址：<a href="https://github.com/zthxxx/hexo-theme-Wikitten" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/zthxxx/hexo-theme-Wikitten</a></strong></p><p>再放一个预览的截图：</p><p><img src="./preview.jpg" alt="Wikitten preview"></p><p>嘛，样式是跟 <a href="https://github.com/victorstanciu" rel="external nofollow noopener noreferrer" target="_blank">victorstanciu</a> 的 <a href="https://wikitten.vizuina.com/" rel="external nofollow noopener noreferrer" target="_blank">Wikitten</a> 一样的（人家有 MIT LICENSE 的，并且我提到时也都有注明出处），之所以选择 Wikitten，是因为我觉得这个 Wiki 系统最接近我自己对个人 Wiki 的需求，并且样式也很简洁。不过相比起来，代码就完全不一样了；人家是 PHP，我这是 Hexo 的主题，不需要后台，可以直接挂在 Github Pages 上，省去了服务器；原本只支持搜索标题的，我也给改到支持全文搜索了。</p><h2 id="浅谈个人-wiki-系统"><a class="headerlink" href="#浅谈个人-wiki-系统"></a>浅谈个人 Wiki 系统</h2><p>个人 Wiki 对我的意义大概就是 <strong>知识的消化、积累、归类整理</strong>，于是我也总结了一套觉得比较合理和适用于自己的简单知识管理流程：</p><blockquote><ol><li>通过网页、RSS、微信等网络渠道作为知识获取来源。</li><li>通过笔记系统（手写笔记、OneNote、Evernote）初步筛选有价值有针对性的信息，<strong>收藏</strong>信息，<strong>分类整理</strong>，做读后<strong>要点</strong>笔记记录。</li><li>自己平时突然想到或总结的一两句话，或很零碎的点子、灵感，初步消化的内容，则用 <strong>Wiki</strong> 记录。</li><li>最后当 Wiki 在某版块有一定量后，将这方面笔记和 Wiki 中的内容重读，整理和提炼，二次消化精炼再加上自己的感悟和理解，写成文章发表在 <strong>博客</strong> 上。</li></ol><p>在使用中，<strong>笔记系统</strong> 主大块信息的<strong>分类和整理</strong>，<strong>Wiki</strong> 主零碎知识的<strong>积累</strong>，而 <strong>博客</strong> 只在于 <strong>精</strong>。</p><p>Wiki 中某一版块刚建时，可能只有很少内容或者就一句话，但是通过这种使用流程，日积月累，这方面的事物接触得多了，零散的知识也就多了，那么 Wiki 中这个版块记录的内容也就会变多了，也就是<strong>通过积累，把原本大量碎片化的知识结构化整理起来了</strong>。</p></blockquote><p>关于侧边栏展开这点，我也认同 <a href="https://www.v2ex.com/member/TankyWoo" rel="external nofollow noopener noreferrer" target="_blank">@TankyWoo</a>「**一篇维基往往就是一个独立的内容，其次可能和某几篇挂钩，所以左边显示全部标题并不是一个硬需求」**的观点；这的确不是硬性要求，甚至有些不符合维基哲学；但是我用了一些系统后，确实就很强烈的想要有侧边栏、有展开、有跳转的功能；<strong>这也是我认为个人 Wiki 与维基百科的不同地方：</strong></p><p>维百重在知识的<strong>全面</strong>，每个词条的内容全面、详尽，报道不会出偏差，<strong>是信息的堆砌</strong>；词条解释内可能有某些指向其他 wiki 页面的链接，但并不是指这两个词条之间关联，而仅仅是对这个句子中这个词语的解释，参考资料的链接才是挂钩有关联。</p><p>个人 Wiki 在这点上，力求对每个词条做到相尽，但做不到全面，受限于个人的知识有限。个人 Wiki 的目的，首先是为了<strong>构建自己的知识体系</strong>，然后才是积累和分享，<strong>知识体系之间是有关联的</strong>，呈网状和层状结构，构建并不是简单的堆砌，而是类似于<strong>分类聚合</strong>的形态，所以分级目录必须有；顶层总体是森林，有不同的树木群，树上有分支，结满果实。</p><p>我希望 Wiki 页面能让我随时看到总体分类，把控整体，一是有助于<strong>知识的联想</strong>（看到分类能想得起里面有哪些词条，每条讲的什么，哪些和现在有关），不用点开每条，联想的过程也是在加深印象；二是随时看到知识面的匮乏和自己碌碌无为时激发一定的动力去学习（哎，我确实又懒，还 too young ，有必要学习一个），这点因人而异，不过我觉得好多人也需要吧（不然怎么都是晚上效率暴增。。。唉，都是白天啥也没干的羞耻心）；三是我对 Wiki 使用频率还挺高的，所以比起一般要退回首页才能跳转到其他词条的，有侧边栏链接，真是方便了不少。</p><h2 id="汇总参考"><a class="headerlink" href="#汇总参考"></a>汇总参考</h2><p>顺便也汇总说一下我用过一些 Wiki 系统的特点，与其跟我自身需求的差异吧。</p><p>【注：以下仅代表个人观点，所述特点因个人关注点而带有严重的片面性，轻喷，希望有不同意见的朋友也来补充一些自己的观点。】</p><h3 id="00-wikitten"><a class="headerlink" href="#00-wikitten"></a>00 - <strong><a href="https://wikitten.vizuina.com/" rel="external nofollow noopener noreferrer" target="_blank">Wikitten</a></strong></h3><ul><li>双栏</li><li>界面简洁</li><li>侧边可展开显示所有条目标题</li><li>支持 Markdown 书写，支持多种语言</li><li>支持切换到查看源码</li><li><strong><em>不可全文搜索，只能搜索标题</em></strong></li><li><strong><em>需要后台加数据库，部署繁琐</em></strong></li></ul><p><img src="./WikittenPreview.jpg" alt="Wikitten Preview"></p><h3 id="01-tiddlywiki"><a class="headerlink" href="#01-tiddlywiki"></a>01 - <strong><a href="http://tiddlywiki.com/" rel="external nofollow noopener noreferrer" target="_blank">TiddlyWiki</a></strong></h3><ul><li>双栏</li><li>侧边可展开显示所有条目标题</li><li>全文可搜索</li><li>功能丰富</li><li><strong><em>不支持 Markdown，而是 WikiText</em></strong></li><li><strong><em>单文件系统</em></strong></li></ul><p><img src="./TiddlyWikiPreview.jpg" alt="TiddlyWiki Preview"></p><h3 id="02-mediawiki"><a class="headerlink" href="#02-mediawiki"></a>02 - <strong><a href="https://www.mediawiki.org/wiki/MediaWiki" rel="external nofollow noopener noreferrer" target="_blank">MediaWiki</a></strong></h3><ul><li>全文可搜索</li><li>功能丰富，定制程度高</li><li>重量级，Wiki 系统中最强大</li><li>支持查看历史版本</li><li>适合大型项目，多人编辑</li><li><strong><em>不支持 Markdown</em></strong></li><li><strong><em>侧边不可展开显示所有条目标题</em></strong></li><li><strong><em>界面复杂、臃肿</em></strong></li><li><strong><em>需要后台与数据库，部署繁琐</em></strong></li></ul><p><img src="./MediaWikiPreview.jpg" alt="MediaWiki Preview"></p><h3 id="03-wiko"><a class="headerlink" href="#03-wiko"></a>03 - <strong><a href="http://wzpan.github.io/hexo-theme-wixo/" rel="external nofollow noopener noreferrer" target="_blank">Wiko</a></strong></h3><ul><li>同为 Hexo 主题</li><li>全文可搜索</li><li>界面简洁</li><li>支持 Markdown 书写</li><li><strong><em>不支持二级分类</em></strong></li><li><strong><em>侧边不可展开显示所有条目标题</em></strong></li><li><strong><em>搜索也只可以在首页进行搜索</em></strong></li><li><strong><em>配色不是很让我喜欢</em></strong></li></ul><p><img src="./WixoPreview.jpg" alt="Wixo Preview"></p><h3 id="04-mdwiki"><a class="headerlink" href="#04-mdwiki"></a>04 - <strong><a href="www.mdwiki.net">MDwiki</a></strong></h3><ul><li>界面简洁</li><li>部署简单</li><li>支持 Markdown 书写</li><li><strong><em>无搜索功能</em></strong></li><li><strong><em>不支持二级分类</em></strong></li><li><strong><em>添加分类需手动修改主页顶栏</em></strong></li><li><strong><em>不可展开显示所有条目标题</em></strong></li><li><strong><em>纯静态，通过 AJAX 显示不同页面</em></strong></li></ul><p><img src="./MDWikiPreview.jpg" alt="MDwiki Preview"></p><h3 id="05-vimwiki"><a class="headerlink" href="#05-vimwiki"></a>05 - <strong><a href="http://vimwiki.github.io/" rel="external nofollow noopener noreferrer" target="_blank">VimWiki</a></strong></h3><ul><li><strong><em>无搜索功能</em></strong> （感谢指正，有搜索但功能弱并且慢）</li><li><strong><em>不支持 Markdown 语法（但有插件支持）</em></strong></li><li><strong><em>不习惯 Vim 的人很难适应</em></strong></li></ul><p><img src="./VimWikiPreview.jpg" alt="VimWiki Preview"></p><h3 id="06-dokuwiki"><a class="headerlink" href="#06-dokuwiki"></a>06 - <strong><a href="https://www.dokuwiki.org/dokuwiki#" rel="external nofollow noopener noreferrer" target="_blank">DokuWiki</a></strong></h3><ul><li>整体看上去类似 MediaWiki，但没那么强大</li><li>更适合作为多人编辑的项目文档</li><li><strong><em>虽然没数据库，但依然需要 PHP 做后台</em></strong></li><li><strong><em>不支持 Markdown</em></strong></li><li><strong><em>配置项目多，大部分教程都说到其配置复杂</em></strong></li><li><strong><em>编辑器体验较差</em></strong></li></ul><p><img src="./DokuWikiPreview.jpg" alt="DokuWiki Preview"></p><h3 id="07-simiki"><a class="headerlink" href="#07-simiki"></a>07 - <strong><a href="http://simiki.org/" rel="external nofollow noopener noreferrer" target="_blank">Simiki</a></strong></h3><ul><li>单栏</li><li>界面简洁</li><li>类似 Wixo</li><li><strong><em>不支持二级分类</em></strong></li><li><strong><em>不支持搜索</em></strong></li><li><strong><em>侧边不可展开显示所有条目标题</em></strong></li></ul><p><img src="SimikiPreview.jpg" alt="Simiki Preview"></p><hr><h2 id="后续"><a class="headerlink" href="#后续"></a>后续</h2><p>嘛，看了这么多，总的来说，<strong><a href="https://github.com/zthxxx/hexo-theme-Wikitten" rel="external nofollow noopener noreferrer" target="_blank">hexo-theme-Wikitten</a></strong> 的轮子还是很符合我自己的使用习惯；希望在用 Hexo 的朋友，有需要个人 Wiki 系统的，也来试一下下这个主题；后续一堆 Bug 和 TODO List 正在维护，欢迎有兴趣的来提提 Pull request。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下多图预警！&lt;br&gt;
TL;DR&lt;/p&gt;
&lt;h2 id=&quot;用-hexo-做个人-wiki-知识管理系统&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#用-hexo-做个人-wiki-知识管理系统&quot;&gt;&lt;/a&gt;用 Hexo 做个人 Wiki 知识管理系统&lt;/h2
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="服务器" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/tags/Hexo/"/>
    
      <category term="博客" scheme="https://legacy-blog.zthxxx.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Wiki" scheme="https://legacy-blog.zthxxx.me/tags/Wiki/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis 自动构建 Hexo 到 GitHub</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Build-Hexo-Blog-by-Travis-CI/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Build-Hexo-Blog-by-Travis-CI/</id>
    <published>2016-12-26T05:20:11.000Z</published>
    <updated>2019-04-25T17:23:41.896Z</updated>
    
    <content type="html"><![CDATA[<p>额，本篇文章是<a href="/posts/Hexo-Build-Static-Blog-Process/">这篇博文</a>的后续，当时本来打算写完上篇就挨着写的，结果嘛。。。跳票了一个多月~~今天还是捡回来重新把他写完。</p><p>上次讲了第一步是用 Hexo 生成静态博客，第二步是部署到 GiHub Pages；但是有觉得部署 GitHub Pages 比较简单，感觉过程能讲地方的不是很多，于是这次再加一点内容，加上 Travis-CI 做持续集成。</p><p>嘛，第一步还是照惯例先来说说第一个 GitHub Pages 吧~</p><p>呃，至于没有 GayHub 账号的人，多半也没有兴趣点开这篇文章吧。。。</p><p><s>（想多了吧！即使有账号也没人有兴趣点开这篇文章看。。。）</s></p><hr><h3 id="github-pages"><a class="headerlink" href="#github-pages"></a>GitHub Pages</h3><p>GitHub 提供 <a href="https://pages.github.com/" rel="external nofollow noopener noreferrer" target="_blank">GitHub Pages</a> <strong>静态站点托管服务</strong>，旨在方便用户可以通过静态页面直接展示他们的项目主页和各种演示。</p><p><strong>简单的概括，GitHub Pages 服务就是把项目仓库中 <code>gh-pages</code> 分支的内容作为静态页面的文件，并提供 <code>https://&lt;username&gt;.github.io/&lt;repository&gt;/</code> 的域名以供访问。 其中 <code>&lt;username&gt;</code> 是指用户名，<code>&lt;repository&gt;</code> 是指仓库名。</strong></p><p>其中有个例外，就是当仓库名为 <code>&lt;username&gt;.github.io</code> 时，是固定解析的 <code>master</code> 分支，其他仓库是默认解析 <code>gh-pages</code> 分支并且可以配置使用哪个分支作为页面；<code>&lt;username&gt;.github.io</code> 仓库就只能解析 <code>master</code> 分支中的文件，并且访问域名就是 <code>https://&lt;username&gt;.github.io/</code>，称为个人页面，其他仓库的访问需要加上 <code>/&lt;repository&gt;/</code> 目录，被称为项目页面。</p><p>举个例子，GitHub 用户 <code>zthxxx</code> 有个仓库 <code>HelloWorld</code>，并且仓库中也有 <code>gh-pages</code> 分支，放了一个 <code>index.html</code> 里面写的 <code>&lt;h1&gt;Hello World&lt;/h1&gt;</code>，那么我们就可以通过 <code>https://zthxxx.github.io/HelloWorld/</code> 来访问这个页面，然后看到一个大大的 Hello World。</p><p>一般项目页面是具体要展示某个仓库的项目的时候使用，我们今天讲的个人博客就类似于一个个人主页，所以就使用 GitHub Pages 的个人页面好了。</p><p>操作过程也十分简单，具体步骤大概就是：</p><ol><li>先建一个 <code>&lt;username&gt;.github.io</code> 的仓库；</li><li>然后将我们上次讲到的 Hexo 生成的博客静态页面文件填到仓库 <code>master</code> 分支；</li><li>最后通过 <code>https://&lt;username&gt;.github.io/</code> 访问就是了；</li></ol><p>一切都很简单，就跟我们平时新建仓库、push 文件、打开浏览器的操作没什么两样，于是我也没什么兴趣再去截几张操作步骤的图来放在这里，实在不知道怎么操作的，可以看 <a href="https://xuanwo.org/2015/03/26/hexo-intor/#section-2" rel="external nofollow noopener noreferrer" target="_blank">这里</a> 或者 <a href="https://zhuanlan.zhihu.com/p/22191919" rel="external nofollow noopener noreferrer" target="_blank">这里</a> 讲的步骤。</p><p>如果你的 Hexo 博客照 <a href="/posts/Hexo-Build-Static-Blog-Process/#%E9%83%A8%E7%BD%B2-%E9%85%8D%E7%BD%AE%E9%83%A8%E5%88%86">我上次所讲的配置</a> 一样配好了的话，使用 <code>hexo deploy</code> 命令，Hexo 会通过 Git 自动部署到配置的指定仓库分支了，Hexo 博客源码本身我们一般就手动 push 放到另一个分支中，比如 <code>blog-source</code> <code>writing</code> <code>dev</code> 之类的，表示用来写作的都行。</p><p><strong>好了，下面讲的所有步骤都只是为了能不用敲 <code>hexo deploy</code> 命令这一个目的，不用看了。</strong></p><p><s>（诶，别，别啊，我开玩笑的，别真关页面啊！）</s></p><hr><h3 id="travis-ci"><a class="headerlink" href="#travis-ci"></a>Travis-CI</h3><p>现在要讲的是用于<strong>持续集成构建</strong>的工具，Travis-CI。</p><p>Travis-CI 能够通过 <a href="https://developer.github.com/webhooks/" rel="external nofollow noopener noreferrer" target="_blank">GitHub Webhook</a> 将推送的代码自动获取到虚拟环境，并根据项目根目录 <code>.traivs.yml</code> 文件中的描述的环境和命令来执行一系列构建任务。</p><p>这个持续集成原本作用是，持续自动的将推送到 GitHub 仓库中的代码，经过构建和运行测试后，把代码合并到主干并部署发布到指定的生产环境。</p><p>当然，我们这里并没有用到持续集成——代码都是自己手动推送合并的，也没法测试，顶多算是使用到了其中的自动部署功能。</p><p>我们现在的唯一目的就是<s>为了不用敲 hexo deploy 命令</s>为了让我们写好的博客内容能够被自动构建并发布到 GitHub Pages 页面。</p><p>Travis-CI 分收费版和<a href="https://travis-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">免费版</a>，免费版有一些限制比如构建时间有限和不能构建私有仓库之类的，不过这里无关紧要，所以我们就用<a href="https://travis-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">免费版</a>。</p><p>打开 <a href="https://travis-ci.org/" rel="external nofollow noopener noreferrer" target="_blank">Travis-CI 官网</a>，使用 GitHub 账号就可以登陆。</p><p><img src="./Travis-CI%E5%AE%98%E7%BD%91%E7%99%BB%E5%BD%95.png" alt="Travis-CI 官网登录"></p><p>登录后左边会显示设置了构建的仓库，右边显示正在构建的项目。初次使用 Travis-CI 的话，这两块应该都是空的。</p><p><img src="./Travis-CI%E7%99%BB%E5%BD%95%E5%90%8E%E7%95%8C%E9%9D%A2.png" alt="Travis-CI 登录后界面"></p><p>现在我们需要添加一个仓库到构建中，先点击左边仓库标题 <code>My Repositories</code> 旁边的加号，进入仓库选择界面。</p><p><img src="./%E7%82%B9%E5%87%BB%E6%B7%BB%E5%8A%A0%E4%BB%93%E5%BA%93.png" alt="点击添加仓库"></p><p><img src="./%E6%B7%BB%E5%8A%A0%E5%BE%85%E6%9E%84%E5%BB%BA%E4%BB%93%E5%BA%93%E7%95%8C%E9%9D%A2.png" alt="添加待构建仓库界面"></p><p>点击右上方的 <code>Sync account</code> 按钮可以手动同步一下所有仓库状态到 Travis-CI 中。下面的每个仓库名前面有个打勾打叉的滑动开关，打开开关表示把对应的项目添加到 Travis-CI 的构建列表中开启构建。</p><p><img src="./%E5%90%8C%E6%AD%A5%E6%8C%89%E9%92%AE%E4%B8%8E%E6%9E%84%E5%BB%BA%E5%BC%80%E5%85%B3.png" alt="同步按钮与构建开关"></p><p><img src="./%E5%BC%80%E5%90%AF%E9%9C%80%E6%9E%84%E5%BB%BA%E7%9A%84%E9%A1%B9%E7%9B%AE.png" alt="开启需构建的项目"></p><p>开启构建之后就可以通过左侧的项目栏选择具体的项目查看了。Travis-CI 是通过 push 来触发构建的，所以在构建我们的博客之前，先在 Travis-CI 中对博客所在的项目进行一些设置。在查看项目界面，点击右侧 <code>More options</code> -&gt; <code>Settings</code> 选项中，开启 <code>Build only if .travis.yml is present</code> 以及 <code>Build pushes</code> 选项；这表示只有 <code>.travis.yml</code> 文件存在的 push 推送才会被构建。</p><p><img src="./%E6%9F%A5%E7%9C%8B%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%9B%E5%85%A5%E8%AE%BE%E7%BD%AE.png" alt="查看项目并进入设置"></p><p><img src="./%E8%AE%BE%E7%BD%AE%E6%9E%84%E5%BB%BApush.png" alt="设置构建 push"></p><p>在 Travis-CI 开始构建时，还需要获取一些信息，比如需要怎么的环境、通过什么过程来构建等等，于是， Travis-CI 允许用户在项目根目录放置 <code>.travis.yml</code> 文件，通过 YAML 语言来描述环境以及构建过程等。</p><p>对于 <code>.travis.yml</code> 文件的使用，应该先查看<a href="https://docs.travis-ci.com/user/getting-started" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>，里面包含了多种语言的开始教程。简单的说就是要告诉 Travis-CI 你需要什么系统环境、需要什么库、要怎么初始化环境、执行什么构建脚本、构建成功要做什么等等这些。</p><p>我直接把我博客的 <a href="https://github.com/zthxxx/zthxxx.github.io/blob/writing/.travis.yml" rel="external nofollow noopener noreferrer" target="_blank"><code>.tarvis.yml</code></a> 文件贴上来，都加了详细注释的，基本上简单的构建都可以参照这个写法。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .tarvis.yml</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 指定语言环境</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"6"</span> <span class="comment"># 指定 NodeJS 版本</span></span><br><span class="line"><span class="attr">dist:</span> <span class="string">trusty</span> <span class="comment"># 指定系统版本。trusty 是指 Ubuntu 14.04 发行版的名称</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span> <span class="comment"># 是否需要 sudo 权限</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span> <span class="comment"># 指定要构建的分支</span></span><br><span class="line"><span class="attr">  only:</span> <span class="comment"># only 表示只构建以下分支</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">writing</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span> <span class="comment"># 在安装项目环境阶段需要运行的命令，一条一行，类似的还有 before_install</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">source</span> <span class="string">travis_env_init.sh</span> <span class="comment"># 执行指定的 shell 脚本来做初始化</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span> <span class="comment"># 在构建阶段需要运行的命令，一条一行，类似的还有 before_script、after_script</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">clean</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># Hexo 常规命令，执行清理和生成</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_success:</span> <span class="comment"># 在构建成功后要运行的命令，构建失败不会执行，其他同上</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span> <span class="string">deploy</span> <span class="string">&gt; /dev/null # 通过 hexo 的 deploy 命令部署博客</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span><span class="attr">notifications:</span> <span class="comment"># 设置通知项</span></span><br><span class="line"><span class="attr">  email:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在上面的 <code>install</code> 项中，有一条 <code>source travis_env_init.sh</code>，是由于我个人习惯，如果初始化命令比较多比较复杂，我一般就不直接写在 <code>.travis.yml</code> 文件中，而是单独建一个初始化环境的 shell 脚本，在 <code>.travis.yml</code> 中只是执行它，有兴趣的可以参考我博客的 <a href="https://github.com/zthxxx/zthxxx.github.io/blob/writing/travis_env_init.sh" rel="external nofollow noopener noreferrer" target="_blank"><code>travis_env_init.sh</code></a> 脚本。</p><p>其实这里我们用到的初始化环境的命令也相对简单，我这里也贴一下嘛：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># travis_env_init.sh</span></span><br><span class="line"><span class="comment"># 全局安装 Hexo</span></span><br><span class="line">npm install -g hexo </span><br><span class="line"><span class="comment"># 全局安装 Hexo 命令行工具，因为我们是命令行操作</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 安装 package.json 中的依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>好了，现在往仓库中 push 一个 commit，Travis-CI 就会自动获取代码并构建了。</p><p>那么，现在又有一个问题了——我们的目的是自动部署到 GitHub Pages，用的是 <code>hexo deploy</code> 命令，但是 Hexo 又配置使用的是 Git push 来推送的，那么 Travis-CI 怎么有权限操作我的 GitHub 仓库呢！</p><hr><h3 id="github-access-token"><a class="headerlink" href="#github-access-token"></a>GitHub Access Token</h3><p>首先我们肯定不应该把自己的 ssh 私钥作为文件放到仓库。</p><p>那么现在有两种解决办法。</p><p>第一种是加密私钥文件上传到 Travis 的空间，但是这种办法相当麻烦，要下载本地工具、重新生成密钥、加密上传、在 GitHub 添加私钥、还要在脚本中增加解码的命令等等，总之非常麻烦，因此这里我不推介使用这种办法，想具体了解这种方法的，可以看这两篇博文：<a href="https://blog.jamespan.me/2015/11/01/ci-your-hexo-blog" rel="external nofollow noopener noreferrer" target="_blank">静态博客遭遇持续部署</a>  <a href="https://www.v2ex.com/t/170462" rel="external nofollow noopener noreferrer" target="_blank">使用 Travis CI 自动部署 Hexo</a></p><p>现在要讲的就是更推荐的另一种方案，使用 GitHub Access Token。</p><p>GitHub 允许你通过 <a href="https://github.com/settings/tokens" rel="external nofollow noopener noreferrer" target="_blank">设置页面</a> 添加一个个人访问令牌（Personal access tokens），使用 Assess Token 将有权限通过 https 访问 GitHub Api 操作自己的仓库。这个就是我们需要的。</p><p>现在我们来添加一个 token，先进入自己 GitHub 的 <a href="https://github.com/settings/tokens" rel="external nofollow noopener noreferrer" target="_blank">设置页面</a>，点击 <code>Personal access tokens</code> -&gt; <code>Generate new token</code> 按钮，新建一个 token。</p><p><img src="./PersonalAccessTokens%E7%95%8C%E9%9D%A2.png" alt="Personal access tokens 界面"></p><p>在权限设置中，我们只需要操作仓库，因此只需要打开仓库相关的权限就够了，权限开放应该满足最小原则，能少就少。设置好权限后点击生成按钮就会生成完毕并跳到 tokens 列表。</p><p><img src="./AccessToken%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE.png" alt="Access Token 权限设置"></p><p>现在就需要把刚生成的 Access Token 的值复制下来，<strong>注意，这个页面一旦刷新过了， token 就不能再显示了，没记住的只能重新生成一个了。</strong></p><p><img src="./%E5%A4%8D%E5%88%B6Token.png" alt="复制 Token"></p><p>嗯，现在 Access Token 也有了，能操作仓库了，那么，这个 token 应该放到哪里呢？</p><p>肯定不是放到代码里。。。</p><p>其实在 Travis-CI 的项目设置界面就有提供设置环境变量，我们就应该把 token 放到那里。</p><p>回到我们 Travis-CI 的 <a href="https://travis-ci.org/zthxxx/zthxxx.github.io/settings" rel="external nofollow noopener noreferrer" target="_blank">博客项目设置页面</a> 中，添加一个名为 <code>GIT_REPO_TOKEN</code> 的环境变量储存我们的 token，并记得要设置 <code>Display value in build log</code> 为 OFF，关闭变量的显示，否则等于公开了 token。</p><p><img src="./%E6%B7%BB%E5%8A%A0Token%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="添加 Token 环境变量"></p><p>现在在我们的执行脚本中就能使用 <code>$GIT_REPO_TOKEN</code> 访问 token 的环境变量了~</p><p>然后就是如何使用了。在 Hexo 部署前，我们应该把原来的部署仓库地址用带有 Access Token 的地址替换掉，于是在 <code>.travis.yml</code> 的 <code>hexo deploy</code> 命令前增加一条命令，或者是在之前提到的 <code>travis_env_init.sh</code> 初始化脚本中增加这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i<span class="string">''</span> <span class="string">"s~git@github.com:~https://<span class="variable">$&#123;GIT_REPO_TOKEN&#125;</span>@github.com/~"</span> _config.yml</span><br></pre></td></tr></table></figure><p>这样，在执行时，这条命令就能自动替换到有权限操作的 token 地址了，并且也不会泄露或者影响本地的原始配置文件。我一般习惯把这种初始化相关的命令都放到 <code>travis_env_init.sh</code> 文件中。</p><hr><h3 id="最后的效果"><a class="headerlink" href="#最后的效果"></a>最后的效果</h3><p>加了自动部署后，我们现在写完一篇博文后，就跟平时使用 Git 控制版本和推送一样，只需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br><span class="line">git commit</span><br><span class="line">git push origin writing</span><br></pre></td></tr></table></figure><p>push 之后，Travis-CI 就能自动帮我们构建博客并部署到 GitHub Pages 了，本地的操作就只是单纯的写作，跟 Hexo 本身完全不再发生关系，一切就跟我们平时写文章一样~</p><p>于是又可以愉快的玩耍啦~ （￣▽￣）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;额，本篇文章是&lt;a href=&quot;/posts/Hexo-Build-Static-Blog-Process/&quot;&gt;这篇博文&lt;/a&gt;的后续，当时本来打算写完上篇就挨着写的，结果嘛。。。跳票了一个多月~~今天还是捡回来重新把他写完。&lt;/p&gt;
&lt;p&gt;上次讲了第一步是用 Hexo 生
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="服务器" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/tags/Hexo/"/>
    
      <category term="博客" scheme="https://legacy-blog.zthxxx.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Git" scheme="https://legacy-blog.zthxxx.me/tags/Git/"/>
    
      <category term="Travis" scheme="https://legacy-blog.zthxxx.me/tags/Travis/"/>
    
  </entry>
  
  <entry>
    <title>Merry Christmas !</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Merry-Christmas-2016/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Merry-Christmas-2016/</id>
    <published>2016-12-24T20:51:24.000Z</published>
    <updated>2019-04-25T17:23:41.892Z</updated>
    
    <content type="html"><![CDATA[<p>哦哈哟~ 米娜桑~~  Merry Christmas !!!</p><p>话说今天的本站的页面也有给主题改版呢，圣诞专用哦~</p><p>纪念一下~</p><p>没啥好说的，就祝各位鸡年大吉吧！</p><p>蛤？你说还没到过年？ Naive，这个叫提前祝贺，而且圣诞节也算是个过年的节嘛！</p><p>每到圣诞我都会想到 <a href="http://www.pixiv.net/member.php?id=573302" rel="external nofollow noopener noreferrer" target="_blank">Cait</a> 笔下星奈的这几张图，真是超喜欢星奈和小鸠在一起！ (｡･ω･｡)</p><p><img src="./%E6%98%9F%E5%A5%88%E4%B8%8E%E5%B0%8F%E9%B8%A01.jpg" alt="星奈与小鸠1"></p><p><img src="./%E6%98%9F%E5%A5%88%E4%B8%8E%E5%B0%8F%E9%B8%A02.jpg" alt="星奈与小鸠2"></p><p><img src="./%E6%98%9F%E5%A5%88%E4%B8%8E%E5%B0%8F%E9%B8%A03.jpg" alt="星奈与小鸠3"></p><p><img src="./%E6%98%9F%E5%A5%88%E7%88%B1%E5%BF%83%E5%B7%A7%E5%85%8B%E5%8A%9B.jpg" alt="你是要想先吃巧克力呢"></p><p><img src="./%E6%98%9F%E5%A5%88%E5%9C%A3%E8%AF%9E%E8%BA%BA.jpg" alt="还是想先吃我呢？"></p><p>当然是都吃啦~~~~</p><p>吼吼吼~~我好兴奋的！我已经控制不住我的手了！！</p><p><img src="./%E5%9C%A3%E8%AF%9E%E5%87%B6.jpg" alt="圣诞凶"></p><p>晚安<sub>诸君</sub></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;哦哈哟~ 米娜桑~~  Merry Christmas !!!&lt;/p&gt;
&lt;p&gt;话说今天的本站的页面也有给主题改版呢，圣诞专用哦~&lt;/p&gt;
&lt;p&gt;纪念一下~&lt;/p&gt;
&lt;p&gt;没啥好说的，就祝各位鸡年大吉吧！&lt;/p&gt;
&lt;p&gt;蛤？你说还没到过年？ Naive，这个叫提前祝贺，而且圣
      
    
    </summary>
    
      <category term="Life" scheme="https://legacy-blog.zthxxx.me/categories/Life/"/>
    
    
      <category term="Christmas" scheme="https://legacy-blog.zthxxx.me/tags/Christmas/"/>
    
  </entry>
  
  <entry>
    <title>圣诞节专用改版样式纪念</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Christmas-Theme-Style-Anniversary-2016/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Christmas-Theme-Style-Anniversary-2016/</id>
    <published>2016-12-24T20:01:36.000Z</published>
    <updated>2019-04-25T17:23:41.892Z</updated>
    
    <content type="html"><![CDATA[<p>毕竟圣诞嘛~~ 应该庆祝一下是吧~ 这不，刚刚照着<a href="http://www.saber.love/%E5%9C%A3%E8%AF%9E%E8%8A%82%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C.html" rel="external nofollow noopener noreferrer" target="_blank">某老司机的样式</a>，也给自己的博客改了个圣诞主题~</p><p>头像戴着圣诞帽，飘着雪花，换了个星奈的圣诞装做背景图，加了《龙与虎》中大河唱的《ホーリーナイト》做背景音乐。</p><p>毕竟过了圣诞就会撤掉换回原来的样式。</p><p>嘛<sub>说是要纪念来着，毕竟圣诞样式只能挂一天，想想也没什么好办法，也就截图做个纪念啦</sub></p><a id="more"></a><p><img src="./%E5%9C%A3%E8%AF%9E%E8%8A%82%E6%A0%B7%E5%BC%8F%E7%BA%AA%E5%BF%B5.jpg" alt="圣诞专用样式纪念"></p><p>齐神这个嫌弃的表情强行带上这个帽子总感觉怪怪的，但是更加想笑了，我心里已经脑补出了齐神的吐槽了，蛤蛤蛤蛤。</p><p>Banner 里星奈这张图看着真的好有节日的感觉~</p><p>背景里是星奈和小鸠~~小鸠好萌呀</p><p>听着《ホーリーナイト》这首歌总是忍不住想起《龙与虎》中的场景，嗯，还是满满的感动。那晚上的圣诞夜，tiger 看上去是那么的孤独，如果不是龙儿过去陪她，很不敢去想象 tiger 独自一人在那个冰冷的房间守着一根微弱的蜡烛度过一个圣诞的晚上。龙儿走的时候，tiger 追出去那段哭得多么伤心裂肺，现在想到依然心痛不已。不过也正是那晚，tiger 才真正知道自己的内心，这样想就开心多了~~</p><p>啥？你说今天没有看到背景，没有雪花没有音乐？</p><p>。。。。。。</p><p>不好意思，这是里世界的样式  ╮(￣▽￣)╭</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;毕竟圣诞嘛~~ 应该庆祝一下是吧~ 这不，刚刚照着&lt;a href=&quot;http://www.saber.love/%E5%9C%A3%E8%AF%9E%E8%8A%82%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C.html&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;某老司机的样式&lt;/a&gt;，也给自己的博客改了个圣诞主题~&lt;/p&gt;
&lt;p&gt;头像戴着圣诞帽，飘着雪花，换了个星奈的圣诞装做背景图，加了《龙与虎》中大河唱的《ホーリーナイト》做背景音乐。&lt;/p&gt;
&lt;p&gt;毕竟过了圣诞就会撤掉换回原来的样式。&lt;/p&gt;
&lt;p&gt;嘛&lt;sub&gt;说是要纪念来着，毕竟圣诞样式只能挂一天，想想也没什么好办法，也就截图做个纪念啦&lt;/sub&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="https://legacy-blog.zthxxx.me/categories/Life/"/>
    
    
      <category term="Christmas" scheme="https://legacy-blog.zthxxx.me/tags/Christmas/"/>
    
  </entry>
  
  <entry>
    <title>提问的正确姿势</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Posture-for-Ask-Questions/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Posture-for-Ask-Questions/</id>
    <published>2016-12-21T12:30:16.000Z</published>
    <updated>2019-04-25T17:23:41.888Z</updated>
    
    <content type="html"><![CDATA[<p>嘛，最近总是碰到有人问一些奇奇怪怪的问题，完全不知道从何开始回答，不回答又怕人家误会成冷漠高冷之类了，真是伤脑筋呐~ ╮(￣▽￣)╭</p><p>看来有必要给大家普及一下各种提问的 <strong>姿♂势</strong> 了。</p><p>(  ○|￣|＿ <s>诶？不是说这个姿势啊，喂！你脱裤子干嘛</s>  )</p><p>咳咳，说正事啊，平时做任何事情，常常会遇到很多各种各样的问题，尤其我们工科学生，到处都有“实际与理论不符的情况”，所以大家平时也都习惯相互提问请教。</p><p>嘛，有问题就问当然是好事，总比明知有问题还一直憋着不说或者根本意识不到自己问题，自以为没有问题的强。</p><p>但是有时候问题问着问着就变得比较奇怪了，也很让人无奈。。。随意感受一下~</p><blockquote><ul><li><strong>你们把这个报错给我解决了</strong>。  ( 好的，大爷。Σ( ￣□￣||) )</li><li><strong>你看我这个程序怎么运行不了？</strong> ( 因为玄学 )</li><li><strong>你看我这几个线都接对了的，都检查没问题，它就是工作不了要短路？</strong> (哦，原来你线接对了啊，哦原来这里是故意不接的，哦原来这里是故意接反的啊，原来是我看错了啊)</li><li><strong>Java 要怎么写？</strong> (这个很简单啊，拿起笔，跟我来，j… a… v… a，好，写完啦)</li><li><strong>我想弄个卖东西的网站，像淘宝那种，该怎么建？</strong>  ( 蛤？淘宝。。。是哪种？？)</li><li><strong>写网页要怎么学？</strong> ( 这个问题问的好，这个要先…… 以下省略两百万字。)</li><li><strong>Java 好还是 C# 好？</strong>  ( 。。。。。。 <s>Java 小三，C# 碧池！PHP 是世界上最好的语言！</s> )</li><li><strong>学长，我们这个专业要怎么赚大钱？</strong>  ( ?!!   ヽ(`Д´)ﾉ (╯°口°)╯(┴—┴   我特喵的要是知道那我还会在这里？！ )</li></ul><p>。。。</p></blockquote><p>缓一口。</p><p>（TL;DR <a href="#%E6%8F%90%E9%97%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF">总结在文末</a>，下文主要是各种原因分析，懒得看分析的小伙伴可以直接跳去看<a href="#%E6%8F%90%E9%97%AE%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF">总结</a>）</p><p>上面说的只是一小部分，我们平时遇到的基本上都是这种，不回答又不好，想回答也不知道怎么回答，于是生活就处处充满了无奈。</p><p>首先，大家积极提问请教肯定是件好事，这种情况下提问的人肯定都是想<strong>寻求帮助</strong>，获取他人的帮助，但是考虑到这种情况的结果，<strong>这种提问方式并不能达到让别人帮忙的目的</strong>。本篇文章就是为了解决这种情况。</p><p>我们的目的是获得别人的帮助，那么从目的反推，别人需要有什么条件才能够帮住到你？</p><ol><li>有技术能力</li><li>有方便的时间</li><li>明白你说的意思</li><li>愿意帮你</li></ol><p>这四个是基本条件，同时达成，别人也不一定会帮你，但是任缺一个，别人肯定帮不到你。</p><p>有技术能力这点，在于平时你对那个人的观察和评价，还有你对技术难度的正确认知；而对技术难度的认知，又得来自于你对技术本身了解的多少。。。MD 好绕啊，不说了。</p><p>有时间这点也没什么好说的，人家本身正在忙没空的情况下，你总不应该强求人家非要先做你的事吧。</p><p>剩下的两点也就是关键了，<strong>如何让别人明白你的意思</strong> 与 <strong>如何让别人愿意帮你</strong>。</p><hr><p>先说较为简单点的后一个。</p><h3 id="为什么有人愿意帮你？"><a class="headerlink" href="#为什么有人愿意帮你？"></a>为什么有人愿意帮你？</h3><p>某某同学： 当然是出于好心啦。</p><p>没错，是出于好心。除非是和你在一条船上，不帮则死的那种合作，否则 <strong>没人有义务帮你</strong>，只是出于好心的善意，就算是朋友，也只是可能为了相互增加人情以后好办事，并不代表朋友就有义务帮你做事帮你解决问题。</p><p>所以，<strong>不要把别人的帮助当作理所当然。</strong></p><p>这里说的包括两种人，大爷和你大爷。前一种人请人帮忙就跟发号施令一样随意指使；后一种人是一旦别人稍微有点没照顾到，就会满脸怨愤的“你明明会的，你凭什么不做”的表情（自行脑补，我是见得多了）。</p><p>这样随意践踏别人的善意的行为，只会让他人不再对你露出善意。</p><h4 id="大部分很简单的小问题都是可以直接搜索到解决办法的-这样的问题就不要再麻烦别人了"><a class="headerlink" href="#大部分很简单的小问题都是可以直接搜索到解决办法的-这样的问题就不要再麻烦别人了"></a><strong>大部分很简单的小问题都是可以直接搜索到解决办法的，这样的问题就不要再麻烦别人了！</strong></h4><p><img src="/images/%E4%BD%A0%E4%B8%8D%E4%BC%9Agoogle%E5%90%97-%E8%B5%AB%E6%96%AF%E7%BC%87%E9%9B%85.png" alt="你不会自己 Google 吗？"></p><p>这里就不讨论“为何要感谢别人的帮助”这种废话了（虽然确实有人不懂这个），总之，这里的结论是：</p><h4 id="放低你的姿态-感恩别人的帮助-不要让人寒了心"><a class="headerlink" href="#放低你的姿态-感恩别人的帮助-不要让人寒了心"></a><strong>放低你的姿态，感恩别人的帮助，不要让人寒了心。</strong></h4><p>顺便说一句，<strong>放低姿态，不等于就把别人捧到天上去，不等于就把自己摆在乞讨者的位置。</strong></p><p>经常有人在 QQ 群啊、微信群啊、各种论坛等公共社区到处乱吼，“啊，救命啊，我的代码 xxxx ”，“跪求 xxxx 办法”，“有没有 大佬 / 大牛 / 大神 能帮我做 xxxx”。</p><p>尊严是自己争取换来的，不是跪着求别人给的。社区本身是一个对等的地方，大家都是用对等的身份在交谈，没有说别人的身份就一定比你尊贵，你也没有必要把自己看得多么低贱。</p><p>“大牛”、“大神”一类的称呼也是完全不合适的，假如群里有人知道这个问题并且他回答了，那岂不是他在公开场合承认自己是某某大牛啦，然后呢？等着被撕逼？你当这是网红训练群啊！</p><p>并且这类交流的建立靠的就是比较对等的身份，假如你真的就很低贱，对方真的就有那么高贵牛逼，那你本身也失去了和对方交流的资格，因为身份的差异悬殊太大，对话完全达不到一个层级上。</p><p>就像硬件层的东西不能拿到软件层上，链路层的东西不能直接接到应用层上。一切应该是以相对对等，没有巨大信息跨度为基础。</p><p>既然上面说了大家帮忙靠的是善意，那么什么样的人更容易获得别人的善意呢？是平时每天都在浪、遇到问题就知道找人要的伸手党；还是时刻都刻苦努力、却没找到要点而无法解决问题的人呢？</p><p>很明显是后者，我们都拒绝伸手党，都喜欢刻苦努力的人。因此，当你提问时不小心说出自己经过的努力后，会有更多的好心人来帮助你。</p><p>我们想看到的，也是你到底有多想解决这个问题，我们想看到的，是你为这个问题自己努力过思考过。看到问问题的人这么努力，我们才会想，这样我如果帮助了你，我会觉得自己花时间帮忙是值得的（其实我觉得本质是牵涉到相互贡献与潜在贡献的问题，有自我努力，只寻求他人指点并希望自己亲自完成问题的人，比起直接伸手要他人代替自身做完事情的人，更容易获得别人愿意帮助的心情）。所以，这里的结论是：</p><h4 id="附上你的努力-展现你的思考"><a class="headerlink" href="#附上你的努力-展现你的思考"></a><strong>附上你的努力，展现你的思考。</strong></h4><p>现在来说说上文里剩下的另一个关键词。</p><h3 id="别人为什么不明白你的意思？"><a class="headerlink" href="#别人为什么不明白你的意思？"></a>别人为什么不明白你的意思？</h3><p>某某同学： 当然是你说的不够清晰啦~</p><p>这时候我们通常就简单的归结为表述不够清晰、你说的我不听不懂，那么，具体的原因呢？</p><ul><li>对话不在一个频道。你说东，他说西，自然无法有效交流。</li><li>内容情况复杂，简单几句话无法描述清楚，容易让人产生误解。</li><li>说话逻辑混乱，不易于理解。</li></ul><p>简单归纳了下原因，那么现在再针对这些原因，想些解决的办法~</p><p>要保证大家在同一个频道上，首先是要有定义确定这个频道，对我们来说也就是先要 <strong>描述清问题所处的完整背景环境、具体场景</strong>，详细的列举问题发生时运行的环境（配置、系统、硬件等），如果环境描述不完整，也可能就会漏掉了某些关键的引发点；<strong>提供可复现问题的步骤</strong>，以便别人可以同步你的场景直接调试问题寻找解决办法。</p><p>如果是觉得自己语言能力不强，表达能力十分有限，找不到什么好的形容词，那么就应该避开自己的劣势，尽量少用一些形容词，多去描述客观事实，应该 <strong>按时间顺序描述你操作的过程、采取的措施、反应的现象</strong>，说客观的东西，而不是主观的东西。</p><p>提供的信息必须精准有效，即使内容情况再复杂，也应该减小到最小出错环境，或者<strong>尝试分解问题</strong>，很多大问题都能分解为数个小问题。相对于大篇幅的问题，大部分人更愿意回答看起来小巧问题，因为这给人不会占用她们太多时间的感觉。</p><p>如果你问的是代码的话，顺便说一句：</p><blockquote><p><strong>Talk is cheap. Show me the code.</strong></p></blockquote><p>既然问程序，那就应该 <strong>把代码附上</strong>。喂，你把代码粘到 QQ 群里干嘛！附上代码的目的是方便别人阅读帮你寻找问题、方便别人调试代码帮你寻找方法，所以不要再干直接把代码粘到 QQ 里和粘到论坛回复框里（指直接回复一串代码而不通过论坛提供的代码框）的蠢事了！</p><p>所以我们给别人看的代码必须有以下几点要求：</p><ul><li>方便阅读  （排版缩进美观，行号正确，关键字有高亮。）</li><li>方便运行  （难道我还要在自己电脑上给你配个环境？）</li><li>方便修改  （给你找问题的，不能修改那你告诉我怎么调试？）</li></ul><p>前端代码很方便，<a href="http://codepen.io/" rel="external nofollow noopener noreferrer" target="_blank">codepen</a>  |  <a href="http://jsbin.com/" rel="external nofollow noopener noreferrer" target="_blank">jsbin</a>  |  <a href="http://jsfiddle.net/" rel="external nofollow noopener noreferrer" target="_blank">JSFiddle</a>  等 <strong>在线代码平台</strong> 都是很好的展示地方。</p><p>对于不能在线运行的代码，简单的，可以通过 <strong>GitHub</strong> 来放出工程，复杂的，直接放出能跑的 <strong>Docker Image</strong>。</p><p><strong>不要直接发文件!</strong></p><p>为了理清说话逻辑，我们在提问之前应该先 <strong>整理好自己的思路</strong>，通过合理的逻辑顺序展开问题的发展；既然是要让别人听懂，那么<strong>说话的时候就该站在对方的角度思考</strong>，想想不了解情况时，如果我听到别人这样讲，能听懂吗？如果不能，那么还差哪里没有表述清楚？经过这样说服自己能够听懂后，再把刚才的话阐述给对方，效果会好很多，至少不再是一种折磨。</p><p>现在再来谈谈怎样理清自己的思路。</p><p>我的办法是目的驱动逻辑，就是根据目的反过来思考怎么讲。这里提供一个我的思考模板：</p><blockquote><ol><li><strong>想要达成什么目的或者效果？</strong></li><li><strong>一步步的操作步骤过程是怎样的？</strong></li><li><strong>遇到了什么困难或者产生了什么问题？</strong></li><li><strong>期望获取什么样的帮助？</strong></li></ol></blockquote><p>根据上面这些提示要思考问题，通常就能将问题讲清楚了。</p><p>在客观事实情况描述清楚之后，可以 <strong>附上自己的猜测</strong>，并且我们也更鼓励提问者提问时附上合理的自己的猜想，因为这也能表明你有自己的思考而不是单纯的伸手党（<a href="#%E9%99%84%E4%B8%8A%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B-%E5%B1%95%E7%8E%B0%E4%BD%A0%E7%9A%84%E6%80%9D%E8%80%83">参见上文</a>前一段落）。</p><p>比如，不要问“为什么会 xxx？”，而是问“xxx 的原因是不是因为 xxxx？”；</p><p>不要问 “这个是什么？”，而是问“这个是用来 xxx 的吗？”；</p><p>不要问“井盖为什么是圆的？”，而是问“圆型的井盖比起方形的是不是有哪些好处？”；</p><p>注意，这些猜想得是合理推测的，不要天马行空的乱说，那样只会让别人觉得你是在说着好玩而不是在认真提问。</p><hr><p>最后来总结下~</p><h3 id="提问的正确姿势"><a class="headerlink" href="#提问的正确姿势"></a>提问的正确姿势</h3><p>首先 <strong>思考分析问题，再搜索方案尝试自我解决</strong>，很多小问题到这里就够了。实在不能解决再去寻求指点。</p><blockquote><ol><li><strong>找到合适的地点和对象</strong></li></ol><ul><li>有技术</li><li>有时间</li><li>姿态对等</li></ul><ol start="2"><li><strong>清晰准确的表述问题背景</strong></li></ol><ul><li>大环境 （配置、系统、硬件等）</li><li>运行环境 （语言、库、版本）</li></ul><ol start="3"><li><strong>描述需要达到的目的和效果</strong></li></ol><ul><li>客观，不要加自我感情</li><li>详细、准确、有逻辑</li></ul><ol start="4"><li><strong>说明自身操作的过程</strong></li></ol><ul><li>操作步骤</li><li>附上代码 - 在线代码平台</li><li>项目工程 - GitHub</li><li>可运行环境 - Docker</li></ul><ol start="5"><li><strong>表明所遇到的困难和问题</strong></li></ol><ul><li>客观表达，不要加自我感情</li><li>任未解决的问题</li><li>对问题的猜测</li></ul><ol start="6"><li><strong>展示你的努力</strong></li></ol><ul><li>采取过的措施</li><li>付出的行动</li></ul><ol start="7"><li><strong>阐述期望获取的帮助和指点</strong></li></ol><ul><li>注意是指点，不要想着别人直接帮你完成任务</li></ul><ol start="8"><li><strong>简单表达谢意</strong></li></ol><ul><li>礼貌将会增加你得到有用答案的机会</li><li>简单的感谢就好，别人的帮助是出于善意而不是为了你的感谢</li></ul><ol start="9"><li><strong>做好笔记</strong></li></ol><ul><li>你可能还会遇到</li></ul><ol start="10"><li><strong>帮助他人</strong></li></ol><ul><li>传达善意，回馈帮助过你的社区</li></ul></blockquote><p><strong>【参考资料】</strong></p><p>其实这几篇文章我在开头就想推介给大家，但是我知道太长了你们肯定懒得看~</p><p>推介以下文章从上到下依次阅读。</p><p><a href="http://zhangwenli.com/blog/2016/02/19/ask-for-technical-help/" rel="external nofollow noopener noreferrer" target="_blank">代码江湖救急（上）</a></p><p><a href="http://zhangwenli.com/blog/2016/02/21/ask-for-technical-help/" rel="external nofollow noopener noreferrer" target="_blank">代码江湖救急（下）</a></p><p><a href="https://github.com/seajs/seajs/issues/545" rel="external nofollow noopener noreferrer" target="_blank">如何向开源社区提问题</a></p><p><a href="http://www.dianbo.org/9238/stone/tiwendezhihui.htm" rel="external nofollow noopener noreferrer" target="_blank">提问的智慧</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嘛，最近总是碰到有人问一些奇奇怪怪的问题，完全不知道从何开始回答，不回答又怕人家误会成冷漠高冷之类了，真是伤脑筋呐~ ╮(￣▽￣)╭&lt;/p&gt;
&lt;p&gt;看来有必要给大家普及一下各种提问的 &lt;strong&gt;姿♂势&lt;/strong&gt; 了。&lt;/p&gt;
&lt;p&gt;(  ○|￣|＿ &lt;s&gt;诶？
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="学习姿势" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E5%AD%A6%E4%B9%A0%E5%A7%BF%E5%8A%BF/"/>
    
    
      <category term="学习姿势" scheme="https://legacy-blog.zthxxx.me/tags/%E5%AD%A6%E4%B9%A0%E5%A7%BF%E5%8A%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 增加可嵌入页面作博文的 layout</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Hexo-Add-Layout-for-Embed-Page/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Hexo-Add-Layout-for-Embed-Page/</id>
    <published>2016-11-04T17:18:05.000Z</published>
    <updated>2019-04-25T17:23:41.888Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个需求，想要挂载一个已有的页面到 hexo 博客，比如打开一篇博客，里面是显示的挂的淘宝的主页。</p><p>主要是最近要做一些 H5 页面，想找个空间挂载，又暂时不想另外找云服务器做后台，于是就想在我这个已有的博客嵌入这些 H5 页面来显示，每个页面通过一篇博文作载体，博文就是一个 iframe，用来显示每个 H5 页面。</p><p>于是做了一个 embed 的 layout 专门作为嵌入页面的布局，现已添加到我自己修改的 <a href="https://github.com/zthxxx/hexo-theme-icarus" rel="external nofollow noopener noreferrer" target="_blank"><strong>icarus</strong></a> 主题中。</p><h3 id="使用方法"><a class="headerlink" href="#使用方法"></a>使用方法</h3><p>配置主题为我修改的 icarus 后，embed 布局已经在主题里了。</p><p>使用 embed layout 前先确保已在主站配置文件中打开资源文件夹选项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /_config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>然后在主站配置文件中添加一些后面需要用到的忽略参数，用来忽略对所有要嵌入页面的渲染：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /_config.yml</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'_posts/*/embed_page/**'</span></span><br></pre></td></tr></table></figure><p>在博客更目录下的 <code>scaffolds/</code> 目录下，新建一个模板文件 <code>embed.md</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /scaffolds/embed.md</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">embed</span></span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="attr">iframe_url:</span> </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>准备好要嵌入的页面，然后新建一篇博文，注意使用 embed 的模板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new embed <span class="string">"HTML 页面嵌入测试"</span></span><br></pre></td></tr></table></figure><p>建立博文后，会在 <code>/source/_posts</code> 文件夹中多一个 md 文件 <code>HTML-页面嵌入测试.md</code>、一个对应名字的文件夹 <code>/source/_posts/HTML-页面嵌入测试</code>，这个文件夹就是资源文件夹。</p><p>在资源文件夹（本文例子就是 <code>HTML-页面嵌入测试</code>）中新建一个 <code>embed_page</code> 文件夹（名字是我固定的，不能修改），把要嵌入页面的 html 文件及所以相关资源文件都放在这个 <code>embed_page</code> 文件夹下，把入口 html 文件名字修改为 <code>index.html</code>。</p><p>到这里其实已经完成了所有步骤了，打开 hexo 服务器就可以在本地预览了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g</span><br><span class="line"><span class="comment"># http://localhost:4000/</span></span><br></pre></td></tr></table></figure><p>打开浏览器访问 hexo 本地页面，你会看到在主页看到新建了一篇博文，标题是 “HTML 页面嵌入测试”，没有内容，点进博文查看，就没有左边的博主信息和右边的侧边栏，只保留了博客的大框架，留了顶部的导航栏，下边整块区域都是放嵌入的页面。由于用的是 <code>iframe</code> 标签，所以两个页面样式等，互不影响。</p><p>下面给两个我刚刚操作的截图示例（点击可查看大图）：</p><p><img src="./%E6%B5%8B%E8%AF%95%E9%A6%96%E9%A1%B5%E6%88%AA%E5%9B%BE.png" alt="测试首页截图"></p><p><img src="./%E6%B5%8B%E8%AF%95%E5%8D%9A%E6%96%87%E5%B5%8C%E5%85%A5%E6%88%AA%E5%9B%BE.png" alt="测试博文嵌入截图"></p><p>在用 embed 模板新建的博文 MD 文件中，文件内容一般为空（就算有内容也没用），<code>front-matter</code> 中有两个可选键值对可以配置：<code>description</code> , <code>iframe_url</code></p><p><code>description</code> 本是对文章的描述，用以给搜索引擎看的，这里用作对摘要的代替而显示到主页上，这个键会被做 json 读取，因此描述键值如果是字符串则需要用引号括起来。</p><p><code>iframe_url</code> 是配置博文中嵌入的 <code>iframe</code> 标签的地址，因此博文中嵌入的页面也支持配置为网上的页面，此项为空时默认使用相对与博文的 <code>'./embed_page/'</code> 地址，因此才有本文开头讲的那些配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近有个需求，想要挂载一个已有的页面到 hexo 博客，比如打开一篇博客，里面是显示的挂的淘宝的主页。&lt;/p&gt;
&lt;p&gt;主要是最近要做一些 H5 页面，想找个空间挂载，又暂时不想另外找云服务器做后台，于是就想在我这个已有的博客嵌入这些 H5 页面来显示，每个页面通过一篇博文作
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="服务器" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/tags/Hexo/"/>
    
      <category term="博客" scheme="https://legacy-blog.zthxxx.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>H5 canvas 3D 贪吃蛇小游戏</title>
    <link href="https://legacy-blog.zthxxx.me/posts/H5-3D-Snake-Game/"/>
    <id>https://legacy-blog.zthxxx.me/posts/H5-3D-Snake-Game/</id>
    <published>2016-11-04T13:38:28.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <summary type="html">
    
      一个 3D 贪吃蛇的小例子，鼠标点击控制转弯，死亡后双击重新开始，鼠标拖动旋转屏幕，wasd 键漫游世界~~ 我知道大家可以写得更好~嗯，要改进的地方有很多~~欢迎评论！
    
    </summary>
    
      <category term="程序语言" scheme="https://legacy-blog.zthxxx.me/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
      <category term="JavaScript" scheme="https://legacy-blog.zthxxx.me/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/JavaScript/"/>
    
    
      <category term="H5" scheme="https://legacy-blog.zthxxx.me/tags/H5/"/>
    
      <category term="JavaScript" scheme="https://legacy-blog.zthxxx.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 自动给博文添加 ReadMore</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Hexo-Automatic-Add-ReadMore/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Hexo-Automatic-Add-ReadMore/</id>
    <published>2016-11-03T13:02:11.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <content type="html"><![CDATA[<p>最近写了几篇博文，放到博客时总是要自己添加一个 <code>&lt;!--more--&gt;</code> 的标记才会在主页显示摘要，否则就整个一篇不管多长都直接给你放在主页，想看下面的几篇博文就要滑滑滑，滑半天才能看到后面几篇博文，既不符合设计原则，也不美观不方便，所以 <strong>真的很不爽</strong>！</p><p>而且在文中插入一个 <code>&lt;!--more--&gt;</code> 的标记也污染了本来干净的文章，作为一个强迫症，对这个简直不能忍！</p><p>按照逻辑来说，我们所关注的就是写文章，而摘要应该是根据文章内容通过 tf-idf 等一系列摘要算法生成的，再不济也应该是直接截取文章开头一段文字作为摘要嘛，总之是应该自动生成的，而且不应该修改 MD 源文件。</p><p>这里我们暂且不说算法什么的，先从低级一点的截取摘要的实现入手，（至于摘要算法生成，可以先看 <a href="http://cnodejs.org/topic/5199b18563e9f8a5427163f3" rel="external nofollow noopener noreferrer" target="_blank">这里</a>）</p><p>根据需求，我们去 google 一下，发现有两篇相关文章可以先阅读一下：</p><p><a href="http://www.jianshu.com/p/78c218f9d1e7" rel="external nofollow noopener noreferrer" target="_blank">Hexo-设置阅读全文 - violinlin</a></p><p><a href="https://twiceyuan.com/2014/05/25/hexo%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0readmore%E6%A0%87%E8%AE%B0/" rel="external nofollow noopener noreferrer" target="_blank">Hexo自动添加ReadMore标记 - twiceYuan</a></p><p>这两篇文章讲的都很简单，但是因为实际情况不同，我还是用不了。比如第一篇中说在配置文件中配置就可以，然而人家用的 <a href="http://theme-next.iissnan.com/getting-started.html" rel="external nofollow noopener noreferrer" target="_blank">Next</a> 的主题，而我用的 <a href="https://github.com/ppoffice/hexo-theme-icarus" rel="external nofollow noopener noreferrer" target="_blank">icarus</a> 并不支持；并且我也因此去下了 Next 的主题看了它摘要部分的代码，实现方式也很粗暴直接，效果并不是很好。</p><p>由于主题原生不支持，因此我们只能打算跟着第二篇的思路直接改主题代码了。</p><p>第二篇的实现办法和 Next 的实现具体办法都一样，都是通过 <code>post.content.substring(start, end)</code> 方法截取文章开头的文字，只是 Next 粗暴的根据字数截取，而第二篇文章是固定找到第二行结尾来截取。</p><p>就我个人而言，以行的方式截取比以字数的方式截取的结果，对摘要完整性要友好的多。</p><p>总结一下以上两者的文章，再整理下我们的需求，最后我们得到几点初步的要求：</p><ol><li>能在主题配置文件中配置是否开启自动摘要</li><li>摘要以行为单位自动从开头截取</li><li>能配置固定截取的行数</li></ol><p>根据这几项需求，我们先来一步步实现。</p><p>首先是找到要修改的代码的位置，因为我们这里主要是对文章显示时的修改，相关代码肯定是在有关文章内容显示的文件内，对 hexo 来说，通常是 article.ejs  post.ejs 等类似名字的文件，他们的特点就是都会在主页显示文章和单独访问博文时用到。</p><p>我用的是 <strong>icarus</strong> 的主题，这里就是 <code>/themes/icaurs/layout/common/article.ejs</code> 这个文件。</p><p>如果对 hexo 与其主题结构不了解的，可以先看这篇讲解： <a href="http://www.ituring.com.cn/article/199294" rel="external nofollow noopener noreferrer" target="_blank">Hexo -（三）高级进阶 - 图灵社区</a></p><p>打开 <code>article.ejs</code>，找到与摘要相关的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-entry"</span> <span class="attr">itemprop</span>=<span class="string">"articleBody"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">index</span> &amp;&amp; <span class="attr">post.excerpt</span>) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.excerpt</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"article-more-link"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(post.path) %&gt;#more"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">article.more</span>') %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (!<span class="attr">index</span> &amp;&amp; <span class="attr">post.toc</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"toc"</span> <span class="attr">class</span>=<span class="string">"toc-article"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"toc-title"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">article.catalogue</span>') %&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%-</span> <span class="attr">toc</span>(<span class="attr">post.content</span>) %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.content</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Hexo 采用 <a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank"><strong>Nodejs</strong></a> 开发，icarus 主题用的是 <a href="http://www.open-open.com/lib/view/open1452512705683.html" rel="external nofollow noopener noreferrer" target="_blank"><strong>EJS</strong></a> 模板，对这两个不熟的请自戳前面链接教程。</p><p>这里简单讲一下各变量含义，这各文件是在每篇文章生成时被调用的，</p><p><code>index</code> 是指现在是否在首页的标志</p><p><code>post</code> 指这篇文章</p><p><code>post.excerpt</code> 指文章原始摘要内容，既 <code>&lt;!--more--&gt;</code>之前的内容。</p><p><code>url_for()</code> 返回一个 root 路径的 url，不带域名</p><p><code>post.path</code> 指文章的网址，不含 root 目录</p><p><code>post.toc</code> 指文章目录显示是否开了</p><p><code>toc()</code> 解析文本，生成目录，既 h1-h6 的列表。</p><p><code>post.content</code> 指文章全部内容</p><p>现在再看，<code>article.ejs</code> 里代码的逻辑就很清除了，在遍历文章的时候 <strong>先判断当前页面是否在首页，如果在首页并且这篇文档有摘要</strong>，那就只显示摘要并显示一个 ReadMore；<strong>否则</strong> 就显示全文（其中有一个“判断不在首页并且文章配置了开启目录就显示目录”与我们现在讨论的 readmore 无关所以暂且不管）。</p><p>按照我们的思路，应该就是在上面“否则”后面加上自动截取前 n 行作为摘要并显示 ReadMore。</p><p>一步步来，首先我们需要一个可以配置的开关，用来配置是否启用自动截取生成摘要的功能，还需要一个可以配置的变量，用来配置固定截取几行。</p><p>文章显示是主题干的事，这两个配置也是主题相关的，因此我们打开 <strong>主题配置文件</strong>，添加几个键值对并保存：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Excerpt </span></span><br><span class="line"><span class="comment">## Auto creat excerpt with not &lt;!--more--&gt;</span></span><br><span class="line"><span class="comment">## Enable will truncate auto_excerpt.lines rows in post head to replace excerpt.</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    lines:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>回到 <code>article.ejs</code> 里，梳理一下我们的思路，整理一下一共有哪些显示摘要，哪些不显示的情况：</p><ul><li>不显示 ReadMore 的情况<ol><li>不在首页</li><li>在首页，无摘要，关闭自动截取</li><li>在首页，无摘要，使能自动截取，文章没有足够的长度</li></ol></li><li>显示 ReadMore 的情况<ol><li>在首页，有摘要</li><li>在首页，无摘要，使能自动截取，文章足够长</li></ol></li></ul><p>将以上情况整理成判断逻辑，再把目录显示加上，列出一个伪代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">是否显示全文 = true</span><br><span class="line"><span class="keyword">if</span> 在首页:</span><br><span class="line">    <span class="keyword">if</span> 有摘要:</span><br><span class="line">        是否显示全文 = false</span><br><span class="line">        显示摘要</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> 主题.自动截取.使能:</span><br><span class="line">        截取前 n 行作为摘要</span><br><span class="line">        <span class="keyword">if</span> 文章长度足够:</span><br><span class="line">            是否显示全文 = false</span><br><span class="line">            显示截取的结果</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> 文章配置显示目录:</span><br><span class="line">        显示目录</span><br><span class="line"><span class="keyword">if</span> 是否显示全文:</span><br><span class="line">    显示全文</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    显示 ReadMore</span><br></pre></td></tr></table></figure><p>这样来看逻辑很清晰了吧。</p><p>然后就是具体实现过程中我遇到的两个问题：</p><ol><li><p>ReadMore 总是可能被当成文章文字的一部分而被改变样式</p><p>原因是 icarus 原本就是把 ReadMore 用 p 标签放在文章中间的，如果 ReadMore 刚好实在一个列表间或者一块代码间，那显示就会很奇怪了。我改成了把整个摘要或者说文章放在一个 div 中，再把 Readmore 放在后面的另一块 div 中，这样 ReadMore 就与内容无关了。</p></li><li><p>如何读取行数</p><p>前面提到的两个自动截取摘要的文章，一篇 NexT 是自动截取字数，另一篇是固定截取两行，</p><p>而我想的办法是通过多次调用 string.indexOf(str, start_position) 方法，每次改变起始位置来获取下一次的位置，有一次获取不到位置就说明文章还没有那么多行的长度。</p><p>然后再用 string.substring(start, end) 方法，截取到获取的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">var</span> br_position = <span class="number">0</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">for</span> (<span class="keyword">var</span> br_count = <span class="number">0</span>; br_count &lt; theme.auto_excerpt.lines; br_count++) &#123; %&gt;</span><br><span class="line">    &lt;% br_position = post.content.indexOf(<span class="string">'\n'</span>,br_position + <span class="number">1</span>) %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span>(br_position &lt; <span class="number">0</span>) &#123; <span class="keyword">break</span> &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(br_position &gt; <span class="number">0</span>) &#123; %&gt;</span><br><span class="line">    &lt;p&gt;&lt;%- post.content.substring(0, br_position + 1) %&gt;&lt;p&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ol><p>现在开始按照伪代码的逻辑编写 ejs 了，最后的工作就是把原来 <code>article.ejs</code> 的摘要相关代码（在本文开头提到的）全部替换成我们写的自动截取摘要的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"article-entry"</span> itemprop=<span class="string">"articleBody"</span>&gt;</span><br><span class="line">&lt;% <span class="keyword">var</span> show_all_content = <span class="literal">true</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (index) &#123; %&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (post.excerpt) &#123; %&gt;</span><br><span class="line">        &lt;% show_all_content = <span class="literal">false</span> %&gt;</span><br><span class="line">        &lt;p&gt;<span class="xml"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">post.excerpt</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.auto_excerpt.enable) &#123; %&gt;</span><br><span class="line">        &lt;% <span class="keyword">var</span> br_position = <span class="number">0</span> %&gt;</span><br><span class="line">        &lt;% <span class="keyword">for</span> (<span class="keyword">var</span> br_count = <span class="number">0</span>; br_count &lt; theme.auto_excerpt.lines; br_count++) &#123; %&gt;</span><br><span class="line">            &lt;% br_position = post.content.indexOf(<span class="string">'\n'</span>,br_position + <span class="number">1</span>) %&gt;</span><br><span class="line">            &lt;% <span class="keyword">if</span>(br_position &lt; <span class="number">0</span>) &#123; <span class="keyword">break</span> &#125; %&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        &lt;% <span class="keyword">if</span>(br_position &gt; <span class="number">0</span>) &#123; %&gt;</span><br><span class="line">            &lt;% show_all_content = <span class="literal">false</span> %&gt;</span><br><span class="line">            &lt;p&gt;&lt;%- post.content.substring(0, br_position + 1) %&gt;&lt;p&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;% if (post.toc) &#123; %&gt;</span><br><span class="line">        &lt;div id="toc" class="toc-article"&gt;</span><br><span class="line">        &lt;strong class="toc-title"&gt;&lt;%= __('article.catalogue') %&gt;&lt;/strong&gt;</span><br><span class="line">            &lt;%- toc(post.content) %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&lt;% if (show_all_content) &#123; %&gt;</span><br><span class="line">    &lt;%- post.content %&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>   </span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"article-more-link"</span>&gt;</span><br><span class="line">        &lt;a href=<span class="string">"&lt;%- url_for(post.path) %&gt;#more"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">article.more</span>') %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>现在你可以把原来文章中的 <code>&lt;!--more--&gt;</code> 删了，以后也不用再写了！</p><p>最后放上我改好的 icarus 的 <a href="https://github.com/zthxxx/zthxxx.github.io/blob/writing/themes/icarus/layout/common/article.ejs" rel="external nofollow noopener noreferrer" target="_blank"><code>article.ejs</code></a> 文件。</p><p>好了，强迫症结束！ ( •̀ ω •́ )y</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近写了几篇博文，放到博客时总是要自己添加一个 &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; 的标记才会在主页显示摘要，否则就整个一篇不管多长都直接给你放在主页，想看下面的几篇博文就要滑滑滑，滑半天才能看到后面几篇博文，既不符合设计原则，也不美观不方便，所以
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="服务器" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/tags/Hexo/"/>
    
      <category term="博客" scheme="https://legacy-blog.zthxxx.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo markdown 渲染测试</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Hexo-Markdown-Render-Test/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Hexo-Markdown-Render-Test/</id>
    <published>2016-11-03T08:31:08.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 使用 <a href="https://github.com/hexojs/hexo-renderer-marked" rel="external nofollow noopener noreferrer" target="_blank">marked</a> 作为默认的 markdown 渲染器，由于我所使用的主题被我自己修改过一些样式，因此需要测试一下对 markdown 各个标记文本的渲染是否出了偏差。</p><p>下面使用 <a href="https://www.zybuluo.com/mdeditor" rel="external nofollow noopener noreferrer" target="_blank">Cmd Markdown</a> 和 <a href="https://maxiang.io/" rel="external nofollow noopener noreferrer" target="_blank">马克飞象</a> 两者官方的示例文档作为测试，依次来查看自定义的 css 样式对博文内容的渲染有哪些问题。</p><p>已知问题：</p><ul><li><s>不支持 [TOC]</s>（Hexo 对文章 yaml 中 toc 项可开启支持目录）</li><li><s>不支持复选框（待办事项） - [ x ]</s>（已由<a href="https://github.com/zthxxx/hexo-theme-icarus/commit/d9cc7a5d9ca9711f3ecc8872a19fb5b20705f2aa" rel="external nofollow noopener noreferrer" target="_blank">前端 Hack</a> 支持）</li><li><s>不支持 LaTex 公式</s>（已由 hexo-renderer-mathjax 插件支持）</li><li>不支持流程图、时序图、甘特图等</li></ul><h1>！以下为测试内容！</h1><hr><h2 id="欢迎使用-cmd-markdown-编辑阅读器"><a class="headerlink" href="#欢迎使用-cmd-markdown-编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h2><hr><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3 id="windows-mac-linux-全平台客户端"><a class="headerlink" href="#windows-mac-linux-全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" rel="external nofollow noopener noreferrer" target="_blank">Windows/Mac/Linux 全平台客户端</a></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><hr><h2 id="什么是-markdown"><a class="headerlink" href="#什么是-markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3 id="1-制作一份待办事宜-todo-列表"><a class="headerlink" href="#1-制作一份待办事宜-todo-列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-%E5%BE%85%E5%8A%9E%E4%BA%8B%E5%AE%9C-todo-%E5%88%97%E8%A1%A8" rel="external nofollow noopener noreferrer" target="_blank">Todo 列表</a></h3><ul><li>[ ] 支持以 PDF 格式导出文稿</li><li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li>[x] 新增 Todo 列表功能</li><li>[x] 修复 LaTex 公式渲染问题</li><li>[x] 新增 LaTex 公式编号功能</li></ul><h3 id="2-书写一个质能守恒公式"><a class="headerlink" href="#2-书写一个质能守恒公式"></a>2. 书写一个质能守恒公式<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h3><p>$$E=mc^2$$</p><h3 id="3-高亮一段代码"><a class="headerlink" href="#3-高亮一段代码"></a>3. 高亮一段代码<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3 id="4-高效绘制-流程图"><a class="headerlink" href="#4-高效绘制-流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-%E6%B5%81%E7%A8%8B%E5%9B%BE" rel="external nofollow noopener noreferrer" target="_blank">流程图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><h3 id="5-高效绘制-序列图"><a class="headerlink" href="#5-高效绘制-序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-%E5%BA%8F%E5%88%97%E5%9B%BE" rel="external nofollow noopener noreferrer" target="_blank">序列图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><h3 id="6-高效绘制-甘特图"><a class="headerlink" href="#6-高效绘制-甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-%E7%94%98%E7%89%B9%E5%9B%BE" rel="external nofollow noopener noreferrer" target="_blank">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h3 id="7-绘制表格"><a class="headerlink" href="#7-绘制表格"></a>7. 绘制表格</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">$1</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="8-更详细语法说明"><a class="headerlink" href="#8-更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" rel="external nofollow noopener noreferrer" target="_blank">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C" rel="external nofollow noopener noreferrer" target="_blank">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2 id="什么是-cmd-markdown"><a class="headerlink" href="#什么是-cmd-markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3 id="1-实时同步预览"><a class="headerlink" href="#1-实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3 id="2-编辑工具栏"><a class="headerlink" href="#2-编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p><h3 id="3-编辑模式"><a class="headerlink" href="#3-编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3 id="4-实时的云端文稿"><a class="headerlink" href="#4-实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3 id="5-离线模式"><a class="headerlink" href="#5-离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3 id="6-管理工具栏"><a class="headerlink" href="#6-管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p><p>通过管理工具栏可以：</p><p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p><h3 id="7-阅读工具栏"><a class="headerlink" href="#7-阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p><h3 id="8-阅读模式"><a class="headerlink" href="#8-阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3 id="9-标签-分类和搜索"><a class="headerlink" href="#9-标签-分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p><h3 id="10-文稿发布和分享"><a class="headerlink" href="#10-文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><h1>欢迎使用马克飞象</h1><p>@(示例笔记本)[马克飞象|帮助|Markdown]</p><p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p><ul><li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li><li><strong>得心应手</strong> ：简洁高效的编辑器，提供<a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" rel="external nofollow noopener noreferrer" target="_blank">桌面客户端</a>以及<a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-%E9%AB%98%E9%98%B6%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C" rel="external nofollow noopener noreferrer" target="_blank">离线Chrome App</a>，支持移动端 Web；</li><li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li></ul><hr><p>[TOC]</p><h2 id="markdown简介"><a class="headerlink" href="#markdown简介"></a>Markdown简介</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" rel="external nofollow noopener noreferrer" target="_blank">维基百科</a></p></blockquote><p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com" rel="external nofollow noopener noreferrer" target="_blank">链接</a>或一个脚注<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。下面列举了几个高级功能，更多语法请按<code>Ctrl + /</code>查看帮助。</p><h3 id="代码块"><a class="headerlink" href="#代码块"></a>代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure><h3 id="latex-公式"><a class="headerlink" href="#latex-公式"></a>LaTeX 公式</h3><p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p><p>$$x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="表格"><a class="headerlink" href="#表格"></a>表格</h3><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 USD</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 USD</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 USD</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="流程图"><a class="headerlink" href="#流程图"></a>流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">e=&gt;end</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>以及时序图:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure><blockquote><p><strong>提示：<strong>想了解更多，请查看</strong>流程图</strong><a href="http://weibo.com/ghosert" rel="external nofollow noopener noreferrer" target="_blank">语法</a>以及<strong>时序图</strong><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" rel="external nofollow noopener noreferrer" target="_blank">语法</a>。</p></blockquote><h3 id="复选框"><a class="headerlink" href="#复选框"></a>复选框</h3><p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p><ul><li>[x] 已完成事项</li><li>[ ] 待办事项1</li><li>[ ] 待办事项2</li></ul><blockquote><p><strong>注意：<strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在</strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p></blockquote><h2 id="印象笔记相关"><a class="headerlink" href="#印象笔记相关"></a>印象笔记相关</h2><h3 id="笔记本和标签"><a class="headerlink" href="#笔记本和标签"></a>笔记本和标签</h3><p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p><h3 id="笔记标题"><a class="headerlink" href="#笔记标题"></a>笔记标题</h3><p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p><h3 id="快捷编辑"><a class="headerlink" href="#快捷编辑"></a>快捷编辑</h3><p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p><blockquote><p>**注意：**目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p></blockquote><h3 id="数据同步"><a class="headerlink" href="#数据同步"></a>数据同步</h3><p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p><blockquote><p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p></blockquote><h3 id="离线存储"><a class="headerlink" href="#离线存储"></a>离线存储</h3><p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p><blockquote><p>**注意：**虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p></blockquote><h2 id="编辑器相关"><a class="headerlink" href="#编辑器相关"></a>编辑器相关</h2><h3 id="设置"><a class="headerlink" href="#设置"></a>设置</h3><p>右侧系统菜单（快捷键<code>Ctrl + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p><h3 id="快捷键"><a class="headerlink" href="#快捷键"></a>快捷键</h3><p>帮助    <code>Ctrl + /</code><br>同步文档    <code>Ctrl + S</code><br>创建文档    <code>Ctrl + Alt + N</code><br>最大化编辑器    <code>Ctrl + Enter</code><br>预览文档 <code>Ctrl + Alt + Enter</code><br>文档管理    <code>Ctrl + O</code><br>系统菜单    <code>Ctrl + M</code></p><p>加粗    <code>Ctrl + B</code><br>插入图片    <code>Ctrl + G</code><br>插入链接    <code>Ctrl + L</code><br>提升标题    <code>Ctrl + H</code></p><h2 id="关于收费"><a class="headerlink" href="#关于收费"></a>关于收费</h2><p><strong>马克飞象</strong>为新用户提供 10 天的试用期，试用期过后需要<a href="maxiang.info/vip.html">续费</a>才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。</p><hr><p>感谢阅读这份帮助文档。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" rel="external nofollow noopener noreferrer" target="_blank">MathJax</a> 参考更多使用方法。 <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。 <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p>这是一个示例脚注。请查阅 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes" rel="external nofollow noopener noreferrer" target="_blank">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 <a href="https://dev.yinxiang.com/doc/articles/enml.php" rel="external nofollow noopener noreferrer" target="_blank">ENML</a> 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。 <a href="#fnref3" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 使用 &lt;a href=&quot;https://github.com/hexojs/hexo-renderer-marked&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;marked&lt;/a&gt; 作
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="服务器" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://legacy-blog.zthxxx.me/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>WNCG 软件组第三次培训大纲</title>
    <link href="https://legacy-blog.zthxxx.me/posts/WNCG-Software-Group-Third-Training-Syllabus/"/>
    <id>https://legacy-blog.zthxxx.me/posts/WNCG-Software-Group-Third-Training-Syllabus/</id>
    <published>2016-11-02T14:50:43.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <content type="html"><![CDATA[<p>这次大纲是暂且是作为讲解时的备注，本周作为预习的任务大概只有熟悉 GIt 和 Worktile 的使用，剩下的内容因为没有具体资料，所以到培训时先听培训讲的，再去针对具体方面查阅资料。</p><ol><li><strong>团队管理</strong><ul><li>团队协作软件<br>Worktile  GitLab</li><li>时间管理<br>需要统计团队成员一周内的 日程安排，知道成员什么时候都有空或者有事；</li><li>任务管理<br>如何将分配的任务落实绑定到某个成员身上，以方便书面化公开化成员责任；<br>如何跟进 监督任务进度，落实到督促某个进度落后的成员；</li><li>消息通知<br>时候具有多种通知方式，如 短信、邮箱、APP、桌面、Web；<br>通知是否方便和及时，如安排任务时自动通知、临近截止时间自动通知、定时通知，通知延迟多少，是否会丢失通知；</li></ul></li><li><strong>文档规范</strong><ul><li>格式<br>固定的 封面、标题、开头，固定的某种书写形式；<br>文档风格规范<br>书面化语气</li><li>内容<br>对于项目什么是有用信息，什么是废话；<br>如何向别人表达 自己想干什么、遇到什么困难、需要什么帮助；<br>什么是清晰的表述，语言逻辑正确、站在听者的立场、要让听者能听明白；<br>什么内容敏感、什么内容该写、什么内容不该写；<br>专业词汇；</li></ul></li><li><strong>编程入门学习路线</strong><ul><li>必要知识<ul><li>IDE</li><li>语法</li><li>功能</li></ul></li><li>入门练手流程<ol><li>了解语言能干什么，自己的水平能做什么。</li><li>自己定一个功能，通过了解的“语言能干什么”分析大概实现思路</li><li>按照思路，通过查阅语法和 API，实现代码</li><li>重复以上 2、3 两点，直至熟练语言操作</li></ol></li><li>必要素养<ul><li>语法进阶</li><li>设计模式</li><li>数据结构</li><li>。。。</li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次大纲是暂且是作为讲解时的备注，本周作为预习的任务大概只有熟悉 GIt 和 Worktile 的使用，剩下的内容因为没有具体资料，所以到培训时先听培训讲的，再去针对具体方面查阅资料。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;团队管理&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/tags/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/tags/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Git subtree 管理子项目包使用小结</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Git-subtree-Manage-Subpackages-Usage-Summary/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Git-subtree-Manage-Subpackages-Usage-Summary/</id>
    <published>2016-11-02T09:59:24.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景描述"><a class="headerlink" href="#场景描述"></a>场景描述</h3><p>我们在用 git 管理的一个工程中，或多或少会在我们自己的项目中 <strong>引入一些别人写的包或者模块</strong>。</p><p>通常我们是直接下载这个包的文件放在我们的工程文件夹中直接使用的。</p><p>假如我们需要使用引入某个正在开发的模块的源代码，并希望能获取这个模块在快速迭代中更新的各个版本，这时一般就是 <strong>在项目工程中导入这个模块的 git 仓库到工程的子目录中</strong>。</p><p>现在就牵涉到 git 如何管理一个项目仓库中还有其他子模块项目 git 仓库的情况。</p><p>这方面 git 提供的工具是 submodule 和 subtree，</p><p>本篇讲的是使用 <strong>subtree</strong> 管理子项目的一些使用小结。虽然git 官方推荐是用 subtree 不用 submodule，但是我觉得这两者是各有利弊，各有各的使用场合，在不同的需求条件下都可能切换使用到。</p><h3 id="推荐阅读"><a class="headerlink" href="#推荐阅读"></a>推荐阅读</h3><p>这里先给出我当时学习的几篇相关的博文：</p><p><a href="http://aoxuis.me/post/2013-08-06-git-subtree" rel="external nofollow noopener noreferrer" target="_blank">使用GIT SUBTREE集成项目到子目录 - XA</a></p><p><a href="https://segmentfault.com/a/1190000003969060" rel="external nofollow noopener noreferrer" target="_blank">用 Git Subtree 在多个 Git 项目间双向同步子项目 - 敲代码的小德子</a></p><p><a href="https://segmentfault.com/a/1190000006080556" rel="external nofollow noopener noreferrer" target="_blank">如何科学的管理多个子项目 - 阿驴</a></p><p><a href="http://www.tuicool.com/articles/veaEBr" rel="external nofollow noopener noreferrer" target="_blank">使用 git-subtree 以子目录形式引入外部项目 - William Sang</a></p><h3 id="实际问题"><a class="headerlink" href="#实际问题"></a>实际问题</h3><p>最近使用 hexo 搭建了我的<a href="legacy-blog.zthxxx.me">个人博客</a>，其中 hexo 工程是 clone 的 hexo github 仓库的，主题是 pull 的 <a href="https://github.com/ppoffice/hexo-theme-icarus" rel="external nofollow noopener noreferrer" target="_blank">icarus 仓库</a> 的 <a href="https://github.com/zthxxx/hexo-theme-icarus" rel="external nofollow noopener noreferrer" target="_blank">修改版</a>。所以主题就是一个放在 hexo 工程目录里的 git 子项目。由于在搭建博客的过程中，我需要按照我想要的样式不断的修改主题，所以要求主题的子项目要能快速更新仓库，方便推送和拉取远程仓库，要能将主项目的版本与子项目版本对应，如 clone 主项目，应能同时自动 clone 子项目下来，如 reset 主项目，要能自动同时 reset 子项目到主项目版本所对应的子项目版本。</p><p>上面说的有点饶，总结来说就四点：</p><ol><li>子项目的目录应该放子项目 git 仓库（而不该复制粘贴代码）</li><li>能拉取远程子项目的更新，并能推送本地子项目的修改</li><li>主项目提交时能记录当时所用子项目的版本</li><li>主项目被 clone 或 pull 时，能自动包含 clone 或 pull 子项目</li></ol><p>本质来说以上通过 subtree 和 submodule 都能实现要求，只是实现的方式不一样，这里我们还是只说 subtree。</p><h3 id="subtree-的使用"><a class="headerlink" href="#subtree-的使用"></a>Subtree 的使用</h3><p>subtree 涉及的命令就只有添加项目地址、push、pull，并不能查看子项目 branch commit log diff 等等。</p><p>subtree 本质就是把子项目目录作为一个<strong>普通的文件目录</strong>，对于父级的主项目来说是完全透明的，真的就是个普通目录，<strong>原来是怎么操作现在依旧是那么操作</strong>，就像操作主项目中其他文件一样的 add commit，<strong>subtree 的核心思想与能做的就只有同步项目文件</strong>。</p><p>这里我们通过本博客搭建时使用的 subtree 来举例讲解操作过程。</p><p>我们有一个 hexo blog 的目录，放的是 hexo 工程文件，作为主项目目录，当然，这是 git 管理的仓库；blog 下有一个 themes 的文件夹，准备用来放主题包，现在是空的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blog/</span><br><span class="line">blog/themes/</span><br></pre></td></tr></table></figure><p>现在我们的工作目录是在 blog 中，我们需要讲主题文件夹 icarus 下载到博客目录的 themes 子文件夹中，像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog/themes/icarus/</span><br></pre></td></tr></table></figure><p>我们现在是没有 icarus 这个目录的，后面的步骤就是把这个子项目包给弄出来。</p><ol><li><p><strong>添加子项目远程库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># git remote add --fetch &lt;远程库别名&gt; &lt;远程库仓库地址&gt;</span></span><br><span class="line">git remote add -f icarus git@github.com:zthxxx/hexo-theme-icarus.git</span><br></pre></td></tr></table></figure><p>添加远程库是为了后面要用子项目地址的时候方便使用远程库别名取代。</p></li><li><p><strong>拉取子项目到本地文件夹</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git subtree add --prefix=&lt;本地子项目目录&gt; &lt;远程库仓库地址 | 远程库别名&gt; &lt;分支&gt; --squash</span></span><br><span class="line">git subtree add --prefix=themes/icarus icarus master --squash</span><br></pre></td></tr></table></figure><p>这句命令会拉取子项目 icarus 的仓库并放到 <code>themes/icaurs</code> 下，同时相当于将子项目全部提交到主项目中了，主项目会多一个合并子项目的 commit 记录；</p><p>如果不加 <code>--squash</code> 参数，主项目会合并子项目本身所有的 commit 历史记录，加上 <code>--squash</code> 参数是把子项目的记录合成一次 commit 提交到主项目，这样主项目只是合并一次 commit 记录。</p></li><li><p><strong>像以往一样修改文件提交主项目</strong></p><p>因为有按照需要修改主题样式，所以会有修改到主题文件，也会修改到主项目的文件，但是都没区别，在<strong>主项目目录下查看状态和提交修改都和原来一样</strong>，不管是被修改的主题文件还是项目文件都一样的显示，对主项目来说都是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"><span class="comment"># modified:blog_file</span></span><br><span class="line"><span class="comment"># modified: themes/icarus/sub_project_file</span></span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"Modifiy main and sub file"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>上面是主项目添加修改文件并提交推送的操作，<code>themes/icarus/</code> 是子项目的地址，但是可以看到，子项目文件有修改不会对主项目的操作过程有任何影响，这就是我们说子项目对主项目透明的原因。</p></li><li><p><strong>Subtree 提交到子项目</strong></p><p>第 3 点的时候已经把修改提交到了主项目的远程库中了，这时再在主项目目录下 <code>git status</code> 就能看到 <code>nothing to commit, working tree clean</code> 的提示；</p><p>但是第 3 点中同样修该了子项目 icaurs 的文件，我也同样希望<strong>能把修改提交到子项目远程库中</strong>，这时候就该 <strong>subtree</strong> 上场了，在主项目目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git subtree push --prefix=&lt;本地子项目目录&gt; &lt;远程库仓库地址 | 远程库别名&gt; &lt;分支&gt; --squash</span></span><br><span class="line">git subtree push --prefix=themes/icarus icarus master --squash</span><br></pre></td></tr></table></figure><p>这时 git 会遍历主项目的 commit 所有记录，从中找出有对子项目修改的相关 commit，并提取各 commit 更新的内容提交到子项目远程库中；加 <code>--squash</code> 参数时，如果主项目新增的修改子项目的 commit 有多个时会合并为一个 commit 提交。</p></li><li><p><strong>子项目远程库有更新</strong></p><p>假如现在子项目的远程库有大量更新的文件，我们想把这些更新拉取合并到本地的子项目目录中，ok，这时又是 subtree 上场了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git subtree pull --prefix=&lt;本地子项目目录&gt; &lt;远程库仓库地址 | 远程库别名&gt; &lt;分支&gt; --squash</span></span><br><span class="line">git subtree pull --prefix=themes/icarus icarus master --squash</span><br></pre></td></tr></table></figure><p>子项目的更新与推送命令都是一样的用法，要注意的是，子项目更新后，在主项目中查看 <code>git status</code> 就会看到一堆子项目的文件显示 modified，没关系，主项目中再使用 add commit push 提交推送一遍。</p></li><li><p><strong>子项目切出起点</strong></p><p>当主项目的 commit 提交太多后，再推送子项目到远程库的时候，subtree 每次都要遍历很多 commit，浪费的时间相当多，很是不爽，当然要找解决办法了；</p><p>subtree 可以将子项目当前版本<strong>切出为一个分支</strong>，作为后面的 push 时遍历的新起点，这样以后每次遍历都只从上次切出的分支的起点开始，不会再遍历以前的了，时间就省了很多。</p><p>假如现在主项目和子项目都提交好了，工作空间是干净的，这时我们把主题 icarus 的子项目当前版本切出到新分支作为起点：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git subtree split [--rejoin] --prefix=&lt;本地子项目目录&gt; --branch &lt;主项目中作为放置子项目的分支名&gt;</span><br><span class="line">git subtree split [--rejoin] --prefix=themes/icarus --branch icarus</span><br></pre></td></tr></table></figure><p><strong>注意：<strong>如果 <code>push</code> 时使用了 <code>--squash</code> 参数合并提交，那么 <code>split</code> 时</strong>不能</strong>使用 <code>--rejoin</code> 参数，反之必须使用。</p><p>现在我的主项目里就多了一个叫 icarus 的分支，存放的就是 icarus 这个子项目的内容，这个分支只是作起点储存用的，<strong>不用管它不用修改不用推送到远程库</strong>。</p><p>​</p><p>现在再有子项目的文件修改后，一样还是用第 3、4 点的操作更新提交和推送远程库，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"><span class="comment"># modified:blog_file</span></span><br><span class="line"><span class="comment"># modified: themes/icarus/sub_project_file</span></span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"Modifiy main and sub file"</span></span><br><span class="line">git subtree push --prefix=themes/icarus icarus master --squash</span><br></pre></td></tr></table></figure><p>只是这次子项目推送时，git 不会再去从头遍历主项目，而是直接从切出的位置开始遍历，大大加快了时间。</p><p>当现在 commit 又变多了遍历时间又慢了，需要更新推进那个起始点的时候，只需要再在当前版本上再切出一个作起点的分支覆盖原来那个就是，命令和第一次切出分支作起点时一模一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree split --rejoin --prefix=themes/icarus --branch icarus</span><br></pre></td></tr></table></figure><p>这样下次推送子项目时开始遍历时的起点也更新了。</p></li></ol><h3 id="subtree-与-submodule-基本比较说明"><a class="headerlink" href="#subtree-与-submodule-基本比较说明"></a>subtree 与 submodule 基本比较说明</h3><p>从实际使用中的一些问题谈起，网上这两者的对比说明已经够多了，我这里列的都不完整，只是遇到的一些。</p><p><strong>submodule</strong> 的问题大多是说它步骤太多太麻烦，我是不喜欢它在 clone 时不能直接自动带上子项目的包，必须要用递归参数才行。 <code>git clone --recursive &lt;远程库地址&gt;</code></p><p>但是 submodule 可以进去到子项目的仓库单独查看子项目的修改记录，在子项目目录时，就相当与在一个单独的仓库内，对外层主项目完全不可见。</p><p><strong>subtree</strong> 好在使用方便，一共就两三个命令，参数还是都一样的，使用起来很简单。缺点就是无法直接单独查看子项目的修改记录，因为子项目的修改跟主项目的修改都合并到主项目中了，污染主项目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景描述&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#场景描述&quot;&gt;&lt;/a&gt;场景描述&lt;/h3&gt;
&lt;p&gt;我们在用 git 管理的一个工程中，或多或少会在我们自己的项目中 &lt;strong&gt;引入一些别人写的包或者模块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;通常
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="Git" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/Git/"/>
    
    
      <category term="Git" scheme="https://legacy-blog.zthxxx.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo 生成静态博客过程记录</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Hexo-Build-Static-Blog-Process/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Hexo-Build-Static-Blog-Process/</id>
    <published>2016-10-25T01:45:35.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚用 Hexo 和 GitHub 搭好了一个<a href="https://zthxxx.github.io" rel="external nofollow noopener noreferrer" target="_blank">个人博客</a>，现在准备记录下这个过程。这个搭建的过程应该分为两部分，一是学会使用 Hexo 生成静态博客页面，二是申请 GitHub Pages 托管网站，本篇文章是讲的第一步。（下一篇请戳 <a href="/posts/Build-Hexo-Blog-by-Travis-CI/">使用 Travis 自动构建 Hexo 到 GitHub</a>）</p><p>此类教程网上有不少，这里也列几个：</p><p><a href="https://zhuanlan.zhihu.com/p/22191919" rel="external nofollow noopener noreferrer" target="_blank">用 GitHub + Hexo 建立你的第一个博客 - Crossin</a></p><p><a href="http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" rel="external nofollow noopener noreferrer" target="_blank">HEXO搭建个人博客 - 潘柏信</a></p><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" rel="external nofollow noopener noreferrer" target="_blank">hexo你的博客 - 不如</a></p><h3 id="先说说我的理解"><a class="headerlink" href="#先说说我的理解"></a>先说说我的理解</h3><p>Hexo (类似) 是一种博客框架，像 WordPress 一样，这个框架里通常包含了 <strong>主页</strong>、<strong>博主信息</strong>、<strong>博文</strong>、<strong>分类标签</strong>、<strong>主题样式</strong>，每个都有固定格式。</p><p>Hexo 是帮助我们 <strong>通过原始素材渲染出带有主题样式的静态页面</strong>。（我把根据博文 Markdown 生成出带 CSS HTML 代码 的过程称为渲染）</p><p>渲染时最重要的部分是：<strong>主题</strong>、<strong>配置</strong>、<strong>素材</strong>（文章、图片、音视频等），三者确定一个渲染的结果。</p><p>由于这类框架的控制，规定素材（主要是文章）具有的格式（比如开头 YAML、正文 Markdown，比如都是博主博文标签这一套），因此当渲染主题都按规则设计解析的时候，各种主题之间就可以 <strong>随意更换</strong>，因为都符合规则，都能被渲染，不同的地方只需要修改 <strong>主题配置</strong> 就好。</p><p>由上再简单总结下：</p><ul><li>Hexo 框架制定了一套博文渲染规则</li><li>用户根据简单的写博文规则来写自己的文章</li><li>主题开发者更具负责的框架渲染规则开发主题样式文件</li><li>Hexo 解析文章、配置、主题，渲染出静态页面</li><li>把渲染的结果发布到服务器【<strong>注意</strong>：发布的只有生成的页面，Hexo 工程和配置及原文 MD 都不会上传】</li></ul><p>所以，使用 Hexo 的步骤也明确了。</p><ol><li>在本地安装 Hexo 框架</li><li>本地找一个目录来放博客工程，用 Hexo 初始化项目文件夹</li><li>下载喜欢的主题来更换</li><li>设置站点配置、主题配置</li><li>新建 Hexo 博文</li><li>用 Markdown 写博文内容</li><li>执行 Hexo 渲染生成静态页面文件</li><li>本地开启服务器预览 | 部署到远程服务器</li></ol><h3 id="具体操作过程"><a class="headerlink" href="#具体操作过程"></a>具体操作过程</h3><h4 id="hexo-安装"><a class="headerlink" href="#hexo-安装"></a>Hexo 安装</h4><p>这里有几篇详细的教程，我搭建这个博客时就是按他们讲的一步步来的，现在把他们列出来，再写自己的总结：</p><ul><li><a href="https://hexo.io/zh-cn/docs/index.html" rel="external nofollow noopener noreferrer" target="_blank">文档 | Hexo</a>        Hexo 官方文档，一定要看，多看文档，遇到的很多问题其实文档中都有</li><li><a href="http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" rel="external nofollow noopener noreferrer" target="_blank">HEXO搭建个人博客 - 潘柏信</a> 这篇博文讲的很简单，主要时有一些他自己遇到的问题，基本后来我都遇到了</li><li><a href="http://blog.csdn.net/github_33261002/article/details/52297025" rel="external nofollow noopener noreferrer" target="_blank">hexo静态博客搭建与配置 - Crazier_qi</a> 安装部分只讲了一小段，因为确实很简单</li><li><a href="http://www.jianshu.com/p/3e341d86acd2" rel="external nofollow noopener noreferrer" target="_blank">hexo博客换主题–icarus - Trity</a> icarus 的样式很简洁清爽，但是不失逻辑性，是我喜欢的风格</li><li><a href="http://www.zipperary.com/2013/05/29/hexo-guide-3/" rel="external nofollow noopener noreferrer" target="_blank">hexo博客的配置、使用 - Zippera</a> 主要讲的是配置文件</li><li><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" rel="external nofollow noopener noreferrer" target="_blank"><strong>hexo你的博客 - 不如</strong></a> <strong>非常非常详细的教程、说明、剖析，安装使用，由浅入深，非常推荐！</strong></li></ul><p>Hexo 是用 Nodejs 写的，所以你首先要安装 Nodejs 和 npm，本文使用 Ubuntu 14.04 的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><p>接着使用 npm 安装 hexo，再次之前，确保电脑上有 git，因为安装过程中会调用 git。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>npm 的 -g 参数表示全局安装。</p><p>这里安了两个，有一个带 cli 的后缀，我也没明白是为什么，反正我是两个都装了才用的。</p><p>Hexo 的命令可以先看<a href="https://hexo.io/zh-cn/docs/index.html" rel="external nofollow noopener noreferrer" target="_blank">这里</a>。</p><p>建立准备放 hexo 博客目录,并进入到该目录下。</p><p>执行 hexo init 初始化当前目录，也可以为 init 指定一个目录，没有指定就是默认当前目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog_dir</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>hexo 会在当前目录下载一系列资源文件并且安装依赖包，最后形成的目录已经是一个完整的博客工程了，带了默认主题，只是没有博文，可以直接被完整渲染。</p><p>现在初始化玩了我们可以执行渲染生成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate  <span class="comment"># 执行生成</span></span><br><span class="line">hexo g  <span class="comment"># 生成的缩写</span></span><br></pre></td></tr></table></figure><p>generate 可以缩写成 g，hexo 很有意思，大部分命令都可以缩写为命令首字母。</p><p>生成之后可以通过 hexo 自带的服务器本地 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">localhost:4000</a> 预览查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo server  <span class="comment"># 启动本地服务器</span></span><br><span class="line">hexo s  <span class="comment"># 缩写</span></span><br></pre></td></tr></table></figure><p>这时候可以访问本地的 4000 端口访问生成的界面。</p><p>整个操作看起来就几行代码，确实相当简单，后面的就是配置参数和部署了。</p><h3 id="配置"><a class="headerlink" href="#配置"></a>配置</h3><p>Hexo 的配置文件分两部分，<strong>站点配置</strong> 和 <strong>主题配置</strong>。站点配置文件在 hexo 博客根目录下的 _config.yml 文件中，主题配置文件在根目录下的 themes/&lt;主题名&gt; 文件夹下的 _config.yml 中。以下就用站点配置和主题配置做说明。</p><h4 id="部署-配置部分"><a class="headerlink" href="#部署-配置部分"></a>部署 (配置部分)</h4><p>部署的过程涉及到 GitHub Pages 的申请等过程，因此会另起一张，这里只先讲部署中需要涉及到的 Hexo 站点配置文件部分。</p><p>在站点配置文件中  deploy 标签下，添加对 git 的支持，选择仓库和分支，这里注意的是，hexo 3.0 之后的 <code>deploy: type:</code> 应该是 git 而不是 github，并且需安装 <code>hexo-deployer-git</code> 插件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo _config.yml</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:&lt;user_name&gt;/&lt;user_name&gt;.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>之后配置好 GitHub Pages 的话，就使用 hexo 部署上去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="主站配置"><a class="headerlink" href="#主站配置"></a>主站配置</h3><p>主站配置文件在 <a href="https://hexo.io/zh-cn/docs/index.html" rel="external nofollow noopener noreferrer" target="_blank">hexo 官网文档</a> 上写的很详细，这篇博文 <a href="http://www.zipperary.com/2013/05/29/hexo-guide-3/" rel="external nofollow noopener noreferrer" target="_blank">hexo博客的配置、使用 - Zippera</a> 讲配置都有中文注释，参照着配很方便。</p><p>主站配置文件主要要配置的是 <strong>标题</strong>、<strong>描述</strong>、<strong>作者</strong>、<strong>语言</strong>、<strong>站点</strong>、<strong>主题</strong> 、<strong>写作</strong>、<strong>部署</strong> 等，每人各有不同，根据文档配置就行了。主题配置的名字和放在 themes 文件夹中的主题名字要一样。</p><h3 id="主题配置"><a class="headerlink" href="#主题配置"></a>主题配置</h3><p>主题配置文件 一般在各主题开发者的官网或者博客上都有介绍，并且大部分不同的主题需要的配置都相似，我使用的是 <a href="https://github.com/ppoffice/hexo-theme-icarus" rel="external nofollow noopener noreferrer" target="_blank"><strong>icarus</strong></a> 的主题，跟着开发者的说明就好了。主要是 <strong>菜单</strong>、<strong>logo</strong>、<strong>favicon</strong>、<strong>链接</strong>、<strong>插件</strong> 等等，主要是要看主题支持什么什么插件，没有的就要自己写了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近刚用 Hexo 和 GitHub 搭好了一个&lt;a href=&quot;https://zthxxx.github.io&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;个人博客&lt;/a&gt;，现在准备记录下这个
      
    
    </summary>
    
      <category term="编程开发" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
      <category term="服务器" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%9C%8D%E5%8A%A1%E5%99%A8/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://legacy-blog.zthxxx.me/tags/Hexo/"/>
    
      <category term="博客" scheme="https://legacy-blog.zthxxx.me/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://legacy-blog.zthxxx.me/posts/Hello-World/"/>
    <id>https://legacy-blog.zthxxx.me/posts/Hello-World/</id>
    <published>2016-10-24T02:24:00.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <content type="html"><![CDATA[<h1>zthxxx`s Blog</h1><p>Welcome to this blog, I`m zthxxx, a cat in a college.</p><p>This is zthxxx`s blogs to record of life.</p><p>You can follow me from <a href="https://github.com/zthxxx" rel="external nofollow noopener noreferrer" target="_blank"><strong>GitHub</strong></a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;zthxxx`s Blog&lt;/h1&gt;
&lt;p&gt;Welcome to this blog, I`m zthxxx, a cat in a college.&lt;/p&gt;
&lt;p&gt;This is zthxxx`s blogs to record of life.&lt;/p&gt;
&lt;p&gt;You 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WNCG 软件组第二次培训大纲</title>
    <link href="https://legacy-blog.zthxxx.me/posts/WNCG-Software-Group-Second-Training-Syllabus/"/>
    <id>https://legacy-blog.zthxxx.me/posts/WNCG-Software-Group-Second-Training-Syllabus/</id>
    <published>2016-10-22T16:48:07.000Z</published>
    <updated>2019-04-25T17:23:41.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="预课程部分"><a class="headerlink" href="#预课程部分"></a>预课程部分</h3><p>考虑到同学们电脑基础太差，对电脑本身都没什么了解，正式上课之前，</p><p>我们这里先以一个需要安装的软件为例，讲解个人电脑使用规范（小技能）<s>普及电脑知识</s>，纠正错误习惯。</p><p>本次培训所用软件列表：</p><ol><li>Git</li><li>印象笔记 (Evernote)</li><li>Xmind</li><li>Typora</li><li>Everything</li></ol><p>软件安装无非就三步，<strong>下载</strong>、<strong>安装</strong>、<strong>配置</strong>，</p><p>以 <strong>Xmind</strong> 的安装为例</p><ol><li><p>使用 <strong>搜索引擎</strong> 查找软件 (搜索引擎是互联网的入口，关键词搜索法，整句匹配搜索，不推荐提问式搜索)</p><p>打开 <strong>百度</strong> (由于大家基础问题，这里不讲翻墙上 Google) (百度的确是很垃圾，但是国内其他更垃圾、更上不了台面)</p><p>使用关键词与空格查询  不推荐用提问的语气输入问题</p><p>搜索引擎是互联网的入口</p><p>要善于搜索引擎</p></li><li><p>筛选要去查看下载的网站 (网站名称，网站后缀，是否都包含关键字，页面标题意思)</p><p>反面例子：</p><ul><li><a href="http://www.cncrk.com/downinfo/103188.html" rel="external nofollow noopener noreferrer" target="_blank">Ttpora - 起点软件</a></li><li><a href="http://www.newasp.net/soft/76843.html" rel="external nofollow noopener noreferrer" target="_blank">XMind 2013 (思维导图软件) 3.5.1 官方免费版 - 新云网络</a></li><li><a href="http://www.xiazaiba.com/html/5462.html" rel="external nofollow noopener noreferrer" target="_blank">XMind 3.6.0(思维导图软件)简体中文免费版 - 下载吧</a></li><li><a href="http://xiazai.zol.com.cn/detail/44/432463.shtml" rel="external nofollow noopener noreferrer" target="_blank">XMind 7 中文版 - ZOL软件下载</a></li></ul></li><li><p>选择下载按钮 (区分各种广告按钮)</p><p>不要指定默认下载路径</p><p>通过下载选项中的<strong>文件大小</strong>判断是否是广告或流氓软件</p><p>通过下载时看到的<strong>文件名</strong>判断是不是想要的东西</p><p>下载软件的存放目录选在电脑的软件安装包目录并分好类别</p></li><li><p>安装位置</p><p>安装时都选择<strong>高级选项</strong>，选择要安装到哪个盘的程序安装文件夹 (Program Files)</p><p><strong>所有软件都不要安装到系统盘</strong></p><p><strong>安装目录都用英文目录</strong></p><p><strong>所有后缀名显示打开</strong> (后缀名是什么)</p><p><strong>所有隐藏文件显示打开</strong> (隐藏文件、系统文件)</p></li><li><p>文件夹整理</p><p>系统盘 | 备份盘 | 软件安装盘 | 影音娱乐盘 | 学习资料和文档盘 |</p><p>【如果硬盘没有那么多分区的，可以在分区中多建两个这样的分级文件夹。】</p><p>【不过绝大多数这种情况建议直接格式化或清除硬盘重装系统】</p><ul><li><p>系统盘：只装系统，最好不要安装软件到系统盘</p></li><li><p>备份盘：对系统盘备份，手机备份，安装系统镜像的备份</p></li><li><p>软件安装盘：装软件时统一装到这个盘的 <strong>Program Files</strong> 文件夹下，全部使用英文路径</p><p>下载的软件放到这个盘下的 <strong>软件安装包</strong> 文件夹下并分好类别，作为软件安装包的存放地</p></li><li><p>影音娱乐盘：这个盘下建立 Move、Music、Image 文件夹放置各种音视频文件，Game 文件夹里放非安装的游戏，建立一个 Download 作为下载缓存的地方，使用时<strong>整理</strong>了再放到软件安装包内</p></li><li><p>学习资料和文档盘：学习资料包括课程、笔记、各类知识等，文档按照 <strong>团队-时间-事务</strong> 划分。</p></li></ul><p>整理的思想是：按照文件类别分类，相同类别的文件不要放在两个地方，分类之间不要交叉</p></li><li><p>快捷键、任务管理器、启动管理、命令提示符、换行符差异</p></li></ol><h3 id="正课部分"><a class="headerlink" href="#正课部分"></a>正课部分</h3><ol><li><p><strong>博客</strong></p><p>个人博客例子：</p><p><a href="http://manjusaka.itscoder.com/" rel="external nofollow noopener noreferrer" target="_blank">Manjusaka</a></p><p><a href="http://www.saber.xn--6qq986b3xl/" rel="external nofollow noopener noreferrer" target="_blank">saber酱的抱枕</a></p><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" rel="external nofollow noopener noreferrer" target="_blank">Git 教程 - 廖雪峰</a></p><p>四大博客站：CSDN、简书、新浪、博客园</p><p>例子：</p><p><a href="http://blog.csdn.net/free_wind22/article/details/50967723" rel="external nofollow noopener noreferrer" target="_blank">Git使用详细教程 - CSDN</a></p><p><a href="http://www.jianshu.com/p/cda11f3dc071" rel="external nofollow noopener noreferrer" target="_blank">如何使用Github - 简书</a></p><p><a href="http://blog.sina.com.cn/s/blog_4ddef8f80101fbj0.html" rel="external nofollow noopener noreferrer" target="_blank">Git学习教程 - 新浪博客</a></p><p><a href="http://www.cnblogs.com/schaepher/p/5561193.html" rel="external nofollow noopener noreferrer" target="_blank">Git和Github简单教程 - 博客园</a></p></li><li><p><strong>Git | GitHub</strong></p><p>用实际例子讲解安装、功能作用、使用方法</p><p>GitHub 作为 Git 关联和云服务</p><p>放一个上面的例子，<a href="http://www.cnblogs.com/schaepher/p/5561193.html" rel="external nofollow noopener noreferrer" target="_blank">Git和Github简单教程 - 博客园</a> 这篇操作介绍写的很好</p><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" rel="external nofollow noopener noreferrer" target="_blank">Git 教程 - 廖雪峰</a> 廖雪峰的教程也是经典教材</p></li><li><p><strong>Markdown</strong></p><p><strong>轻量级标记语言</strong></p><ul><li>只关注内容，不关注排版，只是对重点对象做标记 (如加粗等)，重在强调逻辑</li></ul><p><strong>操作方便，效率更高</strong></p><ul><li>Markdown 其实就是用一些简单符号来起到排版作用，因为纯键盘操作，写作时少调用鼠标，效率能提升很多，不必多花时间在排版上</li></ul><p><strong>视觉逻辑更强</strong></p><ul><li>长段文本用MD标注后，结构更清晰，逻辑也更明显，比如本篇文章</li></ul><p>总结就是 排版美观逻辑强，比 Word 简单方便，不知道比记事本高到哪里去了！</p><p>Markdown 几个 标题、加粗、列表、链接和图片 的基本语法</p><p><a href="http://www.jianshu.com/p/1e402922ee32/" rel="external nofollow noopener noreferrer" target="_blank">Markdown——入门指南 - TeLee</a> 简书这篇中，Markdown 语法的简要规则讲的很易懂</p><p><a href="https://maxiang.io/#/?id=readme" rel="external nofollow noopener noreferrer" target="_blank">马克飞象</a> 马克飞象用来演示 Markdown 非常直观</p></li><li><p><strong>Typora</strong></p><p>用来写 Markdown 非常舒服，写作排版展示等方面使用非常流畅</p><p>实验室培训用的所有文档材料就是用 Typora 写的</p><p><a href="http://www.typora.io/windows/typora-setup-x64.exe?" rel="external nofollow noopener noreferrer" target="_blank">Typora 官方下载地址</a></p></li><li><p><strong>印象笔记</strong></p><p>国内各大笔记软件都各有优缺点，并或多或少都存在一些个人不是很满意的地方，但是相比之下我感觉更适合使用 印象笔记，如果你有好的想法，也可以去尝试一下别的笔记软件。</p><p>一般记笔记是先在笔记本上画好列出想到的知识点，用一些简单的箭头关联理清逻辑，作为初稿，然后再整理到印象笔记。印象笔记很好用的，与各种其他的软件配合也相当好。</p><p>在第二遍整理的时候，就会不知不觉的加强了理解和记忆。</p><p>手写笔记电子化的意义很大，云端保存笔记、电脑平板手机同时同步笔记，既不怕掉，也随时随地可以看；</p><p>更重要的是，如果是写的文档，非常方便整理、查看、搜索和分享。</p><p>做笔记能直接截图保存、添加附件等，比手写更方便，信息量更大。对想学习的人非常有帮助。</p><p>印象笔记本身的入门引导和技巧引导已经做的非常好了，也有很多大神分享了自己的使用技巧，都很实用：</p><p><a href="http://blog.yinxiang.com/blog/2016/09/01/edu_100_evernote_tips_for_students/" rel="external nofollow noopener noreferrer" target="_blank">印象笔记改变大学生活的100个技巧</a></p><p><a href="https://zhuanlan.zhihu.com/p/21823820" rel="external nofollow noopener noreferrer" target="_blank">我的印象笔记管理术 - 曹将</a></p><p><a href="https://www.zhihu.com/question/25852838" rel="external nofollow noopener noreferrer" target="_blank">如何高效使用和整理印象笔记 - 知乎</a></p></li><li><p><strong>Xmind</strong></p><p>思维导图通常用来自己整理和总结某一篇文章或者演讲或者课堂的知识体系；</p><blockquote><p>接触到干货，就会迫不及待地把它抽离出框架，画成脑图，有了这层加工，便不会轻易忘记。</p></blockquote><p>本质是多花了一倍的时间去理解，把系统的总体与细节提取了出来。</p><p>思维导图和目录列表是一样的，只是思维导图更美观，更直观，更容易看出知识体系下各知识点的关系。</p><p>所以思维导图通常也用于发布给别人看，帮助别人整理思路理清逻辑，作为一种教学手段。</p><p>这里讲这个是叫大家以后在 <strong>印象笔记</strong> 记的笔记中也使用下思维导图。</p></li><li><p><strong>Worktile</strong></p><p>团队协作需要管理工具，Worktile 是国内用得比较多的一款这样的管理系统。</p><p>我们也是做一下尝试，将这个系统引进来作为你们学习和使用的团队协作工具。</p><p>刚开始学习，一步步来，现在我们只需要一个【能安排任务、讨论问题、记录进度、通知提醒】的环境，就能开始尝试初步合作和磨合默契度。</p><p>因此虽然 Worktile 功能很强大，但是我们一开始只用得到几个功能：</p><ol><li>组建团队</li><li>建立项目</li><li>建立任务 | 安排任务 | 讨论问题</li><li>待办事务清单 | 做完一项就打个勾</li><li>评论任务 | 设置提醒</li></ol><p>这里先让大家都注册账号，然后我们在这里用两个人的账号给大家演示下。</p><p><a href="https://worktile.com/dashboard" rel="external nofollow noopener noreferrer" target="_blank">Worktile 工作台</a></p><p>​</p><p>Worktile 直接 <a href="https://worktile.com/signup" rel="external nofollow noopener noreferrer" target="_blank"><strong>注册</strong></a> 就可以使用啦，<br>Web 端界面友好，也有客户端和移动端，<br>基本操作都有 <a href="https://worktile.com/videos/worktile-for-teamwork" rel="external nofollow noopener noreferrer" target="_blank"><strong>视频教程</strong></a>，<br><a href="https://worktile.com/guide/started/overview" rel="external nofollow noopener noreferrer" target="_blank"><strong>用户指南</strong></a> 也简洁明了。</p><p>一开始的使用引导也是使用 RPG 式的探索型过程，通过完成 <strong>新手任务</strong>，一步步掌握使用方法，</p><p>总体感觉简单易用。</p><p>​</p><p>我们需要用 Worktile 来安排给大家的下次任务，每周一个 <strong>预习任务</strong>、一个 <strong>总结任务</strong>，自己根据自己的学习情况制定合适自己的小任务。</p><p>**任务的评论和讨论 **只能简明扼要的说 <strong>问题相关内容</strong>，讨论的方案、建议、可行性等框架或流程的问题，不应该问具体实现过程中的代码细节等，不能聊天。</p><p>QQ 和 微信 的消息太多而过于杂乱，但是 Worktile 现在就只会提醒你 <strong>有任务了</strong> 和 <strong>任务要到期</strong>了，相当于是在提醒你到什么时间该做什么了。</p><p>以后任务和总结相关的 <strong>通知</strong> 都用 Worktile 发布了，总结整理的文档、预习的文档和要用的软件也都传到 Worktile 具体任务的文档文件管理中。</p><p>也就是说把现在培训的工作从的小组 QQ 群移到 <strong>Worktile</strong> 中。小组 QQ 群用于提问回答或者闲聊用，而工作方面的事情，任务的安排全都放到 Worktile 上去使用。</p><p>大家刚开始不会用没关系，我们现在就是在一个 <strong>磨合的过程</strong> 里，不会用的就多试下几个按钮，多用下就熟练了。</p></li><li><p><strong>文档规范</strong></p><p>这里常用到的几个规范都只有几个原则，记住原则以后，做表格做文档的时候就自己要想着那几条原则，再去组织语言，边写边想着有没有违背原则，违背了就修改。</p><p>这里放一个文档风格规范的 <a href="https://open.leancloud.cn/copywriting-style-guide.html" rel="external nofollow noopener noreferrer" target="_blank"><strong>传送门</strong></a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;预课程部分&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#预课程部分&quot;&gt;&lt;/a&gt;预课程部分&lt;/h3&gt;
&lt;p&gt;考虑到同学们电脑基础太差，对电脑本身都没什么了解，正式上课之前，&lt;/p&gt;
&lt;p&gt;我们这里先以一个需要安装的软件为例，讲解个人电脑使用规范（小技
      
    
    </summary>
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/tags/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/tags/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>WNCG 软件组第一周培训后任务</title>
    <link href="https://legacy-blog.zthxxx.me/posts/WCNG-First-Week-Schedule-and-Next-Week-Content/"/>
    <id>https://legacy-blog.zthxxx.me/posts/WCNG-First-Week-Schedule-and-Next-Week-Content/</id>
    <published>2016-10-19T18:15:23.000Z</published>
    <updated>2019-04-25T17:23:41.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主线任务"><a class="headerlink" href="#主线任务"></a>主线任务</h3><p>学习版本控制工具 <strong>Git</strong> 和其社区网站 <strong>GitHub</strong> 的使用</p><h3 id="支线任务"><a class="headerlink" href="#支线任务"></a>支线任务</h3><ol><li>了解博客<ul><li>通过 <strong>搜索引擎</strong> (百度)查找博客概念</li><li>查几篇博客中的 C 语言各类技术文章</li></ul></li><li>通过 <strong>博客</strong> 文章教程学习 <strong>Git</strong>  入门方法</li><li>使用 <strong>印象笔记</strong> 管理 <strong>Git</strong> 的学习笔记</li><li>在写笔记时，通过 <strong>Typora</strong> 编辑器使用 <strong>Markdown</strong> 语法书写笔记内容</li></ol><hr><h2 id="第二周学习内容概览"><a class="headerlink" href="#第二周学习内容概览"></a>第二周学习内容概览</h2><p>这里的学习安排就是第二周上课准备讲的内容，部分需要大家提前找资料看一下。</p><p>需要预习的部分内容用以上的 <strong>主线 / 支线 任务</strong> 的形式表现给大家了，做任务获经验嘛。</p><p>下周总体内容：</p><ol><li><strong>博客</strong> 的生态情况 (概念、使用情况等)</li><li><strong>Markdown</strong> 标记语法 (相当简单、非正式场合下代替 Word)</li><li><strong>Typora</strong> 专用于 Markdown 所见及所得的文本编辑器 (简单易用)</li><li><strong>印象笔记</strong> 灵感和笔记记录管理工具 (整理笔记、各终端同步)</li><li>**Xmind ** 思维导图工具 (知识点和思路整理)</li><li><strong>Worktile</strong> 团队协作管理工具 (组建团队、任务管理)</li><li><strong>表格 | 邮件 | 文档</strong> 写作时的几个规范性原则 (需要写什么不该写什么、排版格式原则、包括了笔记书写建议)</li></ol><p>可以看到下周内容基本上是各类工具的使用。</p><p>我们讲的几个软件都是在以后学习中，相当有用也是会让大家经常使用的工具。</p><p>用这些工具的目的是让大家更好的 <strong>学习、记录、总结</strong>，并能长期保存学习过程。</p><p>第一周培训讲过，我们前期给大家安排的所有，都是在做铺垫，给后面 <strong>写好代码</strong> 铺垫良好的习惯。</p><p>我们会给出一些预习资料，但是更希望大家学会使用搜索引擎，自己找资料，学会自主学习。</p><p>下周培训一开始我们会让<strong>大家自己来讲</strong>各种概念和软件的使用方式，做好准备哟~~</p><p><strong>预习参考资料</strong> (每项内容按推荐顺序排列)</p><ol><li><p>博客</p><p>博客的概览还是要靠大家自己去认识，只能说我们给的资料链接大部分都是别人的博客文章。</p></li><li><p>Git</p><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" rel="external nofollow noopener noreferrer" target="_blank">Git 教程 - 廖雪峰的官方网站</a></p><p><a href="http://backlogtool.com/git-guide/cn/" rel="external nofollow noopener noreferrer" target="_blank">猴子也能懂的 GIT 教程</a></p><p><a href="https://my.oschina.net/bxxfighting/blog/378196" rel="external nofollow noopener noreferrer" target="_blank">简单使用Git和Github来管理自己的代码和读书笔记 - 卜星星</a></p></li><li><p>Markdown</p><p>Markdown 的编辑器我们推荐 Typora，可以不要看教程中的其他编辑器。</p><p><a href="http://www.jianshu.com/p/1e402922ee32/" rel="external nofollow noopener noreferrer" target="_blank">Markdown 入门指南 - Te_Lee</a></p><p><a href="https://maxiang.io/#/?id=readme" rel="external nofollow noopener noreferrer" target="_blank">马克飞象 - Markdown 简介</a></p><p><a href="http://apple4us.com/2012/02/why-writers-should-use-markdown/" rel="external nofollow noopener noreferrer" target="_blank">为什么应该用 Markdown 保存自己的文稿 - 不鳥萬如一</a></p></li><li><p>Typora</p><p><a href="http://www.iplaysoft.com/typora.html" rel="external nofollow noopener noreferrer" target="_blank">Typora - 颠覆写作体验的免费极简 Markdown 编辑器</a></p><p><a href="http://sspai.com/30292/" rel="external nofollow noopener noreferrer" target="_blank">让 Markdown 写作更简单，免费极简编辑器：Typora - 子不语Rex</a></p><p><a href="http://www.jianshu.com/p/5256ecc06eec" rel="external nofollow noopener noreferrer" target="_blank">安利一下 Typora：极致简洁的 markdown 编辑器 - yieku</a></p></li><li><p>印象笔记</p><p><a href="https://www.yinxiang.com/" rel="external nofollow noopener noreferrer" target="_blank">印象笔记官网</a></p><p><a href="http://blog.yinxiang.com/blog/2016/09/01/edu_100_evernote_tips_for_students/" rel="external nofollow noopener noreferrer" target="_blank">印象笔记改变大学生活的100个技巧</a></p><p><a href="https://zhuanlan.zhihu.com/p/21823820" rel="external nofollow noopener noreferrer" target="_blank">我的印象笔记管理术 - 曹将</a></p><p><a href="https://www.zhihu.com/question/25852838" rel="external nofollow noopener noreferrer" target="_blank">如何高效使用和整理印象笔记 - 知乎</a></p></li><li><p>Xmind</p><p><a href="http://www.xmind.net/" rel="external nofollow noopener noreferrer" target="_blank">Xmind 官网</a></p><p><a href="https://zhuanlan.zhihu.com/p/21824687" rel="external nofollow noopener noreferrer" target="_blank">思维导图全攻略 - 曹将</a></p><p><a href="http://jingyan.baidu.com/article/e52e361544a8e940c60c51ca.html" rel="external nofollow noopener noreferrer" target="_blank">Xmind 新手入门教程</a></p><p>​</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主线任务&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#主线任务&quot;&gt;&lt;/a&gt;主线任务&lt;/h3&gt;
&lt;p&gt;学习版本控制工具 &lt;strong&gt;Git&lt;/strong&gt; 和其社区网站 &lt;strong&gt;GitHub&lt;/strong&gt; 的使用&lt;/p&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/tags/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/tags/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>WNCG 软件组第一次培训大纲</title>
    <link href="https://legacy-blog.zthxxx.me/posts/WNCG-Software-Group-First-Training-Syllabus/"/>
    <id>https://legacy-blog.zthxxx.me/posts/WNCG-Software-Group-First-Training-Syllabus/</id>
    <published>2016-10-19T16:48:07.000Z</published>
    <updated>2019-04-25T17:23:41.880Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>培训与总结安排</strong><br>每周有总结，总结上周内容，答疑，安排下周学什么<br>每周培训讲上周总结时安排的内容，完成周志</p></li><li><p><strong>培训会给大家讲什么、为什么要强调团队合作</strong></p><ul><li>软件工程教学现状与我们想做的尝试</li><li>我们的现状：野路子，单打独斗、依靠个人能力编程，缺少文档，缺少合作，别人觉得代码乱，自己也觉得代码乱</li><li>软件工程现状：经典瀑布流教学，上课做完作业就完，学完课程没有任何收获，图完成学分</li><li>我们的尝试：人数少，手把手教写代码，规划正规路线，讲授更亲近，</li><li>表明教练与学员的关系，说明负担情况，相互竞争原则，知识是构建的，提问辩证能帮助构建</li><li>为什么需要课堂：自然的、有批判精神的学习环境</li><li>团队合作的必要性：项目不是由一个人来完成的</li><li>团队的必要条件：成员在作为码农的能力是合格的 (用以解决中层次及高层次问题，而非低层次语法问题)</li><li>团队需要一定的流程来管理开发活动</li></ul></li><li><p><strong>团队合作怎么做 有哪些流程</strong></p><p>团队开发解决了什么？</p><ol><li>首先解决了工作量的问题</li><li>提高了软件开发、运营、维护的效率，提升软件的可靠性、可维护性<br>每个具体的开发者在团队中都有各种各样的角色担当，开发、测试、美工、管理等<br>把工作有序的组织起来就是团队流程<br>每个人应该被团队需求</li></ol><p>通常流程</p><ol><li>分析需求</li><li>设计模块</li><li>团队讲解项目 (成员有必要了解子系统、模块及他们之间的关系)</li><li>分模块任务安排 (初步)</li><li>合作开发 (通过文档沟通接口，做好单元测试)</li><li>记录开发进程、未完成事项、遇到的问题 (项目管理工具)</li><li>负责人通过每个人进度及能力调整部分任务分配 (细节)</li><li>相互提交模块代码  (pull request)</li><li>讨论问题</li><li>管理者合并代码  (merge)</li><li>集成测试</li><li>功能测试 (需求变动)</li><li>BUG 修复</li><li>部署</li><li>完成交付</li></ol></li><li><p><strong>个人学习规划</strong></p><p>初级软件工程师成长</p><ol><li>积累软件开发相关的知识，提升技术技能（如对具体技术的掌握，动手能力）</li><li>积累问题领域的知识和经验（例如：对前端或后台的了解）</li><li>对通用的软件设计思想和软件工程思想的理解</li><li>提升职业技能（区别于技术技能）</li><li>实际成果</li></ol></li><li><p><strong>软件推荐</strong></p><ul><li>本地搜索神器：Everything</li><li>文本编辑： UltraEdit  Notepad++  SouceInsight</li><li>版本控制：Git</li><li>Markdown编辑器：Typora</li><li>笔记管理：印象笔记</li><li>思维导图：Xmind</li><li>搜索引擎：Google  GitHub 百度</li><li>科学上网：SS (难，稳定)  Green (易，稳定性一般)</li><li>项目管理工具：GitHub  Worktile</li></ul></li><li><p><strong>书籍推荐</strong></p><ul><li>《XXXX 从入门到精通》</li><li>《XXXX 编程指南》</li><li>O’reilly 动物书</li><li>《大话设计模式》</li><li>《大话数据结构》</li><li>《操作系统原理》</li></ul></li></ol><p>以下将本次培训内容整理成思维导图了，点击可查看大图</p><p><img src="./WNCG-%E7%AC%AC%E4%B8%80%E5%91%A8%E5%9F%B9%E8%AE%AD%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png" alt="思维整理"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;培训与总结安排&lt;/strong&gt;&lt;br&gt;
每周有总结，总结上周内容，答疑，安排下周学什么&lt;br&gt;
每周培训讲上周总结时安排的内容，完成周志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;培训会给大家讲什么、为什么要强调团队合作&lt;/s
      
    
    </summary>
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/tags/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/tags/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>WCNG 新生软件培训思路</title>
    <link href="https://legacy-blog.zthxxx.me/posts/WCNG-Fresh-Student-Training-Ideas/"/>
    <id>https://legacy-blog.zthxxx.me/posts/WCNG-Fresh-Student-Training-Ideas/</id>
    <published>2016-10-19T16:15:23.000Z</published>
    <updated>2019-04-25T17:23:41.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-团队合作"><a class="headerlink" href="#1-团队合作"></a>1. <strong>团队合作</strong></h3><ul><li><strong>团队合作模型</strong><ul><li>每期小组间相互阐述各自上期工作总结</li><li>小组内成员每人每期完成一个周志</li><li>组长介绍任务，制定工作流程，安排分发任务</li><li>记录开发过程 / 进度 (Idea Plan Process Test Finish)</li></ul></li><li><strong>开发文档规范</strong><ul><li>表格 / 邮件 / 文档 格式</li><li>文案风格</li><li>内容要求(模板)</li></ul></li><li><strong>代码规范</strong><ul><li>代码风格规范</li><li>代码设计规范</li></ul></li><li><strong>任务分配及开发跟进流程</strong><ul><li>任务跟踪系统</li></ul></li></ul><h3 id="2-语言入门"><a class="headerlink" href="#2-语言入门"></a>2. <strong>语言入门</strong></h3><ul><li><strong>IDE的使用</strong></li><li><strong>语法</strong></li></ul><h3 id="3-编程思维-套路"><a class="headerlink" href="#3-编程思维-套路"></a>3. <strong>编程思维 (套路)</strong></h3><ul><li>解耦</li><li>复用而非复制</li><li>禁用硬编码</li><li>等通用良好代码写作思维。。。</li></ul><h3 id="4-项目构建流程-具体套路"><a class="headerlink" href="#4-项目构建流程-具体套路"></a>4. <strong>项目构建流程 (具体套路)</strong></h3><h3 id="5-具体开发实践与代码讲解"><a class="headerlink" href="#5-具体开发实践与代码讲解"></a>5. <strong>具体开发实践与代码讲解</strong></h3><ul><li>在具体编程中实践以上各种概念</li></ul><h3 id="6-进阶"><a class="headerlink" href="#6-进阶"></a>6. <strong>进阶</strong></h3><ul><li><strong>代码优化</strong><ul><li>数据结构</li><li>设计模式</li><li>算法</li></ul></li><li><strong>测试</strong><ul><li>单元测试</li><li>回归测试</li><li>自动化测试</li><li>Code Review</li><li>代码质量评价</li></ul></li><li><strong>部署</strong><ul><li>自动化部署</li><li>自动构建</li><li>持续集成</li></ul></li><li><strong>。。。。。。</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-团队合作&quot;&gt;&lt;a class=&quot;headerlink&quot; href=&quot;#1-团队合作&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;团队合作&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;团队合作模型&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;每期小组间相互阐述各自
      
    
    </summary>
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/categories/WNCG/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
    
      <category term="WNCG" scheme="https://legacy-blog.zthxxx.me/tags/WNCG/"/>
    
      <category term="学习规划" scheme="https://legacy-blog.zthxxx.me/tags/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
